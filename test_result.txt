
> living-narrative-engine@0.0.1 test:performance
> jest --config jest.config.performance.js --env=jsdom --silent tests/performance/logging/remoteLogger.integration.performance.test.js

FAIL performance tests/performance/logging/remoteLogger.integration.performance.test.js
  ● RemoteLogger - Performance Integration Tests › performance under load › should handle burst logging without loss

    expect(received).toBeLessThan(expected)

    Expected: < 100
    Received:   283.7768000000001

      183 |
      184 |       // Performance assertions
    > 185 |       expect(metrics.totalTime).toBeLessThan(100); // Under 100ms for burst processing with no delays
          |                                 ^
      186 |
      187 |       // All logs should be processed
      188 |       const stats = remoteLogger.getStats();

      at Object.toBeLessThan (tests/performance/logging/remoteLogger.integration.performance.test.js:185:33)

  ● RemoteLogger - Performance Integration Tests › performance under load › should maintain performance with large log entries

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 2

      233 |       const metrics = benchmark.end();
      234 |
    > 235 |       expect(mockServer.getRequestCount()).toBe(1);
          |                                            ^
      236 |
      237 |       // Should handle large entries without significant delay
      238 |       expect(metrics.totalTime).toBeLessThan(50); // Under 50ms for large entry with no delays

      at Object.toBe (tests/performance/logging/remoteLogger.integration.performance.test.js:235:44)

  ● RemoteLogger - Performance Integration Tests › performance benchmarks › should handle category detection with cache efficiently

    expect(received).toBeGreaterThan(expected)

    Expected: > 90
    Received:   75

      292 |       // Calculate cache hit rate
      293 |       const hitRate = parseFloat(stats.categoryDetector.cacheHitRate);
    > 294 |       expect(hitRate).toBeGreaterThan(90); // Should have >90% cache hit rate
          |                       ^
      295 |     });
      296 |
      297 |     it('should maintain performance with different metadata levels', async () => {

      at Object.toBeGreaterThan (tests/performance/logging/remoteLogger.integration.performance.test.js:294:23)

  ● RemoteLogger - Performance Integration Tests › performance benchmarks › should handle burst logging with enhanced features

    expect(received).toBeLessThan(expected)

    Expected: < 150
    Received:   242.47249999999985

      389 |
      390 |       // Should handle burst efficiently
    > 391 |       expect(metrics.totalTime).toBeLessThan(150); // Less than 150ms for 1000 logs with no delays
          |                                 ^
      392 |
      393 |       const stats = remoteLogger.getStats();
      394 |       expect(stats.bufferSize).toBe(0); // All logs should be sent

      at Object.toBeLessThan (tests/performance/logging/remoteLogger.integration.performance.test.js:391:33)

Test Suites: 1 failed, 1 total
Tests:       4 failed, 2 passed, 6 total
Snapshots:   0 total
Time:        3.201 s, estimated 159 s
