ConditionLoader: Loading conditions definitions for mod 'core'.
consoleLogger.js:151 MacroLoader: Loading macros definitions for mod 'core'.
consoleLogger.js:151 ActionLoader: Loading actions definitions for mod 'core'.
consoleLogger.js:151 RuleLoader: Loading rules definitions for mod 'core'.
consoleLogger.js:151 ScopeLoader: Loading scopes definitions for mod 'core'.
consoleLogger.js:151 ComponentLoader: Loading components definitions for mod 'positioning'.
consoleLogger.js:151 EventLoader: Loading events definitions for mod 'positioning'.
consoleLogger.js:151 ConditionLoader: Loading conditions definitions for mod 'positioning'.
consoleLogger.js:151 ActionLoader: Loading actions definitions for mod 'positioning'.
consoleLogger.js:151 RuleLoader: Loading rules definitions for mod 'positioning'.
consoleLogger.js:175 RuleLoader [positioning]: Primary schema validation failed for 'stand_up.rule.json' using schema 'schema://living-narrative-engine/rule.schema.json'. {modId: 'positioning', filename: 'stand_up.rule.json', resolvedPath: './data/mods/positioning/rules/stand_up.rule.json', schemaId: 'schema://living-narrative-engine/rule.schema.json', validationErrors: Array(148), …}
error @ consoleLogger.js:175
error @ loggerStrategy.js:452
validateAgainstSchema @ schemaValidationUtils.js:85
_validatePrimarySchema @ baseManifestItemLoader.js:210
validatePrimarySchema @ baseManifestItemLoader.js:408
_processFileWrapper @ baseManifestItemLoader.js:320
await in _processFileWrapper
(anonymous) @ baseManifestItemLoader.js:506
_loadItemsInternal @ baseManifestItemLoader.js:505
loadItemsForMod @ baseManifestItemLoader.js:640
runLoadersForMod_fn @ ModProcessor.js:164
await in runLoadersForMod_fn
processMod @ ModProcessor.js:80
await in processMod
executeModProcessing_fn @ ContentLoadManager.js:222
processMod @ ContentLoadManager.js:212
loadContentForPhase @ ContentLoadManager.js:174
await in loadContentForPhase
loadContent @ ContentLoadManager.js:81
execute @ contentPhase.js:51
run @ ModsLoadSession.js:19
await in run
loadMods @ modsLoader.js:85
loadMods_fn @ initializationService.js:359
runInitializationSequence @ initializationService.js:282
executeInitializationSequence_fn @ gameEngine.js:202
await in executeInitializationSequence_fn
initializeNewGame_fn @ gameEngine.js:274
await in initializeNewGame_fn
startNewGame @ gameEngine.js:318
startGameStage @ engineStages.js:87
beginGame @ main.js:254
(anonymous) @ game.html:331
Promise.then
(anonymous) @ game.html:328Understand this error
consoleLogger.js:175 Error processing file: {modId: 'positioning', filename: 'stand_up.rule.json', path: './data/mods/positioning/rules/stand_up.rule.json', registryKey: 'rules', error: 'RuleLoader [positioning]: Primary schema validatio…d": "{event.payload.actorId}"\n      }\n    }\n  }\n]'} Error: RuleLoader [positioning]: Primary schema validation failed for 'stand_up.rule.json' using schema 'schema://living-narrative-engine/rule.schema.json'.
Details:
[
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "QUERY_COMPONENT"
    },
    "message": "must be equal to constant",
    "schema": "QUERY_COMPONENT",
    "parentSchema": {
      "const": "QUERY_COMPONENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "missing_value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "component_type"
    },
    "message": "must have required property 'component_type'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "missing_value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "missing_value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "missing_value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "QUERY_COMPONENTS"
    },
    "message": "must be equal to constant",
    "schema": "QUERY_COMPONENTS",
    "parentSchema": {
      "const": "QUERY_COMPONENTS"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "pairs"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENTS operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "pairs": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Pair"
          }
        }
      },
      "required": [
        "entity_ref",
        "pairs"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "pairs"
    },
    "message": "must have required property 'pairs'",
    "schema": [
      "entity_ref",
      "pairs"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENTS operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "pairs": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Pair"
          }
        }
      },
      "required": [
        "entity_ref",
        "pairs"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENTS operation.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "pairs": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Pair"
          }
        }
      },
      "required": [
        "entity_ref",
        "pairs"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "MODIFY_COMPONENT"
    },
    "message": "must be equal to constant",
    "schema": "MODIFY_COMPONENT",
    "parentSchema": {
      "const": "MODIFY_COMPONENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "component_type",
      "field",
      "mode",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "component_type"
    },
    "message": "must have required property 'component_type'",
    "schema": [
      "entity_ref",
      "component_type",
      "field",
      "mode",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "field"
    },
    "message": "must have required property 'field'",
    "schema": [
      "entity_ref",
      "component_type",
      "field",
      "mode",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "mode"
    },
    "message": "must have required property 'mode'",
    "schema": [
      "entity_ref",
      "component_type",
      "field",
      "mode",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "value"
    },
    "message": "must have required property 'value'",
    "schema": [
      "entity_ref",
      "component_type",
      "field",
      "mode",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": [
            "set"
          ],
          "default": "set"
        },
        "value": {}
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "ADD_COMPONENT"
    },
    "message": "must be equal to constant",
    "schema": "ADD_COMPONENT",
    "parentSchema": {
      "const": "ADD_COMPONENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "component_type",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "value": {
          "type": "object",
          "minProperties": 0
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "component_type"
    },
    "message": "must have required property 'component_type'",
    "schema": [
      "entity_ref",
      "component_type",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "value": {
          "type": "object",
          "minProperties": 0
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "value"
    },
    "message": "must have required property 'value'",
    "schema": [
      "entity_ref",
      "component_type",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "value": {
          "type": "object",
          "minProperties": 0
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "value": {
          "type": "object",
          "minProperties": 0
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "REMOVE_COMPONENT"
    },
    "message": "must be equal to constant",
    "schema": "REMOVE_COMPONENT",
    "parentSchema": {
      "const": "REMOVE_COMPONENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "component_type"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        }
      },
      "required": [
        "entity_ref",
        "component_type"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "component_type"
    },
    "message": "must have required property 'component_type'",
    "schema": [
      "entity_ref",
      "component_type"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        }
      },
      "required": [
        "entity_ref",
        "component_type"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        }
      },
      "required": [
        "entity_ref",
        "component_type"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "DISPATCH_EVENT"
    },
    "message": "must be equal to constant",
    "schema": "DISPATCH_EVENT",
    "parentSchema": {
      "const": "DISPATCH_EVENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "eventType"
    },
    "message": "must have required property 'eventType'",
    "schema": [
      "eventType"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "payload": {
          "type": "object",
          "default": {}
        }
      },
      "required": [
        "eventType"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "payload": {
          "type": "object",
          "default": {}
        }
      },
      "required": [
        "eventType"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "DISPATCH_PERCEPTIBLE_EVENT"
    },
    "message": "must be equal to constant",
    "schema": "DISPATCH_PERCEPTIBLE_EVENT",
    "parentSchema": {
      "const": "DISPATCH_PERCEPTIBLE_EVENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "location_id"
    },
    "message": "must have required property 'location_id'",
    "schema": [
      "location_id",
      "description_text",
      "perception_type",
      "actor_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_PERCEPTIBLE_EVENT operation. Builds and dispatches core:perceptible_event.",
      "properties": {
        "location_id": {
          "type": "string"
        },
        "description_text": {
          "type": "string",
          "minLength": 1
        },
        "perception_type": {
          "type": "string",
          "enum": [
            "character_enter",
            "character_exit",
            "item_pickup",
            "item_drop",
            "item_use",
            "speech_local",
            "action_self_general",
            "action_target_general",
            "combat_attack",
            "combat_effect",
            "state_change_observable"
          ]
        },
        "actor_id": {
          "type": "string"
        },
        "target_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "involved_entities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "contextual_data": {
          "type": "object",
          "default": {}
        },
        "log_entry": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "location_id",
        "description_text",
        "perception_type",
        "actor_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "description_text"
    },
    "message": "must have required property 'description_text'",
    "schema": [
      "location_id",
      "description_text",
      "perception_type",
      "actor_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_PERCEPTIBLE_EVENT operation. Builds and dispatches core:perceptible_event.",
      "properties": {
        "location_id": {
          "type": "string"
        },
        "description_text": {
          "type": "string",
          "minLength": 1
        },
        "perception_type": {
          "type": "string",
          "enum": [
            "character_enter",
            "character_exit",
            "item_pickup",
            "item_drop",
            "item_use",
            "speech_local",
            "action_self_general",
            "action_target_general",
            "combat_attack",
            "combat_effect",
            "state_change_observable"
          ]
        },
        "actor_id": {
          "type": "string"
        },
        "target_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "involved_entities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "contextual_data": {
          "type": "object",
          "default": {}
        },
        "log_entry": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "location_id",
        "description_text",
        "perception_type",
        "actor_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "perception_type"
    },
    "message": "must have required property 'perception_type'",
    "schema": [
      "location_id",
      "description_text",
      "perception_type",
      "actor_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_PERCEPTIBLE_EVENT operation. Builds and dispatches core:perceptible_event.",
      "properties": {
        "location_id": {
          "type": "string"
        },
        "description_text": {
          "type": "string",
          "minLength": 1
        },
        "perception_type": {
          "type": "string",
          "enum": [
            "character_enter",
            "character_exit",
            "item_pickup",
            "item_drop",
            "item_use",
            "speech_local",
            "action_self_general",
            "action_target_general",
            "combat_attack",
            "combat_effect",
            "state_change_observable"
          ]
        },
        "actor_id": {
          "type": "string"
        },
        "target_id": {
          "type": [
            "string",
            "null"
          ]
        },
        "involved_entities": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": []
        },
        "contextual_data": {
          "type": "object",
          "default": {}
        },
        "log_entry": {
          "type": "boolean",
          "default": false
        }
      },
      "required": [
        "location_id",
        "description_text",
        "perception_type",
        "actor_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "DISPATCH_SPEECH"
    },
    "message": "must be equal to constant",
    "schema": "DISPATCH_SPEECH",
    "parentSchema": {
      "const": "DISPATCH_SPEECH"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_id"
    },
    "message": "must have required property 'entity_id'",
    "schema": [
      "entity_id",
      "speech_content"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_SPEECH operation. Emits core:display_speech.",
      "properties": {
        "entity_id": {
          "type": "string",
          "minLength": 1
        },
        "speech_content": {
          "type": "string",
          "minLength": 1
        },
        "thoughts": {
          "type": "string",
          "minLength": 1
        },
        "notes": {
          "type": "string",
          "minLength": 1
        },
        "allow_html": {
          "type": "boolean"
        }
      },
      "required": [
        "entity_id",
        "speech_content"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "speech_content"
    },
    "message": "must have required property 'speech_content'",
    "schema": [
      "entity_id",
      "speech_content"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_SPEECH operation. Emits core:display_speech.",
      "properties": {
        "entity_id": {
          "type": "string",
          "minLength": 1
        },
        "speech_content": {
          "type": "string",
          "minLength": 1
        },
        "thoughts": {
          "type": "string",
          "minLength": 1
        },
        "notes": {
          "type": "string",
          "minLength": 1
        },
        "allow_html": {
          "type": "boolean"
        }
      },
      "required": [
        "entity_id",
        "speech_content"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the DISPATCH_SPEECH operation. Emits core:display_speech.",
      "properties": {
        "entity_id": {
          "type": "string",
          "minLength": 1
        },
        "speech_content": {
          "type": "string",
          "minLength": 1
        },
        "thoughts": {
          "type": "string",
          "minLength": 1
        },
        "notes": {
          "type": "string",
          "minLength": 1
        },
        "allow_html": {
          "type": "boolean"
        }
      },
      "required": [
        "entity_id",
        "speech_content"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "END_TURN"
    },
    "message": "must be equal to constant",
    "schema": "END_TURN",
    "parentSchema": {
      "const": "END_TURN"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entityId"
    },
    "message": "must have required property 'entityId'",
    "schema": [
      "entityId",
      "success"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the END_TURN operation, dispatching core:turn_ended.",
      "properties": {
        "entityId": {
          "type": "string",
          "minLength": 1
        },
        "success": {
          "type": "boolean"
        },
        "error": {
          "type": "object"
        }
      },
      "required": [
        "entityId",
        "success"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "success"
    },
    "message": "must have required property 'success'",
    "schema": [
      "entityId",
      "success"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the END_TURN operation, dispatching core:turn_ended.",
      "properties": {
        "entityId": {
          "type": "string",
          "minLength": 1
        },
        "success": {
          "type": "boolean"
        },
        "error": {
          "type": "object"
        }
      },
      "required": [
        "entityId",
        "success"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the END_TURN operation, dispatching core:turn_ended.",
      "properties": {
        "entityId": {
          "type": "string",
          "minLength": 1
        },
        "success": {
          "type": "boolean"
        },
        "error": {
          "type": "object"
        }
      },
      "required": [
        "entityId",
        "success"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "IF"
    },
    "message": "must be equal to constant",
    "schema": "IF",
    "parentSchema": {
      "const": "IF"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "condition"
    },
    "message": "must have required property 'condition'",
    "schema": [
      "condition",
      "then_actions"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "../json-logic.schema.json#"
        },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        },
        "else_actions": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "then_actions"
    },
    "message": "must have required property 'then_actions'",
    "schema": [
      "condition",
      "then_actions"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "../json-logic.schema.json#"
        },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        },
        "else_actions": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "../json-logic.schema.json#"
        },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        },
        "else_actions": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "FOR_EACH"
    },
    "message": "must be equal to constant",
    "schema": "FOR_EACH",
    "parentSchema": {
      "const": "FOR_EACH"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "collection"
    },
    "message": "must have required property 'collection'",
    "schema": [
      "collection",
      "item_variable",
      "actions"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": {
          "type": "string"
        },
        "item_variable": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "collection",
        "item_variable",
        "actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "item_variable"
    },
    "message": "must have required property 'item_variable'",
    "schema": [
      "collection",
      "item_variable",
      "actions"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": {
          "type": "string"
        },
        "item_variable": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "collection",
        "item_variable",
        "actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "actions"
    },
    "message": "must have required property 'actions'",
    "schema": [
      "collection",
      "item_variable",
      "actions"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": {
          "type": "string"
        },
        "item_variable": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "collection",
        "item_variable",
        "actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": {
          "type": "string"
        },
        "item_variable": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "../operation.schema.json#/$defs/Action"
          }
        }
      },
      "required": [
        "collection",
        "item_variable",
        "actions"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "LOG"
    },
    "message": "must be equal to constant",
    "schema": "LOG",
    "parentSchema": {
      "const": "LOG"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "message"
    },
    "message": "must have required property 'message'",
    "schema": [
      "message"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "SET_VARIABLE"
    },
    "message": "must be equal to constant",
    "schema": "SET_VARIABLE",
    "parentSchema": {
      "const": "SET_VARIABLE"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "variable_name"
    },
    "message": "must have required property 'variable_name'",
    "schema": [
      "variable_name",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {}
      },
      "required": [
        "variable_name",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "value"
    },
    "message": "must have required property 'value'",
    "schema": [
      "variable_name",
      "value"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {}
      },
      "required": [
        "variable_name",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {}
      },
      "required": [
        "variable_name",
        "value"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "GET_TIMESTAMP"
    },
    "message": "must be equal to constant",
    "schema": "GET_TIMESTAMP",
    "parentSchema": {
      "const": "GET_TIMESTAMP"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "properties": {
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "GET_NAME"
    },
    "message": "must be equal to constant",
    "schema": "GET_NAME",
    "parentSchema": {
      "const": "GET_NAME"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": [
        "entity_ref",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "entity_ref",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": [
        "entity_ref",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": [
        "entity_ref",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "RESOLVE_DIRECTION"
    },
    "message": "must be equal to constant",
    "schema": "RESOLVE_DIRECTION",
    "parentSchema": {
      "const": "RESOLVE_DIRECTION"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "current_location_id"
    },
    "message": "must have required property 'current_location_id'",
    "schema": [
      "current_location_id",
      "direction",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "current_location_id": {
          "type": "string",
          "minLength": 1
        },
        "direction": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "current_location_id",
        "direction",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "direction"
    },
    "message": "must have required property 'direction'",
    "schema": [
      "current_location_id",
      "direction",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "current_location_id": {
          "type": "string",
          "minLength": 1
        },
        "direction": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "current_location_id",
        "direction",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "current_location_id",
      "direction",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "current_location_id": {
          "type": "string",
          "minLength": 1
        },
        "direction": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "current_location_id",
        "direction",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "properties": {
        "current_location_id": {
          "type": "string",
          "minLength": 1
        },
        "direction": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "current_location_id",
        "direction",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "SYSTEM_MOVE_ENTITY"
    },
    "message": "must be equal to constant",
    "schema": "SYSTEM_MOVE_ENTITY",
    "parentSchema": {
      "const": "SYSTEM_MOVE_ENTITY"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "target_location_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SYSTEM_MOVE_ENTITY operation, which directly moves an entity to a new location without consuming a turn.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference",
          "description": "Required. The entity to move."
        },
        "target_location_id": {
          "type": "string",
          "description": "Required. The namespaced ID of the location to move the entity to. Can be a placeholder string like '{event.payload.currentLocationId}'."
        }
      },
      "required": [
        "entity_ref",
        "target_location_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "target_location_id"
    },
    "message": "must have required property 'target_location_id'",
    "schema": [
      "entity_ref",
      "target_location_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SYSTEM_MOVE_ENTITY operation, which directly moves an entity to a new location without consuming a turn.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference",
          "description": "Required. The entity to move."
        },
        "target_location_id": {
          "type": "string",
          "description": "Required. The namespaced ID of the location to move the entity to. Can be a placeholder string like '{event.payload.currentLocationId}'."
        }
      },
      "required": [
        "entity_ref",
        "target_location_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the SYSTEM_MOVE_ENTITY operation, which directly moves an entity to a new location without consuming a turn.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference",
          "description": "Required. The entity to move."
        },
        "target_location_id": {
          "type": "string",
          "description": "Required. The namespaced ID of the location to move the entity to. Can be a placeholder string like '{event.payload.currentLocationId}'."
        }
      },
      "required": [
        "entity_ref",
        "target_location_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "REBUILD_LEADER_LIST_CACHE"
    },
    "message": "must be equal to constant",
    "schema": "REBUILD_LEADER_LIST_CACHE",
    "parentSchema": {
      "const": "REBUILD_LEADER_LIST_CACHE"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "leaderIds"
    },
    "message": "must have required property 'leaderIds'",
    "schema": [
      "leaderIds"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Rebuilds the core:leading cache for specified leader IDs.",
      "properties": {
        "leaderIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Array of leader entity IDs."
        }
      },
      "required": [
        "leaderIds"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Rebuilds the core:leading cache for specified leader IDs.",
      "properties": {
        "leaderIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Array of leader entity IDs."
        }
      },
      "required": [
        "leaderIds"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "CHECK_FOLLOW_CYCLE"
    },
    "message": "must be equal to constant",
    "schema": "CHECK_FOLLOW_CYCLE",
    "parentSchema": {
      "const": "CHECK_FOLLOW_CYCLE"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "follower_id"
    },
    "message": "must have required property 'follower_id'",
    "schema": [
      "follower_id",
      "leader_id",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the CHECK_FOLLOW_CYCLE operation. Checks if following would create a cycle.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "follower_id",
        "leader_id",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "leader_id"
    },
    "message": "must have required property 'leader_id'",
    "schema": [
      "follower_id",
      "leader_id",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the CHECK_FOLLOW_CYCLE operation. Checks if following would create a cycle.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "follower_id",
        "leader_id",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "follower_id",
      "leader_id",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the CHECK_FOLLOW_CYCLE operation. Checks if following would create a cycle.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "follower_id",
        "leader_id",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the CHECK_FOLLOW_CYCLE operation. Checks if following would create a cycle.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "follower_id",
        "leader_id",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "ESTABLISH_FOLLOW_RELATION"
    },
    "message": "must be equal to constant",
    "schema": "ESTABLISH_FOLLOW_RELATION",
    "parentSchema": {
      "const": "ESTABLISH_FOLLOW_RELATION"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "follower_id"
    },
    "message": "must have required property 'follower_id'",
    "schema": [
      "follower_id",
      "leader_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ESTABLISH_FOLLOW_RELATION operation.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "follower_id",
        "leader_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "leader_id"
    },
    "message": "must have required property 'leader_id'",
    "schema": [
      "follower_id",
      "leader_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ESTABLISH_FOLLOW_RELATION operation.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "follower_id",
        "leader_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the ESTABLISH_FOLLOW_RELATION operation.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "follower_id",
        "leader_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "BREAK_FOLLOW_RELATION"
    },
    "message": "must be equal to constant",
    "schema": "BREAK_FOLLOW_RELATION",
    "parentSchema": {
      "const": "BREAK_FOLLOW_RELATION"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "follower_id"
    },
    "message": "must have required property 'follower_id'",
    "schema": [
      "follower_id"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the BREAK_FOLLOW_RELATION operation.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "follower_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the BREAK_FOLLOW_RELATION operation.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": [
        "follower_id"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "ADD_PERCEPTION_LOG_ENTRY"
    },
    "message": "must be equal to constant",
    "schema": "ADD_PERCEPTION_LOG_ENTRY",
    "parentSchema": {
      "const": "ADD_PERCEPTION_LOG_ENTRY"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "location_id"
    },
    "message": "must have required property 'location_id'",
    "schema": [
      "location_id",
      "entry"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "location_id": {
          "type": "string",
          "minLength": 1
        },
        "entry": {
          "type": "object",
          "minProperties": 1
        },
        "originating_actor_id": {
          "type": "string"
        }
      },
      "required": [
        "location_id",
        "entry"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entry"
    },
    "message": "must have required property 'entry'",
    "schema": [
      "location_id",
      "entry"
    ],
    "parentSchema": {
      "type": "object",
      "properties": {
        "location_id": {
          "type": "string",
          "minLength": 1
        },
        "entry": {
          "type": "object",
          "minProperties": 1
        },
        "originating_actor_id": {
          "type": "string"
        }
      },
      "required": [
        "location_id",
        "entry"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/$defs/Parameters/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "properties": {
        "location_id": {
          "type": "string",
          "minLength": 1
        },
        "entry": {
          "type": "object",
          "minProperties": 1
        },
        "originating_actor_id": {
          "type": "string"
        }
      },
      "required": [
        "location_id",
        "entry"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "HAS_COMPONENT"
    },
    "message": "must be equal to constant",
    "schema": "HAS_COMPONENT",
    "parentSchema": {
      "const": "HAS_COMPONENT"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "entity_ref"
    },
    "message": "must have required property 'entity_ref'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the HAS_COMPONENT operation. Checks if an entity has a component.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the boolean result (true/false) in.",
          "minLength": 1
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "component_type"
    },
    "message": "must have required property 'component_type'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the HAS_COMPONENT operation. Checks if an entity has a component.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the boolean result (true/false) in.",
          "minLength": 1
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/required",
    "keyword": "required",
    "params": {
      "missingProperty": "result_variable"
    },
    "message": "must have required property 'result_variable'",
    "schema": [
      "entity_ref",
      "component_type",
      "result_variable"
    ],
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the HAS_COMPONENT operation. Checks if an entity has a component.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the boolean result (true/false) in.",
          "minLength": 1
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/parameters",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "actor_id"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "type": "object",
      "description": "Parameters for the HAS_COMPONENT operation. Checks if an entity has a component.",
      "properties": {
        "entity_ref": {
          "$ref": "../common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "../common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the boolean result (true/false) in.",
          "minLength": 1
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "data": {
      "actor_id": "{event.payload.actorId}"
    }
  },
  {
    "instancePath": "/actions/3/type",
    "schemaPath": "#/allOf/1/properties/type/const",
    "keyword": "const",
    "params": {
      "allowedValue": "QUERY_ENTITIES"
    },
    "message": "must be equal to constant",
    "schema": "QUERY_ENTITIES",
    "parentSchema": {
      "const": "QUERY_ENTITIES"
    },
    "data": "UNLOCK_MOVEMENT"
  },
  {