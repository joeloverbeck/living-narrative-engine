AnatomyRecipeLoader [anatomy]: Successfully processed anatomy recipe from human_female.recipe.json. Final registry key: anatomy:human_female, Overwrite: false
consoleLogger.js:187 [anatomy] Successfully processed human_female.recipe.json. Result: ID=anatomy:human_female, Overwrite=false
consoleLogger.js:187 [anatomy] Fetched data from ./data/mods/anatomy/recipes/human_male.recipe.json
consoleLogger.js:187 AnatomyRecipeLoader [anatomy]: Validating 'human_male.recipe.json' against primary schema 'schema://living-narrative-engine/anatomy.recipe.schema.json'.
consoleLogger.js:187 AnatomyRecipeLoader [anatomy]: Processing fetched item: human_male.recipe.json (Type: anatomyRecipes)
consoleLogger.js:187 AnatomyRecipeLoader [anatomy]: Storing item in registry. Category: 'anatomyRecipes', Qualified ID: 'anatomy:human_male', Base ID: 'human_male', Filename: 'human_male.recipe.json'
consoleLogger.js:187 AnatomyRecipeLoader [anatomy]: Item 'anatomy:human_male' (Base: 'human_male') stored successfully in category 'anatomyRecipes'.
consoleLogger.js:187 AnatomyRecipeLoader [anatomy]: Successfully processed anatomy recipe from human_male.recipe.json. Final registry key: anatomy:human_male, Overwrite: false
consoleLogger.js:187 [anatomy] Successfully processed human_male.recipe.json. Result: ID=anatomy:human_male, Overwrite=false
consoleLogger.js:151 Mod [anatomy] - Processed 3/3 recipes items.
consoleLogger.js:187 ModsLoader [anatomy, definitions]: Processing anatomyFormatting content with 1 files...
consoleLogger.js:187 ModsLoader [anatomy, definitions]: Found content for 'anatomyFormatting'. Invoking loader 'AnatomyFormattingLoader'.
consoleLogger.js:151 AnatomyFormattingLoader: Loading anatomyFormatting definitions for mod 'anatomy'.
consoleLogger.js:187 Found 1 potential anatomyFormatting files to process for mod anatomy.
consoleLogger.js:187 [anatomy] Resolved path for default.json: ./data/mods/anatomy/anatomy-formatting/default.json
consoleLogger.js:187 [anatomy] Fetched data from ./data/mods/anatomy/anatomy-formatting/default.json
consoleLogger.js:187 AnatomyFormattingLoader [anatomy]: Validating 'default.json' against primary schema 'schema://living-narrative-engine/anatomy-formatting.schema.json'.
consoleLogger.js:175 AnatomyFormattingLoader [anatomy]: Primary schema validation failed for 'default.json' using schema 'schema://living-narrative-engine/anatomy-formatting.schema.json'. {modId: 'anatomy', filename: 'default.json', resolvedPath: './data/mods/anatomy/anatomy-formatting/default.json', schemaId: 'schema://living-narrative-engine/anatomy-formatting.schema.json', validationErrors: Array(1), …}
error @ consoleLogger.js:175
validateAgainstSchema @ schemaValidationUtils.js:85
_validatePrimarySchema @ baseManifestItemLoader.js:210
validatePrimarySchema @ baseManifestItemLoader.js:408
_processFileWrapper @ baseManifestItemLoader.js:320
await in _processFileWrapper
(anonymous) @ baseManifestItemLoader.js:506
_loadItemsInternal @ baseManifestItemLoader.js:505
loadItemsForMod @ baseManifestItemLoader.js:640
#runLoadersForMod @ ModProcessor.js:164
await in #runLoadersForMod
processMod @ ModProcessor.js:80
await in processMod
#executeModProcessing @ ContentLoadManager.js:222
processMod @ ContentLoadManager.js:212
loadContentForPhase @ ContentLoadManager.js:174
await in loadContentForPhase
loadContent @ ContentLoadManager.js:81
execute @ contentPhase.js:51
run @ ModsLoadSession.js:19
await in run
loadMods @ modsLoader.js:85
loadModsFromGameConfig @ modLoadingUtils.js:33
await in loadModsFromGameConfig
bootstrap @ CommonBootstrapper.js:91
await in bootstrap
initialize @ anatomy-visualizer.js:18Understand this error
consoleLogger.js:175 Error processing file: {modId: 'anatomy', filename: 'default.json', path: './data/mods/anatomy/anatomy-formatting/default.json', registryKey: 'anatomyFormatting', error: 'AnatomyFormattingLoader [anatomy]: Primary schema … "placement": "after_anatomy"\n      }\n    }\n  }\n]'} Error: AnatomyFormattingLoader [anatomy]: Primary schema validation failed for 'default.json' using schema 'schema://living-narrative-engine/anatomy-formatting.schema.json'.
Details:
[
  {
    "instancePath": "",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "equipmentIntegration"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "schema://living-narrative-engine/anatomy-formatting.schema.json",
      "title": "Anatomy Formatting Schema",
      "description": "Defines formatting rules for anatomy descriptions including part order, pluralization, and descriptor formatting",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "type": "string",
          "description": "Optional. A URI reference to the schema for editor support."
        },
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "description": "Unique identifier for this formatting configuration"
        },
        "descriptionOrder": {
          "type": "array",
          "description": "Order in which body part types appear in descriptions",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "pairedParts": {
          "type": "array",
          "description": "Body part types that are paired (like eyes, arms, etc.) and should be grouped when they have the same descriptors",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "irregularPlurals": {
          "type": "object",
          "description": "Mapping of body part types to their irregular plural forms",
          "additionalProperties": {
            "type": "string",
            "minLength": 1
          }
        },
        "descriptorOrder": {
          "type": "array",
          "description": "Order in which descriptor component types appear in descriptions",
          "items": {
            "type": "string",
            "pattern": "^descriptors:[a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "descriptorValueKeys": {
          "type": "array",
          "description": "Keys to search for when extracting descriptor values from components",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        }
      },
      "required": [
        "id"
      ]
    },
    "data": {
      "$schema": "../../../schemas/anatomy-formatting.schema.json",
      "id": "default",
      "descriptionOrder": [
        "build",
        "hair",
        "eye",
        "face",
        "ear",
        "nose",
        "mouth",
        "neck",
        "breast",
        "torso",
        "arm",
        "hand",
        "leg",
        "foot",
        "pubic_hair",
        "vagina",
        "penis",
        "testicle",
        "tail",
        "wing",
        "equipment"
      ],
      "pairedParts": [
        "eye",
        "ear",
        "arm",
        "leg",
        "hand",
        "foot",
        "breast",
        "wing",
        "testicle"
      ],
      "irregularPlurals": {
        "foot": "feet",
        "tooth": "teeth"
      },
      "descriptorOrder": [
        "descriptors:length_category",
        "descriptors:length_hair",
        "descriptors:size_category",
        "descriptors:size_specific",
        "descriptors:weight_feel",
        "descriptors:color_basic",
        "descriptors:color_extended",
        "descriptors:shape_general",
        "descriptors:shape_eye",
        "descriptors:hair_style",
        "descriptors:texture",
        "descriptors:firmness",
        "descriptors:build"
      ],
      "descriptorValueKeys": [
        "value",
        "color",
        "size",
        "shape",
        "length",
        "style",
        "texture",
        "firmness",
        "build",
        "weight"
      ],
      "equipmentIntegration": {
        "enabled": true,
        "prefix": "Wearing: ",
        "suffix": ".",
        "separator": ", ",
        "itemSeparator": " | ",
        "placement": "after_anatomy"
      }
    }
  }
]
    at validateAgainstSchema (schemaValidationUtils.js:97:11)
    at AnatomyFormattingLoader._validatePrimarySchema (baseManifestItemLoader.js:210:12)
    at AnatomyFormattingLoader.validatePrimarySchema (baseManifestItemLoader.js:408:12)
    at AnatomyFormattingLoader._processFileWrapper (baseManifestItemLoader.js:320:10)
    at async Promise.allSettled (index 0)
    at async AnatomyFormattingLoader._loadItemsInternal (baseManifestItemLoader.js:509:28)
    at async #runLoadersForMod (ModProcessor.js:164:15)
    at async ModProcessor.processMod (ModProcessor.js:80:52)
    at async ContentLoadManager.loadContentForPhase (ContentLoadManager.js:174:24)
    at async ContentLoadManager.loadContent (ContentLoadManager.js:81:7)
error @ consoleLogger.js:175
validatePrimarySchema @ baseManifestItemLoader.js:410
_processFileWrapper @ baseManifestItemLoader.js:320
await in _processFileWrapper
(anonymous) @ baseManifestItemLoader.js:506
_loadItemsInternal @ baseManifestItemLoader.js:505
loadItemsForMod @ baseManifestItemLoader.js:640
#runLoadersForMod @ ModProcessor.js:164
await in #runLoadersForMod
processMod @ ModProcessor.js:80
await in processMod
#executeModProcessing @ ContentLoadManager.js:222
processMod @ ContentLoadManager.js:212
loadContentForPhase @ ContentLoadManager.js:174
await in loadContentForPhase
loadContent @ ContentLoadManager.js:81
execute @ contentPhase.js:51
run @ ModsLoadSession.js:19
await in run
loadMods @ modsLoader.js:85
loadModsFromGameConfig @ modLoadingUtils.js:33
await in loadModsFromGameConfig
bootstrap @ CommonBootstrapper.js:91
await in bootstrap
initialize @ anatomy-visualizer.js:18Understand this error
consoleLogger.js:187 [anatomy] Failure recorded for default.json in batch processing. Reason logged previously.
consoleLogger.js:151 Mod [anatomy] - Processed 0/1 anatomyFormatting items. (1 failed)
consoleLogger.js:175 ModsLoader [anatomy, definitions]: anatomyFormatting file 'default.json' failed: AnatomyFormattingLoader [anatomy]: Primary schema validation failed for 'default.json' using schema 'schema://living-narrative-engine/anatomy-formatting.schema.json'.
Details:
[
  {
    "instancePath": "",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "equipmentIntegration"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "schema://living-narrative-engine/anatomy-formatting.schema.json",
      "title": "Anatomy Formatting Schema",
      "description": "Defines formatting rules for anatomy descriptions including part order, pluralization, and descriptor formatting",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "type": "string",
          "description": "Optional. A URI reference to the schema for editor support."
        },
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "description": "Unique identifier for this formatting configuration"
        },
        "descriptionOrder": {
          "type": "array",
          "description": "Order in which body part types appear in descriptions",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "pairedParts": {
          "type": "array",
          "description": "Body part types that are paired (like eyes, arms, etc.) and should be grouped when they have the same descriptors",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "irregularPlurals": {
          "type": "object",
          "description": "Mapping of body part types to their irregular plural forms",
          "additionalProperties": {
            "type": "string",
            "minLength": 1
          }
        },
        "descriptorOrder": {
          "type": "array",
          "description": "Order in which descriptor component types appear in descriptions",
          "items": {
            "type": "string",
            "pattern": "^descriptors:[a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "descriptorValueKeys": {
          "type": "array",
          "description": "Keys to search for when extracting descriptor values from components",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        }
      },
      "required": [
        "id"
      ]
    },
    "data": {
      "$schema": "../../../schemas/anatomy-formatting.schema.json",
      "id": "default",
      "descriptionOrder": [
        "build",
        "hair",
        "eye",
        "face",
        "ear",
        "nose",
        "mouth",
        "neck",
        "breast",
        "torso",
        "arm",
        "hand",
        "leg",
        "foot",
        "pubic_hair",
        "vagina",
        "penis",
        "testicle",
        "tail",
        "wing",
        "equipment"
      ],
      "pairedParts": [
        "eye",
        "ear",
        "arm",
        "leg",
        "hand",
        "foot",
        "breast",
        "wing",
        "testicle"
      ],
      "irregularPlurals": {
        "foot": "feet",
        "tooth": "teeth"
      },
      "descriptorOrder": [
        "descriptors:length_category",
        "descriptors:length_hair",
        "descriptors:size_category",
        "descriptors:size_specific",
        "descriptors:weight_feel",
        "descriptors:color_basic",
        "descriptors:color_extended",
        "descriptors:shape_general",
        "descriptors:shape_eye",
        "descriptors:hair_style",
        "descriptors:texture",
        "descriptors:firmness",
        "descriptors:build"
      ],
      "descriptorValueKeys": [
        "value",
        "color",
        "size",
        "shape",
        "length",
        "style",
        "texture",
        "firmness",
        "build",
        "weight"
      ],
      "equipmentIntegration": {
        "enabled": true,
        "prefix": "Wearing: ",
        "suffix": ".",
        "separator": ", ",
        "itemSeparator": " | ",
        "placement": "after_anatomy"
      }
    }
  }
] {modId: 'anatomy', registryKey: 'anatomyFormatting', phase: 'definitions', file: 'default.json', error: 'AnatomyFormattingLoader [anatomy]: Primary schema … "placement": "after_anatomy"\n      }\n    }\n  }\n]'} Error: AnatomyFormattingLoader [anatomy]: Primary schema validation failed for 'default.json' using schema 'schema://living-narrative-engine/anatomy-formatting.schema.json'.
Details:
[
  {
    "instancePath": "",
    "schemaPath": "#/additionalProperties",
    "keyword": "additionalProperties",
    "params": {
      "additionalProperty": "equipmentIntegration"
    },
    "message": "must NOT have additional properties",
    "schema": false,
    "parentSchema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "$id": "schema://living-narrative-engine/anatomy-formatting.schema.json",
      "title": "Anatomy Formatting Schema",
      "description": "Defines formatting rules for anatomy descriptions including part order, pluralization, and descriptor formatting",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "$schema": {
          "type": "string",
          "description": "Optional. A URI reference to the schema for editor support."
        },
        "id": {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_]+$",
          "description": "Unique identifier for this formatting configuration"
        },
        "descriptionOrder": {
          "type": "array",
          "description": "Order in which body part types appear in descriptions",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "pairedParts": {
          "type": "array",
          "description": "Body part types that are paired (like eyes, arms, etc.) and should be grouped when they have the same descriptors",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        },
        "irregularPlurals": {
          "type": "object",
          "description": "Mapping of body part types to their irregular plural forms",
          "additionalProperties": {
            "type": "string",
            "minLength": 1
          }
        },
        "descriptorOrder": {
          "type": "array",
          "description": "Order in which descriptor component types appear in descriptions",
          "items": {
            "type": "string",
            "pattern": "^descriptors:[a-zA-Z0-9_]+$"
          },
          "uniqueItems": true
        },
        "descriptorValueKeys": {
          "type": "array",
          "description": "Keys to search for when extracting descriptor values from components",
          "items": {
            "type": "string",
            "minLength": 1
          },
          "uniqueItems": true
        }
      },
      "required": [
        "id"
      ]
    },
    "data": {
      "$schema": "../../../schemas/anatomy-formatting.schema.json",
      "id": "default",
      "descriptionOrder": [
        "build",
        "hair",
        "eye",
        "face",
        "ear",
        "nose",
        "mouth",
        "neck",
        "breast",
        "torso",
        "arm",
        "hand",
        "leg",
        "foot",
        "pubic_hair",
        "vagina",
        "penis",
        "testicle",
        "tail",
        "wing",
        "equipment"
      ],
      "pairedParts": [
        "eye",
        "ear",
        "arm",
        "leg",
        "hand",
        "foot",
        "breast",
        "wing",
        "testicle"
      ],
      "irregularPlurals": {
        "foot": "feet",
        "tooth": "teeth"
      },
      "descriptorOrder": [
        "descriptors:length_category",
        "descriptors:length_hair",
        "descriptors:size_category",
        "descriptors:size_specific",
        "descriptors:weight_feel",
        "descriptors:color_basic",
        "descriptors:color_extended",
        "descriptors:shape_general",
        "descriptors:shape_eye",
        "descriptors:hair_style",
        "descriptors:texture",
        "descriptors:firmness",
        "descriptors:build"
      ],
      "descriptorValueKeys": [
        "value",
        "color",
        "size",
        "shape",
        "length",
        "style",
        "texture",
        "firmness",
        "build",
        "weight"
      ],
      "equipmentIntegration": {
        "enabled": true,
        "prefix": "Wearing: ",
        "suffix": ".",
        "separator": ", ",
        "itemSeparator": " | ",
        "placement": "after_anatomy"
      }
    }
  }
]
    at validateAgainstSchema (schemaValidationUtils.js:97:11)
    at AnatomyFormattingLoader._validatePrimarySchema (baseManifestItemLoader.js:210:12)
    at AnatomyFormattingLoader.validatePrimarySchema (baseManifestItemLoader.js:408:12)
    at AnatomyFormattingLoader._processFileWrapper (baseManifestItemLoader.js:320:10)
    at async Promise.allSettled (index 0)
    at async AnatomyFormattingLoader._loadItemsInternal (baseManifestItemLoader.js:509:28)
    at async #runLoadersForMod (ModProcessor.js:164:15)
    at async ModProcessor.processMod (ModProcessor.js:80:52)
    at async ContentLoadManager.loadContentForPhase (ContentLoadManager.js:174:24)
    at async ContentLoadManager.loadContent (ContentLoadManager.js:81:7)
error @ consoleLogger.js:175
#runLoadersForMod @ ModProcessor.js:177
await in #runLoadersForMod
processMod @ ModProcessor.js:80
await in processMod
#executeModProcessing @ ContentLoadManager.js:222
processMod @ ContentLoadManager.js:212
loadContentForPhase @ ContentLoadManager.js:174
await in loadContentForPhase
loadContent @ ContentLoadManager.js:81
execute @ contentPhase.js:51
run @ ModsLoadSession.js:19
await in run
loadMods @ modsLoader.js:85
loadModsFromGameConfig @ modLoadingUtils.js:33
await in loadModsFromGameConfig
bootstrap @ CommonBootstrapper.js:91
await in bootstrap
initialize @ anatomy-visualizer.js:18Understand this error
consoleLogger.js:187 ModsLoader [anatomy, definitions]: Content loading loop took 60.20 ms.
consoleLogger.js:187 Mod 'anatomy' phase 'definitions' loaded in 60.20ms: anatomyBlueprintParts(1), anatomyBlueprints(2), anatomyFormatting(0 E:1), anatomyRecipes(3), anatomySlotLibraries(1), components(5), entityDefinitions(33), events(6) -> Overrides(0), Errors(1)
consoleLogger.js:187 --- Finished loading content for mod: anatomy, phase: definitions ---
consoleLogger.js:187 ContentLoadManager: Looking up manifest for modId 'clothing' (lowercase: 'clothing'), found: true
consoleLogger.js:187 ContentLoadManager: Processing mod clothing, manifest found: true
consoleLogger.js:187 --- Loading content for mod: clothing, phase: definitions ---
consoleLogger.js:187 ModsLoader [clothing, definitions]: Manifest retrieved successfully. Processing content types...
consoleLogger.js:187 ModsLoader [clothing, definitions]: Processing components content with 2 files...
consoleLogger.js:187 ModsLoader [clothing, definitions]: Found content for 'components'. Invoking loader 'ComponentLoader'.
consoleLogger.js:151 ComponentLoader: Loading components definitions for mod 'clothing'.
consoleLogger.js:187 Found 2 potential components files to process for mod clothing.
consoleLogger.js:187 [clothing] Resolved path for equipment.component.json: ./data/mods/clothing/components/equipment.component.json
consoleLogger.js:187 [clothing] Resolved path for wearable.component.json: ./data/mods/clothing/components/wearable.component.json
consoleLogger.js:187 [clothing] Fetched data from ./data/mods/clothing/components/equipment.component.json
consoleLogger.js:187 ComponentLoader [clothing]: Validating 'equipment.component.json' against primary schema 'schema://living-narrative-engine/component.schema.json'.
consoleLogger.js:187 ComponentLoader [clothing]: Processing fetched item: equipment.component.json (Type: components)
consoleLogger.js:187 AjvSchemaValidator: Successfully added schema 'clothing:equipment'.
consoleLogger.js:187 AjvSchemaValidator: Schema 'clothing:equipment' verified as retrievable.
consoleLogger.js:187 ComponentLoader [clothing]: Registered dataSchema for component ID 'clothing:equipment' from file 'equipment.component.json'.
consoleLogger.js:187 ComponentLoader [clothing]: Storing item in registry. Category: 'components', Qualified ID: 'clothing:equipment', Base ID: 'equipment', Filename: 'equipment.component.json'
consoleLogger.js:187 ComponentLoader [clothing]: Item 'clothing:equipment' (Base: 'equipment') stored successfully in category 'components'.
consoleLogger.js:187 ComponentLoader [clothing]: Successfully processed component definition from equipment.component.json. Returning final registry key: clothing:equipment, Overwrite: false
consoleLogger.js:187 [clothing] Successfully processed equipment.component.json. Result: ID=clothing:equipment, Overwrite=false
consoleLogger.js:187 [clothing] Fetched data from ./data/mods/clothing/components/wearable.component.json
consoleLogger.js:187 ComponentLoader [clothing]: Validating 'wearable.component.json' against primary schema 'schema://living-narrative-engine/component.schema.json'.
consoleLogger.js:187 ComponentLoader [clothing]: Processing fetched item: wearable.component.json (Type: components)