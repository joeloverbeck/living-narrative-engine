TurnContext for isekai:ninja_instance awaitingExternalEvent → false
consoleLogger.js:187 AwaitingExternalTurnEndState: Received destroy call. No state-specific cleanup by default in AbstractTurnState.
consoleLogger.js:187 ▶️  TurnManager.advanceTurn() initiating...
consoleLogger.js:187 ActorTurnHandler.destroy: Ensuring transition to TurnIdleState (current: AwaitingExternalTurnEndState).
consoleLogger.js:187 ActorTurnHandler: State Transition: AwaitingExternalTurnEndState → TurnIdleState
consoleLogger.js:187 ActorTurnHandler.onExitState hook: Exiting AwaitingExternalTurnEndState to TurnIdleState
turnManager.js:315 TurnManager.advanceTurn: nextActor = undefined
consoleLogger.js:187 Turn queue is empty. Preparing for new round or stopping.
consoleLogger.js:187 Attempting to start a new round.
consoleLogger.js:187 RoundManager.startRound() initiating...
roundManager.js:24 RoundManager.startRound: allEntities = 
(4) [{…}, {…}, {…}, {…}]
consoleLogger.js:187 Found 2 actors to start the round: isekai:hero_instance, isekai:ninja_instance
consoleLogger.js:187 TurnOrderService: Starting new round with strategy "round-robin".
consoleLogger.js:187 TurnOrderService: Cleared existing turn queue.
consoleLogger.js:187 TurnOrderService: Current round state cleared.
consoleLogger.js:187 TurnOrderService: Initialized SimpleRoundRobinQueue.
consoleLogger.js:187 TurnOrderService: Populated SimpleRoundRobinQueue with 2 entities.
consoleLogger.js:187 TurnOrderService: New round successfully started with 2 active entities.
consoleLogger.js:187 Successfully started a new round with 2 actors using the 'round-robin' strategy.
consoleLogger.js:187 VED: Event 'core:turn_processing_ended' dispatch successful.
consoleLogger.js:187 AwaitingExternalTurnEndState: Exiting. Actor: isekai:ninja_instance. Transitioning to TurnIdleState.
consoleLogger.js:187 New round started, recursively calling advanceTurn() to process the first turn.
consoleLogger.js:187 ▶️  TurnManager.advanceTurn() initiating...
consoleLogger.js:187 TurnOrderService: Advancing turn to entity "isekai:hero_instance".
consoleLogger.js:187 ActorTurnHandler.onEnterState hook: Entering TurnIdleState from AwaitingExternalTurnEndState
turnManager.js:315 TurnManager.advanceTurn: nextActor = isekai:hero_instance
consoleLogger.js:187 Queue not empty, processing next entity.
consoleLogger.js:187 >>> Starting turn initiation for Entity: isekai:hero_instance (player) <<<
consoleLogger.js:187 VED: Validating payload for event 'core:turn_started' against schema 'core:turn_started#payload'...
consoleLogger.js:187 VED: Payload validation SUCCEEDED for event 'core:turn_started'.
consoleLogger.js:187 VED: Dispatching event 'core:turn_started' via EventBus... 
{entityId: 'isekai:hero_instance', entityType: 'player', entity: Entity}
consoleLogger.js:187 [LocationRenderer] Received 'core:turn_started' event. Payload: 
{entityId: 'isekai:hero_instance', entityType: 'player', entity: Entity}
consoleLogger.js:187 [EntityDisplayDataProvider] getEntityLocationId: Found entity 'isekai:hero_instance' with type: Entity, has getComponentData: true
consoleLogger.js:187 [EntityDisplayDataProvider] getEntityLocationId: Position component for 'isekai:hero_instance': 
{locationId: 'isekai:town_instance'}
consoleLogger.js:187 [DEBUG] Retrieved entity isekai:town_instance: name="Isekai Town", exits count=1
consoleLogger.js:187 [DEBUG] First exit: direction="to the adventurers' guild", target="isekai:adventurers_guild_instance"
consoleLogger.js:187 [DEBUG] Retrieved entity isekai:town_instance: name="Isekai Town", exits count=1
consoleLogger.js:187 [DEBUG] First exit: direction="to the adventurers' guild", target="isekai:adventurers_guild_instance"
consoleLogger.js:187 [DEBUG] Retrieved entity isekai:town_instance: name="Isekai Town", exits count=1
consoleLogger.js:187 [DEBUG] First exit: direction="to the adventurers' guild", target="isekai:adventurers_guild_instance"
consoleLogger.js:187 [DEBUG] Retrieved entity isekai:town_instance: name="Isekai Town", exits count=1
consoleLogger.js:187 [DEBUG] First exit: direction="to the adventurers' guild", target="isekai:adventurers_guild_instance"
consoleLogger.js:187 [LocationDisplayService] getLocationPortraitData: Location entity 'isekai:town_instance' has no valid PORTRAIT_COMPONENT_ID data or imagePath.
consoleLogger.js:187 [LocationDataService] Found 0 other characters.
consoleLogger.js:187 [LocationRenderer] Rendering location: "Isekai Town".
consoleLogger.js:187 [renderPortraitElements] No portrait path for location. Hiding portrait elements.
consoleLogger.js:187 [LocationRenderer] Location "Isekai Town" display updated.
consoleLogger.js:187 [PerceptionLogRenderer] _handleTurnStartedForTest received 'core:turn_started' event. Payload: 
{entityId: 'isekai:hero_instance', entityType: 'player', entity: Entity}
consoleLogger.js:187 [PerceptionLogRenderer] Current actor ID set to: isekai:hero_instance
consoleLogger.js:187 [PerceptionLogRenderer] refreshList() called, invoking renderList().
consoleLogger.js:187 [PerceptionLogRenderer] renderList() called.
consoleLogger.js:187 [PerceptionLogRenderer] _getListItemsData called. Current actor ID: isekai:hero_instance
consoleLogger.js:187 [PerceptionLogRenderer] Successfully fetched 3 log entries for actor 'isekai:hero_instance'.
consoleLogger.js:187 [CurrentTurnActorRenderer] Handling core:turn_started for entityId: isekai:hero_instance
consoleLogger.js:187 [EntityDisplayDataProvider] getEntityPortraitPath: Constructed portrait path for 'isekai:hero_instance': /data/mods/isekai/portraits/hero.png
consoleLogger.js:187 [CurrentTurnActorRenderer] Setting portrait for Joel Overberus to /data/mods/isekai/portraits/hero.png
consoleLogger.js:187 [ProcessingIndicatorController] Turn started for human player.
consoleLogger.js:187 ScopeCache: Turn started, clearing cache
consoleLogger.js:187 SystemLogicInterpreter: Received event: core:turn_started. Found 1 potential rule(s). 
{payload: {…}}
consoleLogger.js:187 SystemLogicInterpreter: [Event: core:turn_started] Assembling execution context via createNestedExecutionContext... (ActorID: isekai:hero_instance, TargetID: null)
consoleLogger.js:187 SystemLogicInterpreter: createJsonLogicContext: Creating JsonLogicEvaluationContext for event type [core:turn_started]. ActorID: [isekai:hero_instance], TargetID: [None]
consoleLogger.js:187 SystemLogicInterpreter: createJsonLogicContext: Found actor entity [isekai:hero_instance]. Creating context entry.
consoleLogger.js:187 SystemLogicInterpreter: createJsonLogicContext: No targetId provided, target context remains null.
consoleLogger.js:187 SystemLogicInterpreter: [Event: core:turn_started] createNestedExecutionContext returned a valid ExecutionContext.
consoleLogger.js:187 SystemLogicInterpreter: [Event: core:turn_started] Final ExecutionContext (nested structure) assembled successfully.
consoleLogger.js:187 SystemLogicInterpreter: [Rule turn_started] No condition defined or condition is empty. Defaulting to passed.
consoleLogger.js:187 SystemLogicInterpreter: [Rule 'turn_started' - Action 1/1] About to execute operation of type: ADD_COMPONENT
consoleLogger.js:187 OperationInterpreter: Resolved full string placeholder {event.payload.entityId} to: isekai:hero_instance
consoleLogger.js:187 OperationInterpreter: Executing handler for operation type "ADD_COMPONENT"…
consoleLogger.js:187 VED: Validating payload for event 'core:component_added' against schema 'core:component_added#payload'...
consoleLogger.js:187 VED: Payload validation SUCCEEDED for event 'core:component_added'.
consoleLogger.js:187 VED: Dispatching event 'core:component_added' via EventBus... 
{entity: Entity, componentTypeId: 'core:current_actor', componentData: {…}, oldComponentData: undefined}
consoleLogger.js:187 Successfully added/updated component 'core:current_actor' data on entity 'isekai:hero_instance'.
consoleLogger.js:187 SystemLogicInterpreter: ADD_COMPONENT: Successfully added/replaced component "core:current_actor" on entity "isekai:hero_instance".
consoleLogger.js:187 SystemLogicInterpreter: [Rule 'turn_started' - Action 1/1] Finished executing operation of type: ADD_COMPONENT
consoleLogger.js:187 [renderListCommon] Fetched list data. Count: 3
consoleLogger.js:187 [renderListCommon] Cleared list container.
consoleLogger.js:187 [renderListCommon] Rendered 3 out of 3 items.
consoleLogger.js:187 TurnIdleState: Entered. Actor: isekai:ninja_instance. Previous state: AwaitingExternalTurnEndState.
consoleLogger.js:187 [PerceptionLogRenderer] _onListRendered called. Scrolling to bottom.
consoleLogger.js:187 TurnIdleState: Ensuring clean state by calling handler.resetStateAndResources().
consoleLogger.js:187 ActorTurnHandler._resetTurnStateAndResources specific cleanup for 'enterState-TurnIdleState'.
consoleLogger.js:187 ActorTurnHandler._resetTurnStateAndResources (context: 'enterState-TurnIdleState'). Context actor: isekai:ninja_instance. Handler actor: isekai:ninja_instance.
consoleLogger.js:187 ActorTurnHandler._resetTurnStateAndResources: Cancelling active prompt in current TurnContext before clearing it.
consoleLogger.js:187 ActorTurnHandler: Clearing current TurnContext (was for actor isekai:ninja_instance).
consoleLogger.js:187 ActorTurnHandler._setCurrentTurnContextInternal: Setting turn context to null.
consoleLogger.js:187 ActorTurnHandler: Clearing current handler actor (was isekai:ninja_instance).
consoleLogger.js:187 ActorTurnHandler._setCurrentActorInternal: Setting current actor to null.
consoleLogger.js:187 ActorTurnHandler: Base per-turn state reset complete for 'enterState-TurnIdleState'. Subclasses may perform additional cleanup.
consoleLogger.js:187 ActorTurnHandler: Actor-specific state reset complete for 'enterState-TurnIdleState'.
consoleLogger.js:187 TurnIdleState: Entry complete. Handler is now idle.
consoleLogger.js:187 VED: Event 'core:component_added' dispatch successful.
consoleLogger.js:187 VED: Event 'core:turn_started' dispatch successful.
consoleLogger.js:187 ActorTurnHandler.destroy: Calling _resetTurnStateAndResources.
consoleLogger.js:187 ActorTurnHandler._resetTurnStateAndResources specific cleanup for 'destroy-ActorTurnHandler'.
consoleLogger.js:187 ActorTurnHandler._resetTurnStateAndResources (context: 'destroy-ActorTurnHandler'). Context actor: None. Handler actor: None.
consoleLogger.js:187 ActorTurnHandler: Base per-turn state reset complete for 'destroy-ActorTurnHandler'. Subclasses may perform additional cleanup.
consoleLogger.js:187 ActorTurnHandler: Actor-specific state reset complete for 'destroy-ActorTurnHandler'.
consoleLogger.js:187 ActorTurnHandler.destroy() complete. Final state: TurnIdleState
consoleLogger.js:187 SafeEventDispatcher: Successfully dispatched event 'core:component_added'.
consoleLogger.js:187 ActorTurnHandler.destroy() cleanup complete.
consoleLogger.js:187 VED: Validating payload for event 'core:turn_processing_started' against schema 'core:turn_processing_started#payload'...
consoleLogger.js:187 VED: Payload validation SUCCEEDED for event 'core:turn_processing_started'.
consoleLogger.js:187 VED: Dispatching event 'core:turn_processing_started' via EventBus... 
{entityId: 'isekai:hero_instance', actorType: 'player'}
consoleLogger.js:187 VED: Event 'core:turn_processing_started' dispatch successful.
consoleLogger.js:187 Resolving turn handler for entity isekai:hero_instance...
consoleLogger.js:187 TurnHandlerResolver: Resolving handler for actor isekai:hero_instance...
consoleLogger.js:187 Match found for actor isekai:hero_instance. Applying rule: 'Player'.
consoleLogger.js:187 TurnHandlerResolver: Creating new PlayerHandler for actor isekai:hero_instance.
consoleLogger.js:187 ActorTurnHandler initial state set to: TurnIdleState. EnterState will be called on first transition or explicit start.
﻿