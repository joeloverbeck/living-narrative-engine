 FAIL   performance  tests/performance/build.performance.test.js (22.67 s)
  ● Build System Performance › Build Speed Benchmarks › should complete development build within reasonable time

    Command failed: npm run build:dev

      32 |         const startTime = Date.now();
      33 |
    > 34 |         execSync('npm run build:dev', { stdio: 'ignore' });
         |                 ^
      35 |
      36 |         const buildTime = Date.now() - startTime;
      37 |

      at Object.<anonymous> (tests/performance/build.performance.test.js:34:17)

  ● Build System Performance › Build Speed Benchmarks › should complete production build within reasonable time

    Command failed: npm run build:prod

      47 |         const startTime = Date.now();
      48 |
    > 49 |         execSync('npm run build:prod', { stdio: 'ignore' });
         |                 ^
      50 |
      51 |         const buildTime = Date.now() - startTime;
      52 |

      at Object.<anonymous> (tests/performance/build.performance.test.js:49:17)

  ● Build System Performance › Build Speed Benchmarks › should show performance improvement compared to legacy build

    Command failed: npm run build:dev

      62 |         // Measure new build time
      63 |         const startTime = Date.now();
    > 64 |         execSync('npm run build:dev', { stdio: 'ignore' });
         |                 ^
      65 |         const newBuildTime = Date.now() - startTime;
      66 |
      67 |         // According to the implementation, original build was ~10 seconds

      at Object.<anonymous> (tests/performance/build.performance.test.js:64:17)

  ● Build System Performance › Parallel vs Sequential Performance › should demonstrate parallel build performance advantage

    Command failed: npm run build:dev

      83 |         // Test parallel build (default)
      84 |         const parallelStart = Date.now();
    > 85 |         execSync('npm run build:dev', { stdio: 'ignore' });
         |                 ^
      86 |         const parallelTime = Date.now() - parallelStart;
      87 |
      88 |         // Clean for sequential test using fs-extra for proper async handling

      at Object.<anonymous> (tests/performance/build.performance.test.js:85:17)

  ● Build System Performance › Build Efficiency Metrics › should maintain efficient bundle sizes

    Command failed: npm run build:prod

      110 |       'should maintain efficient bundle sizes',
      111 |       async () => {
    > 112 |         execSync('npm run build:prod', { stdio: 'ignore' });
          |                 ^
      113 |
      114 |         const expectedBundles = [
      115 |           'bundle.js',

      at Object.<anonymous> (tests/performance/build.performance.test.js:112:17)

  ● Build System Performance › Resource Usage Efficiency › should complete build without excessive memory usage

    Command failed: npm run build:dev

      147 |         const initialMemory = process.memoryUsage();
      148 |
    > 149 |         execSync('npm run build:dev', { stdio: 'ignore' });
          |                 ^
      150 |
      151 |         const finalMemory = process.memoryUsage();
      152 |         const memoryIncrease = finalMemory.heapUsed - initialMemory.heapUsed;

      at Object.<anonymous> (tests/performance/build.performance.test.js:149:17)