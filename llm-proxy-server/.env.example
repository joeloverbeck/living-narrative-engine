# .env.example for llm-proxy-server

# --- Core Proxy Configuration ---
# Port for the proxy server to listen on
PROXY_PORT=3001

# MODIFICATION START (Ticket 1.5.8)
# --- Security & CORS ---
# Define allowed origins for Cross-Origin Resource Sharing (CORS)
# This should be the origin where the main game application (served by http-server) is running.
# Example: http://localhost:8080
# For multiple origins, use a comma-separated list: PROXY_ALLOWED_ORIGIN=http://localhost:8080,[http://127.0.0.1:8080](http://127.0.0.1:8080)
# For development, you might use a specific port; for production, this would be your game's domain.
PROXY_ALLOWED_ORIGIN=http://localhost:8080
# MODIFICATION END (Ticket 1.5.8)

# --- API Key Management ---
# This section is crucial. The proxy will retrieve the *actual* API keys from its own environment.
# The client-side ILLMAdapter will send an *identifier* (either an environment variable NAME or a FILENAME)
# to the proxy. The proxy then uses this identifier to look up the actual key.

# == Option 1: API Keys sourced from Environment Variables by the Proxy ==
# If the client sends an `apiKeyEnvVar` identifier, the proxy will look for an environment variable
# on the *proxy server itself* with that name to get the actual key.
# Example: If client sends `apiKeyEnvVar: "MY_OPENROUTER_KEY"`, the proxy needs `MY_OPENROUTER_KEY` in its .env
# For demonstration, list placeholder *names* of environment variables that the proxy might expect to find *itself*.
# These ARE NOT the keys themselves, but the NAMES of the variables that WILL hold the keys on the proxy server.
OPENROUTER_API_KEY_ENV_VAR_PLACEHOLDER="YOUR_ACTUAL_OPENROUTER_API_KEY_HERE"
ANTHROPIC_API_KEY_ENV_VAR_PLACEHOLDER="YOUR_ACTUAL_ANTHROPIC_API_KEY_HERE"
OPENAI_API_KEY_ENV_VAR_PLACEHOLDER="YOUR_ACTUAL_OPENAI_API_KEY_HERE"
# Add more for other providers as needed...

# == Option 2: API Keys sourced from Files by the Proxy (if supported by proxy logic) ==
# If the client sends an `apiKeyFileName` identifier, the proxy will attempt to read the key from a file.
# This requires the proxy to have access to a secure directory containing these key files.
# This path should be an ABSOLUTE path on the server where the proxy is running.
# Note: The ConfigurableLLMAdapter's apiKeyFileRetriever.js already expects projectRootPath.
# The proxy will need a similar mechanism if it's to read files based on names sent from client.
# This variable defines the root directory on the PROXY SERVER where API key files are stored.
# The actual file name (e.g., "openrouter_key.txt") would be passed from the client adapter's config.
PROXY_PROJECT_ROOT_PATH_FOR_API_KEY_FILES="/path/to/secure/api_key_files_on_server"


# --- Logging ---
# LOG_LEVEL=info

# --- Other configurations ---
# Add any other proxy-specific configurations here.
# Example: Timeout for requests to external LLM APIs
# LLM_REQUEST_TIMEOUT_MS=30000

# Path to the llm-configs.json file for the proxy.
# Relative to the proxy server's execution directory (server.js location) or an absolute path.
# LLM_CONFIG_PATH=./llm-configs.json