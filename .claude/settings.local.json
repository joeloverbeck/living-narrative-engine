{
  "permissions": {
    "allow": [
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --testNamePattern=\"should end drag on mouseup\" --no-coverage --verbose --runInBand)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --no-coverage --verbose --testNamePattern=\"should end drag on mouseup\")",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/logFilter.test.js tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotifierEnhancedFeatures.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/circuitBreaker.test.js)",
      "Bash(NODE_OPTIONS='--max-old-space-size=4096' npx jest --config jest.config.unit.js --env=jsdom --testNamePattern=\"should classify \"\"Failed to fetch\"\" as non-retriable\" tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js)",
      "Bash(NODE_ENV=test npm run test:unit -- --testPathPattern=\"logging\" --silent)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/hybridLogger.test.js)",
      "Bash(NODE_ENV=test npm run test:unit -- --testPathPatterns=\"logging\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should classify\")",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/circuitBreaker.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should classify\" --silent=false)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should properly differentiate\")",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/hybridLogger.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --testNamePattern=\"should handle.*gracefully\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit -- tests/unit/logging/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should not schedule multiple timers\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --testNamePattern=\"should respect enabled flag for console|should continue remote logging when console logging fails\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle network failures with retry configuration|should handle circuit breaker functionality|should clean up resources on destroy|should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --testNamePattern=\"Console Output\")",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --testNamePattern=\"should output warnings to console when enabled|should output errors to console when enabled|should output both warnings and errors to console|should handle console logging configuration\")",
      "Bash(NODE_ENV=test npx jest debug-remotelogger-test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest debug-remotelogger.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle network failures with retry configuration|should handle circuit breaker functionality|should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/circuitBreaker.performance.test.js --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/logging/circuitBreaker.performance.test.js)",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/logging/ --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/modTestHandlerFactory.validation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/categoryPatternValidation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/infrastructure/modTestHandlerFactory.validation.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/migrationWorkflow.test.js --no-coverage --verbose)",
      "Bash(npm run test:e2e:*)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkFailure.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- --testPathPattern=\"infrastructure\" --passWithNoTests)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/infrastructure/ --silent)",
      "Bash(npm run test:performance:*)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle burst logging with enhanced features\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle burst logging with enhanced features\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/sensitiveDataFiltering.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration tests/integration/logging/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --verbose --testNamePattern=\"should use larger batches during high-volume logging\")",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --verbose --testNamePattern=\"priority buffering behavior\")",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/debug-dynamic-batching.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"should send logs in priority order when priority buffering is enabled\")",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"priority buffering behavior\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"should send logs in FIFO order when priority buffering is disabled\" --verbose)"
    ],
    "deny": [],
    "ask": []
  }
}