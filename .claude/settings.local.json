{
  "permissions": {
    "allow": [
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --testNamePattern=\"should end drag on mouseup\" --no-coverage --verbose --runInBand)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/dragHandler.test.js --no-coverage --verbose --testNamePattern=\"should end drag on mouseup\")",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/logFilter.test.js tests/unit/logging/keyboardShortcutsManager.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotifierEnhancedFeatures.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/circuitBreaker.test.js)",
      "Bash(NODE_OPTIONS='--max-old-space-size=4096' npx jest --config jest.config.unit.js --env=jsdom --testNamePattern=\"should classify \"\"Failed to fetch\"\" as non-retriable\" tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js)",
      "Bash(NODE_ENV=test npm run test:unit -- --testPathPattern=\"logging\" --silent)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/hybridLogger.test.js)",
      "Bash(NODE_ENV=test npm run test:unit -- --testPathPatterns=\"logging\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should classify\")",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/circuitBreaker.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should classify\" --silent=false)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose -t \"should properly differentiate\")",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/hybridLogger.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --testNamePattern=\"should handle.*gracefully\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit -- tests/unit/logging/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should not schedule multiple timers\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --testNamePattern=\"should respect enabled flag for console|should continue remote logging when console logging fails\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle network failures with retry configuration|should handle circuit breaker functionality|should clean up resources on destroy|should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --testNamePattern=\"Console Output\")",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --testNamePattern=\"should output warnings to console when enabled|should output errors to console when enabled|should output both warnings and errors to console|should handle console logging configuration\")",
      "Bash(NODE_ENV=test npx jest debug-remotelogger-test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest debug-remotelogger.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle network failures with retry configuration|should handle circuit breaker functionality|should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/circuitBreaker.performance.test.js --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should handle unloading scenarios\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/logging/circuitBreaker.performance.test.js)",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/logging/ --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/modTestHandlerFactory.validation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/categoryPatternValidation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/infrastructure/modTestHandlerFactory.validation.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/migrationWorkflow.test.js --no-coverage --verbose)",
      "Bash(npm run test:e2e:*)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkFailure.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- --testPathPattern=\"infrastructure\" --passWithNoTests)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/infrastructure/ --silent)",
      "Bash(npm run test:performance:*)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle burst logging with enhanced features\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle burst logging with enhanced features\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/sensitiveDataFiltering.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration tests/integration/logging/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --verbose --testNamePattern=\"should use larger batches during high-volume logging\")",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --verbose --testNamePattern=\"priority buffering behavior\")",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/debug-dynamic-batching.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"should send logs in priority order when priority buffering is enabled\")",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"priority buffering behavior\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --testNamePattern=\"should send logs in FIFO order when priority buffering is disabled\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/common/mods/ModTestFixtureAutoLoading.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit)",
      "Bash(npm run test:unit:*)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(npm run test:memory:*)",
      "Bash(export NODE_ENV=test)",
      "Bash(npx jest:*)",
      "Bash(chmod:*)",
      "Bash(node:*)",
      "Bash(npm run test:integration:*)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/infrastructure/categoryPatternValidation.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/hybridLogger.integration.test.js --no-coverage --testNamePattern=\"should handle real category detection\")",
      "Bash(NODE_ENV=test npx jest tests/integration/infrastructure/categoryPatternValidation.test.js --testNamePattern=\"should validate positioning category file naming patterns\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- --testNamePattern=\"should handle category detection with cache efficiently\")",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle category detection with cache efficiently\" --no-coverage)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/hybridLogger.integration.test.js --no-coverage)",
      "Bash(npx eslint:*)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/notifierUIInteraction.integration.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --testNamePattern=\"should use larger batches during high-volume\")",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.performance.test.js --testNamePattern=\"should fail fast when circuit breaker is open\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.performance.test.js --testNamePattern=\"should fail fast when circuit breaker is open\" --no-coverage --silent --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/anatomy/bodyDescriptionComposer.performance.test.js)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.performance.test.js --testNamePattern=\"should fail fast when circuit breaker is open\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.integration.performance.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/hybridLogger.performance.test.js --testNamePattern=\"should scale buffer operations linearly with size\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/hybridLogger.performance.test.js --testNamePattern=\"should maintain performance with high buffer utilization\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit -- tests/unit/logging/hybridLogger.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --testNamePattern=\"should maintain buffer size limit\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/hybridLogger.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/hybridLogger.performance.test.js --passWithNoTests)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/logMetadataEnricherSourceCategory.performance.test.js)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --testNamePattern=\"demonstrates why dynamic batching cannot work with current implementation\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLoggerPayloadSizeExceeded.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/logMetadataEnricherSourceCategory.integration.test.js --silent)",
      "Bash(NODE_ENV=test npm run test:performance)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/ --testTimeout=10000)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLoggerPayloadSizeExceeded.test.js --testNamePattern=\"should reproduce HTTP 413 error when batch payload exceeds server limit\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --testNamePattern=\"verifies that dynamic batching works correctly during high-volume logging\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --testNamePattern=\"verifies that dynamic batching works correctly\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --testNamePattern=\"should detect enhanced categories with priority rules\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --verbose --testNamePattern=\"should detect enhanced categories with priority rules\")",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/logMetadataEnricher.performance.test.js --testNamePattern=\"should maintain efficient memory usage during high volume enrichment\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --testNamePattern=\"should detect enhanced categories with priority rules\" --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/logMetadataEnricher.performance.test.js --testNamePattern=\"should not exhibit memory leaks during repeated enrichment\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/logMetadataEnricher.performance.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/logMetadataEnricher.performance.test.js --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/nodes/scopeReferenceResolver.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopeDsl/scopeReferenceResolverErrorHandler.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/logCategoryDetector.performance.test.js --testNamePattern=\"should achieve\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit -- tests/unit/scopeDsl/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/logCategoryDetector.performance.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/logging/logCategoryDetector.memory.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/nodes/scopeReferenceResolver.test.js tests/integration/scopeDsl/scopeReferenceResolverErrorHandler.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/logExporter.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest --config jest.config.unit.js --env=jsdom tests/unit/logging/logExporter.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest --config jest.config.unit.js --env=jsdom tests/unit/logging/criticalLogNotifier.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest --config jest.config.integration.js --env=jsdom tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest --config jest.config.unit.js --env=jsdom tests/unit/logging/logExporter.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest --config jest.config.integration.js --env=jsdom tests/integration/logging/criticalLogNotification.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionAwareStructuredTrace.performance.test.js --testNamePattern=\"should handle concurrent access without performance degradation\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"should compress payloads when enabled and above threshold\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"Compression\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration tests/integration/logging/compressionBehavior.integration.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/compressionBehavior.integration.test.js --testNamePattern=\"should compress large payloads\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLogger.test.js --testNamePattern=\"Compression\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/nodes/arrayIteration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/nodes/arrayIteration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/engine.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/engine.test.js --testNamePattern=\"edge\\[\\] with non-array field returns empty set\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/logging/remoteLoggerNetworkErrorClassification.test.js)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/logger-compatibility.test.js --testNamePattern=\"should batch logs correctly\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js --testNamePattern=\"should open circuit after repeated failures\" --no-coverage)",
      "Bash(NODE_ENV=test npm run test:integration)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/compressionBehavior.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/dynamicBatchingStrategy.integration.test.js --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --testNamePattern=\"verifies that dynamic batching works correctly\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/dynamicBatchingStrategy.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:integration -- --testPathPattern=\"logging\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/logging/remoteLogger.integration.test.js --testNamePattern=\"should send logs in priority order when priority buffering is enabled\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/remoteLogger.performance.test.js --testNamePattern=\"should fail fast when circuit breaker is open\" --no-coverage --verbose --silent=false)",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/circuitBreaker.test.js --testNamePattern=\"should track failure count correctly\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/remoteLogger.integration.performance.test.js)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/remoteLogger.integration.performance.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest debug-fix-test.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest debug-buffer-test.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/common/mods/ModTestHandlerFactory.performance.test.js --testNamePattern=\"should create minimal handlers faster than standard handlers\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/common/mods/ModTestHandlerFactory.performance.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest debug-proper-test.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance -- tests/performance/logging/remoteLogger.integration.performance.test.js --testNamePattern=\"should handle burst logging with enhanced features\")",
      "mcp__serena__read_file",
      "mcp__serena__activate_project",
      "mcp__serena__find_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__create_text_file",
      "mcp__serena__execute_shell_command",
      "mcp__serena__replace_regex",
      "Bash(NODE_ENV=test npm run test:integration -- tests/integration/logging/remoteLogger.integration.test.js --testNamePattern=\"should send logs in FIFO order when priority buffering is disabled\" --silent)",
      "Bash(NODE_ENV=test node debug-logger-strategy.test.js)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/ --no-coverage --verbose)",
      "mcp__serena__list_dir",
      "mcp__serena__replace_symbol_body",
      "Bash(NODE_ENV=test npx jest tests/unit/logging/criticalLogNotifier.test.js --no-coverage --verbose)",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__find_symbol",
      "Bash(grep:*)",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__write_memory",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__read_memory",
      "Bash(NODE_ENV=test npx jest tests/unit/validation/ajvSchemaCacheIssue.test.js --no-coverage --verbose)",
      "mcp__morphllm-fast-apply__read_file",
      "mcp__morphllm-fast-apply__read_multiple_files",
      "mcp__serena__prepare_for_new_conversation",
      "mcp__serena__switch_modes",
      "Bash(find:*)",
      "Bash(NODE_ENV=test npx jest tests/integration/mods/positioning/turnAroundKneelInteraction.integration.test.js --testNamePattern=\"should correctly handle multiple actors with mixed facing states\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/mods/positioning/turnAroundKneelInteraction.integration.test.js --testNamePattern=\"should correctly handle multiple actors with mixed facing states\" --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/mods/positioning/turnAroundKneelInteraction.integration.test.js --no-coverage --runInBand)"
    ],
    "deny": [],
    "ask": []
  }
}