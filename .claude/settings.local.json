{
  "permissions": {
    "allow": [
      "Bash(source:*)",
      "Bash(find:*)",
      "Bash(tree:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint)",
      "Bash(npm run lint:*)",
      "Bash(grep:*)",
      "Bash(npm run test:*)",
      "Bash(npx jest:*)",
      "Bash(./node_modules/.bin/eslint src/logic/operationHandlers/modifyContextArrayHandler.js)",
      "Bash(npm run format:*)",
      "Bash(rg:*)",
      "Bash(mkdir:*)",
      "Bash(sed:*)",
      "Bash(npx dependency-cruiser:*)",
      "Bash(npx madge:*)",
      "Bash(npx eslint:*)",
      "Bash(mv:*)",
      "Bash(npm run build:*)",
      "Bash(ls:*)",
      "Bash(timeout 30 npm test:*)",
      "Bash(npm run update-manifest:*)",
      "Bash(npx prettier:*)",
      "Bash(touch:*)",
      "Bash(awk:*)",
      "Bash(cp:*)",
      "WebFetch(domain:json-logic.io)",
      "Bash(./node_modules/.bin/jest tests/integration/logic/jsonLogicCustomOperators.debug.test.js --no-coverage --verbose)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(test:*)",
      "Bash(cat:*)",
      "Bash(npx:*)",
      "Bash(echo:*)",
      "Bash(npm search:*)",
      "WebFetch(domain:github.com)",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(NODE_ENV=test npx jest tests/integration/actions/followActionDebugTest.test.js --no-coverage)",
      "Bash(for file in ./data/mods/core/scopes/potential_leaders.scope ./data/mods/core/scopes/environment.scope ./data/mods/core/scopes/actors_in_location.scope)",
      "Bash(do echo \"=== $file ===\")",
      "Bash(done)",
      "Bash(npm run typecheck:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__ide__getDiagnostics",
      "Bash(jest:*)",
      "Bash(NODE_OPTIONS=\"--max-old-space-size=8192\" npm test -- tests/unit/turns/turnManager.anatomy.test.js --no-coverage)",
      "Bash(jq:*)",
      "Bash(NODE_ENV=test npx jest tests/unit/anatomy/anatomyCacheManager.test.js --no-coverage --verbose)",
      "Bash(eslint:*)",
      "Bash(./node_modules/.bin/jest:*)",
      "Bash(npm run scope:lint)",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_console_messages",
      "Bash(rm:*)",
      "mcp__puppeteer__puppeteer_navigate",
      "mcp__puppeteer__puppeteer_screenshot",
      "mcp__puppeteer__puppeteer_click",
      "mcp__puppeteer__puppeteer_fill",
      "Bash(for file in kiss_cheek kiss_neck_sensually lean_in_for_deep_kiss lick_lips nibble_earlobe_playfully nuzzle_face_into_neck suck_on_neck_to_leave_hickey)",
      "Bash(for file in kiss_cheek kiss_neck_sensually lick_lips nibble_earlobe_playfully nuzzle_face_into_neck suck_on_neck_to_leave_hickey)",
      "Bash(for:*)",
      "Bash(do grep -q '\"\"\"\"targets\"\"\"\":' \"$file\")",
      "Bash(do grep -q '\"\"\"\"targets\"\"\"\"' \"$file\")",
      "Bash(basename:*)",
      "Bash(do echo \"Run $i:\")",
      "Bash(git log:*)",
      "Bash(python3:*)",
      "mcp__serena__activate_project",
      "mcp__serena__list_dir",
      "mcp__serena__read_file",
      "mcp__serena__search_for_pattern",
      "mcp__serena__find_file",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__create_text_file",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "Bash(npm run:*)",
      "mcp__serena__prepare_for_new_conversation",
      "Bash(dmesg:*)",
      "mcp__serena__replace_regex",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/pumpPenisActionDiscovery.integration.test.js --no-coverage --verbose)",
      "Bash(node:*)",
      "mcp__serena__execute_shell_command",
      "mcp__serena__write_memory",
      "mcp__serena__insert_before_symbol",
      "Bash(time npm run test:unit tests/unit/characterBuilder/services/TraitsGenerator.test.js)",
      "Bash(do echo \"=== Run $i ===\")",
      "Bash(NODE_ENV=test timeout 30 npx jest tests/performance/actions/tracing/pipelineTracing.performance.test.js --config jest.config.performance.js --env=jsdom --testNamePattern=\"should have minimal tracing overhead under 5% baseline\" --silent)",
      "Bash(http-server:*)",
      "mcp__serena__replace_regex",
      "Bash(curl:*)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/traitsGeneratorConceptHandling.integration.test.js --no-coverage --verbose)",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_close",
      "mcp__morphllm-fast-apply__write_file",
      "mcp__playwright__browser_hover",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/loadTesting.test.js --testNamePattern=\"should handle memory pressure during extended operation\" --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/pipelineTracing.performance.test.js --testNamePattern=\"should not degrade under high concurrency\" --no-coverage)",
      "Bash(export NODE_ENV=test)",
      "Bash(chmod:*)",
      "Bash(NODE_ENV=test npx jest tests/e2e/positioning/movementLockDebug.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/positioning/movementLockDebug.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/domUI/visualizer/errorRecovery.performance.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/domUI/visualizer/errorRecovery.performance.test.js --no-coverage --testNamePattern=\"should handle default configuration\")",
      "Bash(NODE_ENV=test npx jest tests/performance/domUI/visualizer/errorRecovery.performance.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsSchemaValidation.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/positioning/movementLockFlow.test.js --testNamePattern=\"should complete full kneel-stand-move cycle for legacy entity\" --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsSchemaValidation.integration.test.js --no-coverage --verbose -t \"should validate circumstances format correctly\")",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsSchemaValidation.integration.test.js --no-coverage -t \"should validate circumstances format correctly\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage -t \"should handle processing errors gracefully\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage -t \"should filter errors to pattern-specific ones\")",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/hybridLogger.performance.test.js --testNamePattern=\"should maintain performance with real category detection\" --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorSchemaValidation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorEventDefinition.test.js --no-coverage --verbose)",
      "mcp__morphllm-fast-apply__list_directory",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsGeneratorUIStateIssues.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorSchemaValidation.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorSchemaValidation.test.js --no-coverage --testNamePattern=\"should accept valid character definition with nested\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --testNamePattern=\"should verify mock helper has 3 patterns\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --testNamePattern=\"should generate patterns for valid character\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --testNamePattern=\"should handle LLM strategy factory errors\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --testNamePattern=\"should handle.*errors\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --passWithNoTests=false)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorSchemaValidation.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-cache --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorSchemaValidation.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/controllers/SpeechPatternsGeneratorController.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsDisplayEnhancer.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsGeneratorRuntimeErrors.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/characterBuilder/ --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorEventDispatchFix.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsSchemaValidationFix.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionTraceFilter.performance.test.js --testNamePattern=\"should update inclusion config quickly\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsGenerator.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/speechPatternsGeneratorRuntimeErrors.integration.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionTraceFilter.performance.test.js --testNamePattern=\"Configuration Updates Performance\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorEventDispatchFix.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:unit tests/unit/characterBuilder/ --silent)",
      "Bash(NODE_ENV=test npx jest tests/e2e/llm-adapter/LLMErrorHandlingScenarios.e2e.test.js --verbose)",
      "Bash(timeout 60 npx jest tests/e2e/llm-adapter/LLMErrorHandlingScenarios.e2e.test.js --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/eventDefinitionWarnings.integration.test.js --no-coverage --testNamePattern=\"should find all CHARACTER_BUILDER_EVENTS\")",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/eventDefinitionWarnings.integration.test.js --no-coverage --verbose --testNamePattern=\"should find all CHARACTER_BUILDER_EVENTS\")",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/PerformanceScalability.e2e.test.js --testNamePattern=\"should handle resolution with 10000\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/llm-adapter/LLMErrorHandlingScenarios.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:e2e tests/e2e/llm-adapter/LLMErrorHandlingScenarios.e2e.test.js)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/PerformanceScalability.e2e.test.js --testNamePattern=\"should handle resolution with 10000\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/services/SpeechPatternsDisplayEnhancer.test.js tests/unit/characterBuilder/services/SpeechPatternsDisplayEnhancerAdvancedExports.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/UnionOperatorWorkflows.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/UnionOperatorWorkflows.e2e.test.js --no-coverage --verbose --testNamePattern=\"should resolve \\| operator unions identically to \\+\")",
      "Bash(NODE_ENV=test npx jest tests/unit/actions/followActionTargetResolutionFix.test.js --no-coverage --verbose --testNamePattern=\"should validate actor entity in createEvaluationContext\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/UnionOperatorWorkflows.e2e.test.js --no-coverage --verbose --testNamePattern=\"should resolve \\+ operator unions correctly\")",
      "Bash(env NODE_ENV=test npx jest:*)",
      "Bash(NODE_ENV=test npx jest tests/unit/actions/followActionTargetResolutionFix.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/scopeDsl/ --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ClothingResolutionWorkflows.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ClothingResolutionWorkflows.e2e.test.js --no-coverage --verbose --testNamePattern=\"should resolve topmost_clothing items\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ComplexFilterExpressions.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ComplexFilterExpressions.e2e.test.js --no-coverage --verbose --testNamePattern=\"should handle complex nested AND/OR conditions\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/CoreScopeResolution.e2e.test.js --no-coverage --verbose --testNamePattern=\"should filter entities with JSON Logic conditions\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ComplexFilterExpressions.e2e.test.js --no-coverage --verbose --testNamePattern=\"Deeply Nested Conditions\")",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js --config jest.config.performance.js --testNamePattern=\"should handle complex filters on 1000\\+ entities within 200ms target\")",
      "Bash(NODE_ENV=test npm run test:e2e tests/e2e/scopeDsl/ComplexFilterExpressions.e2e.test.js)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ComplexFilterExpressions.e2e.test.js --testNamePattern=\"should filter array elements correctly\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest debug-test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should continue validation even if schema validation fails\")",
      "Bash(NODE_ENV=test npx jest debug-test.js --no-coverage --verbose --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest debug-test.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should initialize with required dependencies\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should handle schema validator errors gracefully\")",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js --testNamePattern=\"should handle complex filters on 1000+ entities within 200ms target\" --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should cache validation results\")",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/enhancedValidationPipeline.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:integration)",
      "Bash(NODE_ENV=test npx jest tests/integration/characterBuilder/enhancedValidationPipeline.integration.test.js --no-coverage --verbose --testNamePattern=\"should display categorized validation feedback\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should handle invalid input gracefully|should handle schema validator errors gracefully\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should continue validation even if schema validation fails|should cache validation results\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:performance tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should score high for complete character definitions\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --verbose --testNamePattern=\"should provide quality-based suggestions for low scores\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/EnhancedSpeechPatternsValidator.test.js --no-coverage --silent --testNamePattern=\"should provide quality-based suggestions for low scores\")",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js --testNamePattern=\"should maintain performance consistency under concurrent load\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js --testNamePattern=\"should maintain performance consistency under concurrent load\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npm run test:integration tests/integration/clothing/unequipClothingAction.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionAwareStructuredTrace.performance.test.js --testNamePattern=\"should handle concurrent access without performance degradation\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionAwareStructuredTrace.performance.test.js --testNamePattern=\"should handle concurrent access without performance degradation\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/clothing/unequipClothingAction.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/actionCategorization/completeWorkflow.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/actionAwareStructuredTrace.performance.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/ComplexFilterExpressions.performance.test.js --testNamePattern=\"should handle complex filters on 10000\" --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/positioning/furnitureSitting.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/characterBuilder/clicheErrorHandler.performance.test.js --testNamePattern=\"should demonstrate throttled cleanup behavior prevents O\\(n\\) performance degradation\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/positioning/furnitureSitting.integration.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest --config jest.config.performance.js --env=jsdom --silent tests/performance/characterBuilder/clicheErrorHandler.performance.test.js)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/MultiModScopeInteractions.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/MultiModScopeInteractions.e2e.test.js --testNamePattern=\"should handle scopes referencing components from dependency mods\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/MultiModScopeInteractions.e2e.test.js --no-coverage --verbose --testNamePattern=\"should handle scopes referencing components from dependency mods\")",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/loadTesting.test.js --testNamePattern=\"should maintain performance under sustained load\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/loadTesting.test.js --testNamePattern=\"should maintain performance under sustained load\" --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/positioning/furnitureSitting.integration.test.js --no-coverage --verbose -t \"should prevent sitting while kneeling\")",
      "Bash(NODE_ENV=test npx jest tests/performance/actions/tracing/pipelineTracing.performance.test.js --testNamePattern=\"should scale linearly with number of traced actions\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/MultiModScopeInteractions.e2e.test.js --no-coverage --testNamePattern=\"should handle scopes referencing components from dependency mods\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/MultiModScopeInteractions.e2e.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/integration/mods/positioning/turnAroundKneelInteraction.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/positioning/furnitureSitting.integration.test.js --no-coverage --testNamePattern=\"should allocate second spot when first is occupied\")",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/environmentScope.integration.test.js --no-coverage --testNamePattern=\"should exclude entities in different locations\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/environmentScope.integration.test.js --no-coverage --verbose --maxWorkers=1)",
      "Bash(NODE_ENV=test npx jest tests/integration/positioning/furnitureSitting.integration.test.js --no-coverage --testNamePattern=\"should allocate second spot when first is occupied\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/speechPatternsGeneratorDispatchFormat.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/rubVaginaOverClothesActionDiscovery.integration.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidatorQuotedSpeechFix.test.js --no-coverage --verbose)",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__insert_after_symbol",
      "Bash(NODE_ENV=test npx jest tests/integration/scopeEngineSingletonLocationContext.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopeEngineSingletonLocationContext.test.js --testNamePattern=\"should only show actors in the same location for follow action\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/rubPenisOverClothesActionDiscovery.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopeEngineSingletonLocationContext.test.js --no-coverage --verbose --runInBand)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/rubPenisOverClothesActionDiscovery.integration.test.js --no-coverage --verbose --testNamePattern=\"should not discover action when target is facing away\")",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/rubPenisOverClothesActionDiscovery.integration.test.js --no-coverage --verbose --runInBand)",
      "Bash(NODE_ENV=test npm run test:integration --silent)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/ --no-coverage --verbose --runInBand)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/fondleBreastsScopeEvaluation.integration.test.js --no-coverage --verbose --testNamePattern=\"should exclude targets when target is facing away\")",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/fondleBreastsScopeEvaluation.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopeEngineSingletonLocationContext.test.js --testNamePattern=\"should update available exits when actor moves between locations\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/fondleBreastsScopeEvaluation.integration.test.js --no-coverage --testNamePattern=\"should include targets when both breasts are uncovered|should exclude targets when target is facing away\")",
      "Bash(NODE_ENV=test npx jest tests/integration/scopes/fondleBreastsScopeEvaluation.integration.test.js --no-coverage --verbose --testNamePattern=\"should properly evaluate positioning:entity-not-in-facing-away condition in isolation\")",
      "Bash(NODE_ENV=test npx jest tests/performance/entities/EntityLifecycleWorkflowPerformance.test.js --testNamePattern=\"should maintain consistent performance across multiple operations\" --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/mods/positioning/turnAroundKneelInteraction.integration.test.js --no-coverage --verbose --testNamePattern=\"should allow kneeling after turning back to face\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage --verbose --testNamePattern=\"should handle processing errors gracefully\")",
      "Bash(NODE_ENV=test npx jest tests/unit/characterBuilder/validators/SpeechPatternsSchemaValidator.test.js --no-coverage --verbose --testNamePattern=\"should handle validation failure with sanitization\")",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/DepthCycleBoundaries.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/logging/hybridLogger.memory.test.js --config jest.config.memory.js --env=jsdom --silent --testNamePattern=\"should efficiently manage memory with mixed log levels\")",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/logging/hybridLogger.memory.test.js --config jest.config.memory.js --env=jsdom --verbose)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/logging/remoteLogger.memory.test.js --config jest.config.memory.js --env=jsdom --silent)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/DynamicStateUpdates.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/HighConcurrency.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/HighConcurrency.performance.test.js --config jest.config.performance.js --env=jsdom --silent --testNamePattern=\"should demonstrate linear scaling up to 50 concurrent operations\")",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/scopeDsl/HighConcurrency.memory.test.js --config jest.config.memory.js --env=jsdom --testNamePattern=\"should track memory usage with 50\\+ concurrent operations\" --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/HighConcurrency.e2e.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/HighConcurrency.performance.test.js --config jest.config.performance.js --env=jsdom --silent)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/scopeDsl/HighConcurrency.memory.test.js --config jest.config.memory.js --env=jsdom --testNamePattern=\"should track memory usage with 50\\+ concurrent operations\" --silent)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ContextManipulation.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/ContextManipulation.e2e.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/DeveloperExperience.e2e.test.js --no-coverage --silent)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/DeveloperExperience.e2e.test.js --no-coverage)",
      "Bash(NODE_ENV=test npx jest tests/e2e/scopeDsl/DeveloperExperience.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/scopeDsl/HighConcurrency.memory.test.js --config jest.config.memory.js --env=jsdom --silent --testNamePattern=\"should manage memory efficiently under resource-intensive concurrent load\")",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/scopeDsl/HighConcurrency.memory.test.js --config jest.config.memory.js --env=jsdom --silent --testNamePattern=\"should recover memory gracefully from resource pressure spikes\")",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/hybridLogger.performance.test.js --config jest.config.performance.js --testTimeout=5000 --bail)",
      "Bash(NODE_ENV=test npx jest tests/performance/logging/hybridLogger.performance.test.js --config jest.config.performance.js --testTimeout=10000)",
      "Bash(NODE_ENV=test node --expose-gc ./node_modules/.bin/jest tests/memory/scopeDsl/HighConcurrency.memory.test.js --testNamePattern=\"should cleanup memory efficiently after intensive concurrent operations\" --config jest.config.memory.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/scopeDsl/HighConcurrency.performance.test.js --config jest.config.performance.js --env=jsdom --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest debug-scope-resolution.js --config jest.config.performance.js --env=jsdom --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/debug-scope-resolution.test.js --config jest.config.performance.js --env=jsdom --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/e2e/prompting/PromptGenerationPipeline.e2e.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/performance/debug-performance-dataset.test.js --config jest.config.performance.js --env=jsdom --no-coverage --verbose)",
      "Bash(NODE_ENV=test npm run test:performance)",
      "Bash(NODE_ENV=test npx jest tests/integration/clothing/regenerateDescriptionOperation.integration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/dependencyInjection/registrations/interpreterRegistrations.RegenerateDescription.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/integration/clothing/clothingDescriptionIntegration.test.js --no-coverage --verbose)",
      "Bash(NODE_ENV=test npx jest tests/unit/bug-reproduction/regenerateDescriptionHandlerNotFound.test.js --no-coverage --verbose)"
    ],
    "deny": []
  }
}
