// src/actions/actionTypes.js

// Ensure necessary imports for type hinting (won't be executed at runtime)
/** @typedef {import('../interfaces/IGameDataRepository.js').IGameDataRepository} IGameDataRepository */ // <<< CHANGED (path adjusted)
/** @typedef {import('../interfaces/IEntityManager.js').IEntityManager} IEntityManager */ // <<< CHANGED (path adjusted)
/** @typedef {import('../entities/entity.js').default} Entity */
/** @typedef {import('../events/eventBus.js').default} EventBus */ // Assuming EventBus might be an interface or a concrete type used directly
/** @typedef {import('../constants/eventIds.js').ATTEMPT_ACTION_ID} ATTEMPT_ACTION_ID */
// --- ADDED Import for ActionTargetContext ---
/** @typedef {import('../models/actionTargetContext.js').ActionTargetContext} ActionTargetContext */
// --- ADDED Import for ActionDefinition (used in ActionAttemptPseudoEvent) ---
/** @typedef {import('../interfaces/IGameDataRepository.js').ActionDefinition} ActionDefinition */
/** @typedef {import('../interfaces/coreServices.js').ILogger} ILogger */ // Added for ActionContext
/** @typedef {import('../interfaces/IWorldContext.js').IWorldContext} IWorldContext */ // Added for ActionContext
/** @typedef {import('../interfaces/IValidatedEventDispatcher.js').IValidatedEventDispatcher} IValidatedEventDispatcher */ // Added for ActionContext

/**
 * The context object provided to action operationHandlers and target resolvers.
 * It contains the structured command input (`parsedCommand`) and all necessary game state references
 * and dependencies (acting entity, location, managers, event dispatcher) required
 * for the handler to perform its work. Handlers should rely *solely* on this context.
 *
 * @typedef {object} ActionContext
 * @property {Entity} actingEntity - The entity instance (player, NPC, etc.) performing the action.
 * @property {Entity | null} currentLocation - The entity instance representing the acting entity's current location. Can be null.
 * @property {IGameDataRepository} gameDataRepository - Provides access to loaded game definition data. // <<< CHANGED
 * @property {IEntityManager} entityManager - The manager for creating and tracking entity instances. // <<< CHANGED
 * @property {{dispatch: (eventName: string, eventData: object) => Promise<boolean>}} eventBus - Shim for validated event dispatch.
 * @property {IValidatedEventDispatcher} validatedEventDispatcher - For dispatching validated events.
 * @property {ILogger} logger - The logger instance.
 * @property {IWorldContext} worldContext - Provides access to world state information.
 * // Add other relevant state here if needed in the future (e.g., gameTime, weather)
 */

/**
 * Represents a message generated by an action handler, intended for display to the user.
 *
 * @typedef {object} ActionMessage
 * @property {string} text - The message content.
 * @property {'info' | 'error' | 'success' | 'warning' | 'command' | 'internal' | string} [type='info'] - The type/style of the message (defaults to 'info'). Added 'internal' based on usage.
 */

/**
 * The result object returned by every action handler function.
 * It communicates the outcome, messages for the player, and any
 * required changes to the core game state.
 *
 * @typedef {object} ActionResult
 * @property {boolean} success - Indicates whether the action was successfully performed (even if the outcome was negative, e.g., missing an attack). Note: For operationHandlers focusing on intent validation (like `executeMove`, `executeUse`), success often indicates the *intent* was valid and the corresponding event was dispatched, not necessarily that the underlying action fully completed.
 * @property {ActionMessage[]} [messages] - An array of messages intended for internal logging or debugging. Player-facing messages are typically handled via dispatched events.
 */

// +++ TICKET 6: Add ActionAttemptPseudoEvent Typedef +++
/**
 * Represents the context of an action being attempted, passed to the
 * context creation function for prerequisite evaluation. This is *not*
 * an event dispatched on the EventBus, but an informational object.
 *
 * @typedef {object} ActionAttemptPseudoEvent
 * @property {ATTEMPT_ACTION_ID} eventType - Discriminator indicating the nature of this object.
 * @property {string} actionId - The ID of the action being attempted (e.g., 'core:move').
 * @property {string} actorId - The ID of the entity attempting the action.
 * @property {ActionTargetContext} targetContext - The resolved target context for this specific attempt.
 * @property {ActionDefinition} actionDefinition - The full definition of the action being attempted. // Added for more context
 */
// +++ END TICKET 6 +++

// ---- Placeholder Export ----
// This file primarily exists for JSDoc type definitions.
// Exporting something makes it a valid module if needed elsewhere,
// though direct imports are typically just for the type hints.
export const ActionTypes = {};
