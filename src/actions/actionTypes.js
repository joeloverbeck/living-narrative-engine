// src/actions/actionTypes.js

// Ensure necessary imports for type hinting (won't be executed at runtime)
/** @typedef {import('../core/dataManager.js').default} DataManager */
/** @typedef {import('../entities/entityManager.js').default} EntityManager */
/** @typedef {import('../entities/entity.js').default} Entity */
// Added EventBus based on its use in ActionContext
/** @typedef {import('../core/eventBus.js').default} EventBus */


/**
 * Represents the structured output of the command parser after refactoring.
 * This structure separates the command into verb (implied by actionId),
 * direct object, preposition, and indirect object, facilitating more
 * complex command handling compared to a simple list of targets.
 * This is the target output for the refactored parser and input for
 * downstream consumers.
 *
 * @typedef {object} ParsedCommand
 * @property {string | null} actionId - The unique identifier for the matched action (e.g., 'core:use', 'core:move'). Null if no action could be identified or parsing failed fundamentally.
 * @property {string | null} directObjectPhrase - The identified noun phrase acting as the direct object of the verb. For commands like 'move north', this would be 'north'. For 'take rusty key', this would be 'rusty key'. Null if no direct object is applicable or identified.
 * @property {string | null} preposition - The identified preposition (e.g., 'on', 'in', 'with', 'from', 'to') that links the direct object to the indirect object. Null if no preposition is present or applicable (e.g., single-object commands, commands with no objects).
 * @property {string | null} indirectObjectPhrase - The identified noun phrase acting as the indirect object of the verb, usually following a preposition. For 'put book on table', this would be 'table'. Null if no indirect object is applicable or identified.
 * @property {string} originalInput - The original, unmodified command string exactly as entered by the user. Useful for logging and debugging.
 * @property {string | null} error - An optional error message detailing specific parsing failures (e.g., "Ambiguous command", "Command structure unclear", "Verb requires a target"). Null if parsing was successful or no specific error condition was met.
 */


/**
 * The context object provided to action handlers. It contains the structured
 * command input (`parsedCommand`) and all necessary game state references
 * and dependencies (player, location, managers, event dispatcher) required
 * for the handler to perform its work. Handlers should rely *solely* on this context.
 *
 * @typedef {object} ActionContext
 * @property {Entity} playerEntity - The entity instance representing the player.
 * @property {Entity} currentLocation - The entity instance representing the player's current location.
 * @property {ParsedCommand} parsedCommand - The structured output from the command parser, containing the identified action, objects, preposition, and original input.
 * @property {DataManager} dataManager - The central manager for game data definitions.
 * @property {EntityManager} entityManager - The manager for creating and tracking entity instances.
 * @property {(eventName: string, eventData: object) => void} dispatch - Function to dispatch game events (via EventBus).
 * @property {EventBus} eventBus - The event bus instance for dispatching events.
 * // Add other relevant state here if needed in the future (e.g., gameTime, weather)
 */

/**
 * Represents a message generated by an action handler, intended for display to the user.
 *
 * @typedef {object} ActionMessage
 * @property {string} text - The message content.
 * @property {'info' | 'error' | 'success' | 'warning' | 'command' | 'internal' | string} [type='info'] - The type/style of the message (defaults to 'info'). Added 'internal' based on usage.
 */

/**
 * Defines the structure for signaling required changes to the core game state
 * managed by `GameLoop`. Handlers return this within `ActionResult` instead
 * of directly modifying `GameLoop` state variables like `currentLocation`.
 * `GameLoop` is responsible for processing this structure.
 *
 * @typedef {object} ActionNewState
 * @property {string} [currentLocationId] - If present, signals the GameLoop to change the player's location to the entity with this ID.
 * // Add other state change signals here if needed (e.g., playerRespawn: true)
 */

/**
 * The result object returned by every action handler function.
 * It communicates the outcome, messages for the player, and any
 * required changes to the core game state.
 *
 * @typedef {object} ActionResult
 * @property {boolean} success - Indicates whether the action was successfully performed (even if the outcome was negative, e.g., missing an attack). Note: For handlers focusing on intent validation (like `executeMove`, `executeUse`), success often indicates the *intent* was valid and the corresponding event was dispatched, not necessarily that the underlying action fully completed.
 * @property {ActionMessage[]} [messages] - An array of messages intended for internal logging or debugging. Player-facing messages are typically handled via dispatched events (e.g., EVENT_DISPLAY_MESSAGE, EVENT_MOVE_FAILED). **NOTE:** Usage varies; some handlers still return messages. This might be refined later.
 * @property {ActionNewState} [newState] - An optional object signaling required changes to GameLoop-managed state (like changing location). If omitted, no core state change is requested.
 */

// ---- Placeholder Export ----
// This file primarily exists for JSDoc type definitions.
// Exporting something makes it a valid module if needed elsewhere,
// though direct imports are typically just for the type hints.
export const ActionTypes = {};