// src/actions/actionTypes.js

// Ensure necessary imports for type hinting (won't be executed at runtime)
/** @typedef {import('../../dataManager.js').default} DataManager */
/** @typedef {import('../entities/entityManager.js').default} EntityManager */
/** @typedef {import('../entities/entity.js').default} Entity */

/**
 * The context object provided to action handlers, containing all necessary
 * game state and dependencies for the handler to perform its work.
 * Handlers should rely *solely* on this context.
 *
 * @typedef {object} ActionContext
 * @property {Entity} playerEntity - The entity instance representing the player.
 * @property {Entity} currentLocation - The entity instance representing the player's current location.
 * @property {string[]} targets - An array of strings representing the targets/arguments derived from the parsed command.
 * @property {DataManager} dataManager - The central manager for game data definitions.
 * @property {EntityManager} entityManager - The manager for creating and tracking entity instances.
 * @property {(eventName: string, eventData: object) => void} dispatch - Function to dispatch game events.
 * // Add other relevant state here if needed in the future (e.g., gameTime, weather)
 */

/**
 * Represents a message generated by an action handler, intended for display to the user.
 *
 * @typedef {object} ActionMessage
 * @property {string} text - The message content.
 * @property {'info' | 'error' | 'success' | 'warning' | 'command' | string} [type='info'] - The type/style of the message (defaults to 'info').
 */

/**
 * Defines the structure for signaling required changes to the core game state
 * managed by `GameLoop`. Handlers return this within `ActionResult` instead
 * of directly modifying `GameLoop` state variables like `currentLocation`.
 * `GameLoop` is responsible for processing this structure.
 *
 * @typedef {object} ActionNewState
 * @property {string} [currentLocationId] - If present, signals the GameLoop to change the player's location to the entity with this ID.
 * // Add other state change signals here if needed (e.g., playerRespawn: true)
 */

/**
 * The result object returned by every action handler function.
 * It communicates the outcome, messages for the player, and any
 * required changes to the core game state.
 *
 * @typedef {object} ActionResult
 * @property {boolean} success - Indicates whether the action was successfully performed (even if the outcome was negative, e.g., missing an attack).
 * @property {ActionMessage[]} messages - An array of messages to be displayed to the player.
 * @property {ActionNewState} [newState] - An optional object signaling required changes to GameLoop-managed state (like changing location). If omitted, no core state change is requested.
 * // @property {GameEvent[]} [eventsToDispatch] - Placeholder for future event system integration.
 */

// ---- Placeholder Export ----
// This file primarily exists for JSDoc type definitions.
// Exporting something makes it a valid module if needed elsewhere,
// though direct imports are typically just for the type hints.
export const ActionTypes = {};