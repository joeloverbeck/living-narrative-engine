// src/actions/actionTypes.js

// Ensure necessary imports for type hinting (won't be executed at runtime)
/** @typedef {import('../interfaces/IGameDataRepository.js').IGameDataRepository} IGameDataRepository */
/** @typedef {import('../interfaces/IEntityManager.js').IEntityManager} IEntityManager */
/** @typedef {import('../entities/entity.js').default} Entity */
/** @typedef {import('../events/eventBus.js').default} EventBus */ // Assuming EventBus might be an interface or a concrete type used directly
/** @typedef {import('../constants/eventIds.js').ATTEMPT_ACTION_ID} ATTEMPT_ACTION_ID */
// --- REMOVED Import for ActionTargetContext as it's no longer used here ---
/** @typedef {import('../interfaces/IGameDataRepository.js').ActionDefinition} ActionDefinition */
/** @typedef {import('../interfaces/coreServices.js').ILogger} ILogger */ // Added for ActionContext
/** @typedef {import('../interfaces/IWorldContext.js').IWorldContext} IWorldContext */ // Added for ActionContext
/** @typedef {import('../interfaces/IValidatedEventDispatcher.js').IValidatedEventDispatcher} IValidatedEventDispatcher */ // Added for ActionContext

/**
 * @typedef {object} ActionContext
 * @description Contains dynamic, request-specific context for an action.
 * @property {Entity | null} [currentLocation] - The actor's current location entity.
 * @property {object} [worldContext] - The broader game or turn state.
 * @property {function(): Entity} [getActor] - A function to retrieve the acting entity.
 */

/**
 * Represents a message generated by an action handler, intended for display to the user.
 *
 * @typedef {object} ActionMessage
 * @property {string} text - The message content.
 * @property {'info' | 'error' | 'success' | 'warning' | 'command' | 'internal' | string} [type='info'] - The type/style of the message (defaults to 'info'). Added 'internal' based on usage.
 */

/**
 * The result object returned by every action handler function.
 * It communicates the outcome, messages for the player, and any
 * required changes to the core game state.
 *
 * @typedef {object} ActionResult
 * @property {boolean} success - Indicates whether the action was successfully performed (even if the outcome was negative, e.g., missing an attack). Note: For operationHandlers focusing on intent validation (like `executeMove`, `executeUse`), success often indicates the *intent* was valid and the corresponding event was dispatched, not necessarily that the underlying action fully completed.
 * @property {ActionMessage[]} [messages] - An array of messages intended for internal logging or debugging. Player-facing messages are typically handled via dispatched events.
 */

// +++ TICKET 6: Add ActionAttemptPseudoEvent Typedef +++
/**
 * Represents the context of an action being attempted, passed to the
 * context creation function for prerequisite evaluation. This is *not*
 * an event dispatched on the EventBus, but an informational object.
 *
 * @typedef {object} ActionAttemptPseudoEvent
 * @property {ATTEMPT_ACTION_ID} eventType - Discriminator indicating the nature of this object.
 * @property {string} actionId - The ID of the action being attempted (e.g., 'core:move').
 * @property {string} actorId - The ID of the entity attempting the action.
 * @property {ActionDefinition} actionDefinition - The full definition of the action being attempted.
 */
// +++ END TICKET 6 +++

/**
 * @typedef {import('./tracing/traceContext.js').TraceContext} TraceContext
 */

/**
 * @callback TraceContextFactory
 * @description A factory function that creates and returns a new ITraceContext instance.
 * @returns {TraceContext}
 */

// ---- Placeholder Export ----
// This file primarily exists for JSDoc type definitions.
// Exporting something makes it a valid module if needed elsewhere,
// though direct imports are typically just for the type hints.
export const ActionTypes = {};