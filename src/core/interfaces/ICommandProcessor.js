/** @typedef {any} CommandProcessingResult */ // TBD - using 'any'/'unknown' for now

// --- ICommandProcessor ---
/**
 * @interface ICommandProcessor
 * @classdesc Defines the contract for processing a command string submitted by an actor.
 * This typically involves parsing the raw command, validating it in the current context,
 * and initiating the execution of the corresponding action.
 */
export class ICommandProcessor {
    /**
     * Processes a command string submitted by the given actor during their turn.
     * Implementations should handle parsing, validation (is the command valid for this actor
     * in this situation?), and triggering the action execution mechanism.
     * @function processCommand
     * @async
     * @param {Entity} actor - The entity submitting the command.
     * @param {string} command - The raw command string entered by the player or generated by AI.
     * @returns {Promise<CommandProcessingResult>} A promise that resolves with the result of the command processing.
     * The exact structure of `CommandProcessingResult` is to be determined (TBD), but it should
     * likely indicate success/failure of the command processing and potentially details
     * about the action taken or errors encountered. Using `unknown` or `any` temporarily.
     * @throws {Error} Implementations might throw if a critical, unrecoverable error occurs
     * during command processing (e.g., failure to access essential game state). Parsing errors
     * or invalid commands should ideally be reflected in the returned result, not by throwing.
     */
    async processCommand(actor, command) {
        throw new Error('ICommandProcessor.processCommand method not implemented.');
    }
}