{
  "$schema": "schema://living-narrative-engine/rule.json",
  "rule_id": "companionship_handle_dismiss",
  "comment": "Handles the 'companionship:dismiss' action. Removes the component from the TARGET, updates the ACTOR's (leader's) cache, dispatches a conditional perceptible event and a success UI event, and ends the turn.",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "companionship:event-is-action-dismiss"
  },
  "actions": [
    {
      "type": "REMOVE_COMPONENT",
      "comment": "Step 1: Authoritatively remove the following relationship from the TARGET entity.",
      "parameters": {
        "entity_ref": "target",
        "component_type": "companionship:following"
      }
    },
    {
      "type": "MODIFY_ARRAY_FIELD",
      "comment": "Step 2: Remove the follower from the ACTOR's (leader's) 'companionship:leading' component.",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "companionship:leading",
        "field": "followers",
        "mode": "remove_by_value",
        "value": "{event.payload.targetId}"
      }
    },
    {
      "type": "REGENERATE_DESCRIPTION",
      "parameters": { "entity_ref": "target" }
    },
    {
      "type": "REGENERATE_DESCRIPTION",
      "parameters": { "entity_ref": "actor" }
    },
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "actor",
        "result_variable": "actorName"
      }
    },
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "target",
        "result_variable": "targetName"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get actor's position",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:position",
        "result_variable": "actorPosition"
      }
    },
    {
      "type": "IF_CO_LOCATED",
      "comment": "Only dispatch a perceptible event if the leader and follower are in the same location.",
      "parameters": {
        "entity_ref_a": "actor",
        "entity_ref_b": "target",
        "then_actions": [
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "nowIso"
            }
          },
          {
            "type": "DISPATCH_PERCEPTIBLE_EVENT",
            "comment": "This event is for other characters to observe.",
            "parameters": {
              "location_id": "{context.actorPosition.locationId}",
              "description_text": "{context.actorName} has dismissed {context.targetName} from their service.",
              "perception_type": "state_change_observable",
              "actor_id": "{event.payload.actorId}",
              "target_id": "{event.payload.targetId}",
              "involved_entities": []
            }
          }
        ]
      }
    },
    {
      "type": "SET_VARIABLE",
      "comment": "Prepare success message for the UI.",
      "parameters": {
        "variable_name": "successMessage",
        "value": "{context.actorName} dismisses {context.targetName}."
      }
    },
    { "macro": "core:displaySuccessAndEndTurn" }
  ]
}