{
  "$schema": "schema://living-narrative-engine/rule.schema.json",
  "rule_id": "handle_sit_down",
  "comment": "Handles positioning:sit_down action",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "positioning:event-is-action-sit-down"
  },
  "actions": [
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get current furniture spots array",
      "parameters": {
        "entity_ref": "{event.payload.targetId}",
        "component_type": "positioning:allows_sitting",
        "result_variable": "furnitureData"
      }
    },
    {
      "type": "SET_VARIABLE",
      "comment": "Initialize spot index to -1 (not found)",
      "parameters": {
        "variable_name": "spotIndex",
        "value": -1
      }
    },
    {
      "type": "SET_VARIABLE",
      "comment": "Try spot 0 with atomic check",
      "parameters": {
        "variable_name": "trySpot0",
        "value": true
      }
    },
    {
      "type": "IF",
      "comment": "Try to claim spot 0",
      "parameters": {
        "condition": {
          "and": [
            { "var": "context.trySpot0" },
            { "==": [{ "var": "context.spotIndex" }, -1] }
          ]
        },
        "then_actions": [
          {
            "type": "ATOMIC_MODIFY_COMPONENT",
            "comment": "Atomically claim spot 0 if empty",
            "parameters": {
              "entity_ref": "target",
              "component_type": "positioning:allows_sitting",
              "field": "spots.0",
              "expected_value": null,
              "new_value": "{event.payload.actorId}",
              "result_variable": "spot0Claimed"
            }
          },
          {
            "type": "IF",
            "comment": "Set spot index if claim succeeded",
            "parameters": {
              "condition": { "var": "context.spot0Claimed" },
              "then_actions": [
                {
                  "type": "SET_VARIABLE",
                  "parameters": {
                    "variable_name": "spotIndex",
                    "value": 0
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "IF",
      "comment": "Try to claim spot 1 if spot 0 failed",
      "parameters": {
        "condition": { "==": [{ "var": "context.spotIndex" }, -1] },
        "then_actions": [
          {
            "type": "ATOMIC_MODIFY_COMPONENT",
            "comment": "Atomically claim spot 1 if empty",
            "parameters": {
              "entity_ref": "target",
              "component_type": "positioning:allows_sitting",
              "field": "spots.1",
              "expected_value": null,
              "new_value": "{event.payload.actorId}",
              "result_variable": "spot1Claimed"
            }
          },
          {
            "type": "IF",
            "comment": "Set spot index if claim succeeded",
            "parameters": {
              "condition": { "var": "context.spot1Claimed" },
              "then_actions": [
                {
                  "type": "SET_VARIABLE",
                  "parameters": {
                    "variable_name": "spotIndex",
                    "value": 1
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "IF",
      "comment": "Try to claim spot 2 if spots 0 and 1 failed",
      "parameters": {
        "condition": { "==": [{ "var": "context.spotIndex" }, -1] },
        "then_actions": [
          {
            "type": "ATOMIC_MODIFY_COMPONENT",
            "comment": "Atomically claim spot 2 if empty",
            "parameters": {
              "entity_ref": "target",
              "component_type": "positioning:allows_sitting",
              "field": "spots.2",
              "expected_value": null,
              "new_value": "{event.payload.actorId}",
              "result_variable": "spot2Claimed"
            }
          },
          {
            "type": "IF",
            "comment": "Set spot index if claim succeeded",
            "parameters": {
              "condition": { "var": "context.spot2Claimed" },
              "then_actions": [
                {
                  "type": "SET_VARIABLE",
                  "parameters": {
                    "variable_name": "spotIndex",
                    "value": 2
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "IF",
      "comment": "Only proceed if we found an empty spot",
      "parameters": {
        "condition": { ">=": [{ "var": "context.spotIndex" }, 0] },
        "then_actions": [
          {
            "type": "ADD_COMPONENT",
            "comment": "Add sitting_on component to actor",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "positioning:sitting_on",
              "value": {
                "furniture_id": "{event.payload.targetId}",
                "spot_index": "{context.spotIndex}"
              }
            }
          },
          {
            "type": "LOCK_MOVEMENT",
            "comment": "Lock movement while sitting",
            "parameters": {
              "actor_id": "{event.payload.actorId}"
            }
          },
          {
            "type": "GET_NAME",
            "parameters": { "entity_ref": "actor", "result_variable": "actorName" }
          },
          {
            "type": "GET_NAME",
            "parameters": { "entity_ref": "target", "result_variable": "targetName" }
          },
          {
            "type": "QUERY_COMPONENT",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPosition"
            }
          },
          {
            "type": "SET_VARIABLE",
            "parameters": {
              "variable_name": "logMessage",
              "value": "{context.actorName} sits down on {context.targetName}."
            }
          },
          {
            "type": "SET_VARIABLE",
            "parameters": {
              "variable_name": "perceptionType",
              "value": "action_target_general"
            }
          },
          {
            "type": "SET_VARIABLE",
            "parameters": {
              "variable_name": "locationId",
              "value": "{context.actorPosition.locationId}"
            }
          },
          {
            "type": "SET_VARIABLE",
            "parameters": {
              "variable_name": "targetId",
              "value": "{event.payload.targetId}"
            }
          },
          {
            "macro": "core:logSuccessAndEndTurn"
          }
        ]
      }
    }
  ]
}