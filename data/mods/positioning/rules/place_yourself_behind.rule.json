{
  "$schema": "schema://living-narrative-engine/rule.schema.json",
  "rule_id": "handle_place_yourself_behind",
  "comment": "Handles the 'positioning:place_yourself_behind' action. Adds facing_away component to target, causing them to face away from the actor.",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "positioning:event-is-action-place-yourself-behind"
  },
  "actions": [
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "actor",
        "result_variable": "actorName"
      }
    },
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "target",
        "result_variable": "targetName"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:position",
        "result_variable": "actorPosition"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "parameters": {
        "entity_ref": "target",
        "component_type": "positioning:facing_away",
        "result_variable": "targetFacingState",
        "missing_value": null
      }
    },
    {
      "type": "IF",
      "comment": "Check if target already has facing_away component",
      "parameters": {
        "condition": { "var": "context.targetFacingState" },
        "then_actions": [
          {
            "type": "MODIFY_ARRAY_FIELD",
            "comment": "Add actor to existing facing_away_from array",
            "parameters": {
              "entity_ref": "target",
              "component_type": "positioning:facing_away",
              "field": "facing_away_from",
              "mode": "push_unique",
              "value": "{event.payload.actorId}"
            }
          }
        ],
        "else_actions": [
          {
            "type": "ADD_COMPONENT",
            "comment": "Create new facing_away component with actor in facing_away_from array",
            "parameters": {
              "entity_ref": "target",
              "component_type": "positioning:facing_away",
              "value": {
                "facing_away_from": ["{event.payload.actorId}"]
              }
            }
          }
        ]
      }
    },
    {
      "type": "SET_VARIABLE",
      "parameters": {
        "variable_name": "logMessage",
        "value": "{context.actorName} places themselves behind {context.targetName}."
      }
    },
    {
      "type": "SET_VARIABLE",
      "parameters": {
        "variable_name": "perceptionType",
        "value": "action_target_general"
      }
    },
    {
      "type": "SET_VARIABLE",
      "parameters": {
        "variable_name": "locationId",
        "value": "{context.actorPosition.locationId}"
      }
    },
    {
      "type": "SET_VARIABLE",
      "parameters": {
        "variable_name": "targetId",
        "value": "{event.payload.targetId}"
      }
    },
    {
      "type": "DISPATCH_EVENT",
      "parameters": {
        "eventType": "positioning:actor_placed_behind",
        "payload": {
          "actor": "{event.payload.actorId}",
          "target": "{event.payload.targetId}"
        }
      }
    },
    { "macro": "core:logSuccessAndEndTurn" }
  ]
}