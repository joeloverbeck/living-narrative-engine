{
  "$schema": "schema://living-narrative-engine/rule.schema.json",
  "rule_id": "handle_sit_down_at_distance",
  "comment": "Handles positioning:sit_down_at_distance action with two-seat buffer from secondary occupant",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "positioning:event-is-action-sit-down-at-distance"
  },
  "actions": [
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get current furniture spots array",
      "parameters": {
        "entity_ref": "{event.payload.targetId}",
        "component_type": "positioning:allows_sitting",
        "result_variable": "furnitureData"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get secondary occupant's sitting position",
      "parameters": {
        "entity_ref": "{event.payload.secondaryId}",
        "component_type": "positioning:sitting_on",
        "result_variable": "secondarySittingData"
      }
    },
    {
      "type": "IF",
      "comment": "Validate that secondary target has sitting_on component",
      "parameters": {
        "condition": { "!!": { "var": "context.secondarySittingData" } },
        "then_actions": [
          {
            "type": "SET_VARIABLE",
            "comment": "Extract secondary occupant's spot index",
            "parameters": {
              "variable_name": "secondaryIndex",
              "value": "{context.secondarySittingData.spot_index}"
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Calculate target index (secondary + 2 for one-seat buffer)",
            "parameters": {
              "variable_name": "targetIndex",
              "value": { "+": [{ "var": "context.secondaryIndex" }, 2] }
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Calculate buffer spot index (secondary + 1)",
            "parameters": {
              "variable_name": "bufferIndex",
              "value": { "+": [{ "var": "context.secondaryIndex" }, 1] }
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Re-fetch furniture data to get fresh spots array for validation",
            "parameters": {
              "entity_ref": "{event.payload.targetId}",
              "component_type": "positioning:allows_sitting",
              "result_variable": "furnitureDataRefresh"
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Extract buffer spot occupant (should be null)",
            "parameters": {
              "variable_name": "bufferSpotOccupant",
              "value": {
                "var": {
                  "cat": [
                    "context.furnitureDataRefresh.spots.",
                    { "var": "context.bufferIndex" }
                  ]
                }
              }
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Extract target spot occupant (should be null)",
            "parameters": {
              "variable_name": "targetSpotOccupant",
              "value": {
                "var": {
                  "cat": [
                    "context.furnitureDataRefresh.spots.",
                    { "var": "context.targetIndex" }
                  ]
                }
              }
            }
          },
          {
            "type": "IF",
            "comment": "Validate both buffer and target spots are empty",
            "parameters": {
              "condition": {
                "and": [
                  { "===": [{ "var": "context.bufferSpotOccupant" }, null] },
                  { "===": [{ "var": "context.targetSpotOccupant" }, null] }
                ]
              },
              "then_actions": [
                {
                  "type": "ATOMIC_MODIFY_COMPONENT",
                  "comment": "Atomically claim the target spot",
                  "parameters": {
                    "entity_ref": "target",
                    "component_type": "positioning:allows_sitting",
                    "field": {
                      "cat": ["spots.", { "var": "context.targetIndex" }]
                    },
                    "expected_value": null,
                    "new_value": "{event.payload.actorId}",
                    "result_variable": "seatClaimed"
                  }
                },
                {
                  "type": "IF",
                  "comment": "Proceed only if seat was claimed successfully",
                  "parameters": {
                    "condition": { "var": "context.seatClaimed" },
                    "then_actions": [
                      {
                        "type": "ADD_COMPONENT",
                        "comment": "Add sitting_on component to actor",
                        "parameters": {
                          "entity_ref": "actor",
                          "component_type": "positioning:sitting_on",
                          "value": {
                            "furniture_id": "{event.payload.targetId}",
                            "spot_index": "{context.targetIndex}"
                          }
                        }
                      },
                      {
                        "type": "LOCK_MOVEMENT",
                        "comment": "Lock movement while sitting",
                        "parameters": {
                          "actor_id": "{event.payload.actorId}"
                        }
                      },
                      {
                        "type": "ESTABLISH_SITTING_CLOSENESS",
                        "comment": "Attempt to establish closeness (will naturally skip due to gap)",
                        "parameters": {
                          "furniture_id": "{event.payload.targetId}",
                          "actor_id": "{event.payload.actorId}",
                          "spot_index": "{context.targetIndex}",
                          "result_variable": "closenessEstablished"
                        }
                      },
                      {
                        "type": "GET_NAME",
                        "parameters": {
                          "entity_ref": "actor",
                          "result_variable": "actorName"
                        }
                      },
                      {
                        "type": "GET_NAME",
                        "parameters": {
                          "entity_ref": "target",
                          "result_variable": "targetName"
                        }
                      },
                      {
                        "type": "GET_NAME",
                        "parameters": {
                          "entity_ref": "{event.payload.secondaryId}",
                          "result_variable": "secondaryName"
                        }
                      },
                      {
                        "type": "QUERY_COMPONENT",
                        "parameters": {
                          "entity_ref": "actor",
                          "component_type": "core:position",
                          "result_variable": "actorPosition"
                        }
                      },
                      {
                        "type": "SET_VARIABLE",
                        "parameters": {
                          "variable_name": "logMessage",
                          "value": "{context.actorName} sits down on {context.targetName} at a distance from {context.secondaryName}."
                        }
                      },
                      {
                        "type": "SET_VARIABLE",
                        "parameters": {
                          "variable_name": "perceptionType",
                          "value": "action_target_general"
                        }
                      },
                      {
                        "type": "SET_VARIABLE",
                        "parameters": {
                          "variable_name": "locationId",
                          "value": "{context.actorPosition.locationId}"
                        }
                      },
                      {
                        "type": "SET_VARIABLE",
                        "parameters": {
                          "variable_name": "targetId",
                          "value": "{event.payload.targetId}"
                        }
                      },
                      {
                        "macro": "core:logSuccessAndEndTurn"
                      }
                    ]
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
