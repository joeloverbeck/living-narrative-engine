// Real-World Context Usage Examples
// Practical scenarios showing context in actual game mechanics

// Trading: Find actors that could be trading partners
examples:potential_trading_partners := entities(core:actor)[][{
  "and": [
    { "condition_ref": "core:entity-at-location" },
    { "condition_ref": "core:entity-is-not-current-actor" }
  ]
}]

// Social: Find companions that can follow or be dismissed
examples:social_companions := entities(core:actor)[][{
  "and": [
    { "condition_ref": "core:entity-at-location" },
    { "condition_ref": "core:entity-is-not-current-actor" },
    { "condition_ref": "core:entity-has-actor-component" }
  ]
}]

// Target-based: Get companions at target's location (excluding actor and target)
examples:target_companions := location.entities(core:actor)[][{
  "and": [
    {"!=": [{"var": "entity.id"}, {"var": "target.id"}]},
    {"!=": [{"var": "entity.id"}, {"var": "actor.id"}]}
  ]
}]

// Clothing trade: Find adjustable and removable clothing on target
examples:tradeable_adjustable_clothing := target.topmost_clothing[][{
  "and": [
    {"in": ["adjustable", {"var": "entity.properties"}]},
    {"in": ["removable", {"var": "entity.properties"}]}
  ]
}]

// Combat: Get all hostile targets in primary and secondary groups
examples:all_hostile_targets := targets.primary[][{
  "==": [{"var": "entity.hostility"}, "hostile"]
}] + targets.secondary[][{
  "==": [{"var": "entity.hostility"}, "hostile"]
}]