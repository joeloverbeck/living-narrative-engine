{
  "$schema": "schema://living-narrative-engine/rule.schema.json",
  "rule_id": "handle_read_item",
  "comment": "Handles the read_item action by delivering readable text privately to the actor.",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "items:event-is-action-read-item"
  },
  "actions": [
    {
      "type": "GET_NAME",
      "comment": "Capture the actor name",
      "parameters": {
        "entity_ref": "actor",
        "result_variable": "actorName"
      }
    },
    {
      "type": "GET_NAME",
      "comment": "Capture the target item name",
      "parameters": {
        "entity_ref": "target",
        "result_variable": "itemName"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get actor position for contextual logging",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:position",
        "result_variable": "actorPosition"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "comment": "Retrieve readable text from the item",
      "parameters": {
        "entity_ref": "target",
        "component_type": "items:readable",
        "result_variable": "itemReadable",
        "missing_value": null
      }
    },
    {
      "type": "IF",
      "comment": "Ensure the readable component exists before proceeding",
      "parameters": {
        "condition": { "var": "context.itemReadable" },
        "then_actions": [
          {
            "type": "DISPATCH_PERCEPTIBLE_EVENT",
            "comment": "Send readable text as a private perception",
            "parameters": {
              "location_id": "{context.actorPosition.locationId}",
              "description_text": "{context.actorName} reads {context.itemName}: {context.itemReadable.text}",
              "perception_type": "item_read",
              "actor_id": "{event.payload.actorId}",
              "target_id": "{event.payload.targetId}",
              "contextual_data": {
                "recipientIds": ["{event.payload.actorId}"]
              }
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Prepare success message for UI",
            "parameters": {
              "variable_name": "successMessage",
              "value": "{context.actorName} reads {context.itemName}."
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "Display brief success message",
            "parameters": {
              "eventType": "core:display_successful_action_result",
              "payload": {
                "message": "{context.successMessage}"
              }
            }
          },
          {
            "type": "END_TURN",
            "comment": "End the actor's turn on success",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": true
            }
          }
        ],
        "else_actions": [
          {
            "type": "DISPATCH_EVENT",
            "comment": "Inform actor that the item is not readable",
            "parameters": {
              "eventType": "core:display_failed_action_result",
              "payload": {
                "message": "{context.actorName} cannot read {context.itemName}."
              }
            }
          },
          {
            "type": "END_TURN",
            "comment": "End the actor's turn due to failure",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": false
            }
          }
        ]
      }
    }
  ]
}
