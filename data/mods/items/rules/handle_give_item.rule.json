{
  "$schema": "schema://living-narrative-engine/rule.schema.json",
  "rule_id": "items:handle_give_item",
  "comment": "Handles give_item action with capacity validation and perception logging",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "items:event-is-action-give-item"
  },
  "actions": [
    {
      "type": "VALIDATE_INVENTORY_CAPACITY",
      "comment": "Check if recipient can carry the item",
      "parameters": {
        "targetEntity": "{event.payload.targetId}",
        "itemEntity": "{event.payload.secondaryTargetId}",
        "result_variable": "capacityCheck"
      }
    },
    {
      "type": "IF",
      "comment": "Branch based on capacity validation",
      "parameters": {
        "condition": {
          "==": [
            { "var": "context.capacityCheck.valid" },
            false
          ]
        },
        "then_actions": [
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor position for logging",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPosition"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get actor name",
            "parameters": {
              "entity_ref": "actor",
              "result_variable": "actorName"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get target name",
            "parameters": {
              "entity_ref": "target",
              "result_variable": "targetName"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get item name",
            "parameters": {
              "entity_ref": "{event.payload.secondaryTargetId}",
              "result_variable": "itemName"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get current timestamp",
            "parameters": {
              "result_variable": "currentTimestamp"
            }
          },
          {
            "type": "DISPATCH_PERCEPTIBLE_EVENT",
            "comment": "Log failed transfer for observers",
            "parameters": {
              "location_id": "{context.actorPosition.locationId}",
              "description_text": "{context.actorName} tried to give {context.itemName} to {context.targetName}, but they can't carry it.",
              "perception_type": "item_transfer_failed",
              "actor_id": "{event.payload.actorId}",
              "target_id": "{event.payload.targetId}",
              "involved_entities": ["{event.payload.secondaryTargetId}"]
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "Notify UI of failure",
            "parameters": {
              "eventType": "core:display_failed_action_result",
              "payload": {
                "message": "{context.targetName} cannot carry {context.itemName}. Reason: {context.capacityCheck.reason}"
              }
            }
          },
          {
            "type": "END_TURN",
            "comment": "End turn after failed transfer",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": false,
              "error": {
                "message": "Transfer failed: {context.capacityCheck.reason}"
              }
            }
          }
        ],
        "else_actions": [
          {
            "type": "TRANSFER_ITEM",
            "comment": "Move item from actor to target",
            "parameters": {
              "fromEntity": "{event.payload.actorId}",
              "toEntity": "{event.payload.targetId}",
              "itemEntity": "{event.payload.secondaryTargetId}"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor position for logging",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPosition"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get actor name",
            "parameters": {
              "entity_ref": "actor",
              "result_variable": "actorName"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get target name",
            "parameters": {
              "entity_ref": "target",
              "result_variable": "targetName"
            }
          },
          {
            "type": "GET_NAME",
            "comment": "Get item name",
            "parameters": {
              "entity_ref": "{event.payload.secondaryTargetId}",
              "result_variable": "itemName"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get current timestamp",
            "parameters": {
              "result_variable": "currentTimestamp"
            }
          },
          {
            "type": "DISPATCH_PERCEPTIBLE_EVENT",
            "comment": "Log successful transfer for observers",
            "parameters": {
              "location_id": "{context.actorPosition.locationId}",
              "description_text": "{context.actorName} gave {context.itemName} to {context.targetName}.",
              "perception_type": "item_transfer",
              "actor_id": "{event.payload.actorId}",
              "target_id": "{event.payload.targetId}",
              "involved_entities": ["{event.payload.secondaryTargetId}"]
            }
          },
          {
            "type": "END_TURN",
            "comment": "End turn after successful transfer",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": true
            }
          }
        ]
      }
    }
  ]
}
