{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "log_perceptible_events",
  "comment": "Listens for 'core:perceptible_event' and delegates to PerceptionUpdateService to add entries to the 'core:perception_log' of relevant entities.",
  "event_type": "core:perceptible_event",
  "actions": [
    {
      "type": "SET_VARIABLE",
      "comment": "Prepare the log entry object from the event payload for the service.",
      "parameters": {
        "variable_name": "logEntryData",
        "value": {
          "descriptionText": "{event.payload.descriptionText}",
          "timestamp": "{event.payload.timestamp}",
          "perceptionType": "{event.payload.perceptionType}",
          "actorId": "{event.payload.actorId}",
          "targetId": "{event.payload.targetId}",
          "involvedEntities": "{event.payload.involvedEntities}"
        }
      }
    },
    {
      "type": "QUERY_SYSTEM_DATA",
      "comment": "Delegate to PerceptionUpdateService to update logs in the event's location.",
      "parameters": {
        "source_id": "PerceptionUpdateService",
        "query_details": {
          "action": "addEntryToLogsInLocation",
          "locationId": "{event.payload.locationId}",
          "entry": "{context.logEntryData}",
          "originatingActorId": "{event.payload.actorId}"
        },
        "result_variable": "perceptionUpdateServiceStatus"
      }
    },
    {
      "type": "LOG",
      "comment": "Debug: Log that a perceptible event was processed.",
      "parameters": {
        "message": "Perceptible event (Type: {event.payload.perceptionType}) processed for location {event.payload.locationId}. Description: '{event.payload.descriptionText}'. Service status: {context.perceptionUpdateServiceStatus}",
        "level": "debug"
      }
    }
  ]
}