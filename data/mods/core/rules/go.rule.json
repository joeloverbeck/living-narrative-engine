{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "handle_go_action",
  "comment": "Handles the 'core:go' action. It prioritizes a pre-resolved targetId from the event, but falls back to resolving a direction string if needed. It moves the actor, dispatches perceptible events, and ends the turn.",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "core:event-is-action-go"
  },
  "actions": [
    {
      "type": "QUERY_COMPONENTS",
      "comment": "Fetch actor name and position components in bulk.",
      "parameters": {
        "entity_ref": "actor",
        "pairs": [
          {
            "component_type": "core:name",
            "result_variable": "actorNameComponent"
          },
          {
            "component_type": "core:position",
            "result_variable": "actorPositionComponentPreMove"
          }
        ]
      }
    },
    {
      "type": "IF",
      "comment": "Step 2: Proceed only if the actor has the required components.",
      "parameters": {
        "condition": {
          "and": [
            { "var": "context.actorNameComponent" },
            { "var": "context.actorPositionComponentPreMove" }
          ]
        },
        "then_actions": [
          {
            "type": "QUERY_COMPONENT",
            "comment": "Fetch the name of the current location (pre-move).",
            "parameters": {
              "entity_ref": {
                "entityId": "{context.actorPositionComponentPreMove.locationId}"
              },
              "component_type": "core:name",
              "result_variable": "currentLocationNameComponentPreMove"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "currentTimestamp"
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Step 3.1: Initialize resolved target with pre-resolved targetId from the event payload, if it exists.",
            "parameters": {
              "variable_name": "resolvedTargetLocationId",
              "value": "{event.payload.targetId}"
            }
          },
          {
            "type": "IF",
            "comment": "Step 3.2: If no pre-resolved target was found, fall back to resolving the direction string.",
            "parameters": {
              "condition": {
                "==": [
                  {
                    "var": "context.resolvedTargetLocationId"
                  },
                  null
                ]
              },
              "then_actions": [
                {
                  "type": "RESOLVE_DIRECTION",
                  "comment": "Turn a direction string into a valid target location ID.",
                  "parameters": {
                    "current_location_id": "{context.actorPositionComponentPreMove.locationId}",
                    "direction": "{event.payload.direction}",
                    "result_variable": "resolvedTargetLocationId"
                  }
                }
              ]
            }
          },
          {
            "type": "IF",
            "comment": "Step 4: Check if a valid target location was found (either pre-resolved or via direction).",
            "parameters": {
              "condition": {
                "!=": [
                  {
                    "var": "context.resolvedTargetLocationId"
                  },
                  null
                ]
              },
              "then_actions": [
                {
                  "type": "QUERY_COMPONENT",
                  "comment": "Fetch the name of the new target location for messaging.",
                  "parameters": {
                    "entity_ref": {
                      "entityId": "{context.resolvedTargetLocationId}"
                    },
                    "component_type": "core:name",
                    "result_variable": "targetLocationNameComponent"
                  }
                },
                {
                  "type": "DISPATCH_PERCEPTIBLE_EVENT",
                  "comment": "Dispatch perceptible event for actor leaving current location.",
                  "parameters": {
                    "location_id": "{context.actorPositionComponentPreMove.locationId}",
                    "description_text": "{context.actorNameComponent.text} leaves to go to {context.targetLocationNameComponent.text}.",
                    "perception_type": "character_exit",
                    "actor_id": "{event.payload.actorId}",
                    "target_id": null,
                    "involved_entities": []
                  }
                },
                {
                  "type": "MODIFY_COMPONENT",
                  "comment": "Update the actor's locationId to the new target location.",
                  "parameters": {
                    "entity_ref": "actor",
                    "component_type": "core:position",
                    "field": "locationId",
                    "mode": "set",
                    "value": "{context.resolvedTargetLocationId}"
                  }
                },
                {
                  "type": "DISPATCH_EVENT",
                  "comment": "Dispatch the primary 'entity_moved' event for other systems.",
                  "parameters": {
                    "eventType": "core:entity_moved",
                    "payload": {
                      "eventName": "core:entity_moved",
                      "entityId": "{event.payload.actorId}",
                      "previousLocationId": "{context.actorPositionComponentPreMove.locationId}",
                      "currentLocationId": "{context.resolvedTargetLocationId}",
                      "direction": "{event.payload.direction}",
                      "originalCommand": "{event.payload.originalInput}"
                    }
                  }
                },
                {
                  "type": "DISPATCH_PERCEPTIBLE_EVENT",
                  "comment": "Dispatch perceptible event for actor entering new location.",
                  "parameters": {
                    "location_id": "{context.resolvedTargetLocationId}",
                    "description_text": "{context.actorNameComponent.text} arrives from {context.currentLocationNameComponentPreMove.text}.",
                    "perception_type": "character_enter",
                    "actor_id": "{event.payload.actorId}",
                    "target_id": null,
                    "involved_entities": []
                  }
                },
                {
                  "type": "SET_VARIABLE",
                  "comment": "Prepare success message for the UI.",
                  "parameters": {
                    "variable_name": "successMessage",
                    "value": "{context.actorNameComponent.text} arrives at {context.targetLocationNameComponent.text}."
                  }
                },
                { "macro": "core:displaySuccessAndEndTurn" }
              ],
              "else_actions": [
                {
                  "type": "DISPATCH_EVENT",
                  "comment": "Dispatch a UI event indicating the failed move.",
                  "parameters": {
                    "eventType": "core:display_failed_action_result",
                    "payload": {
                      "message": "{context.actorNameComponent.text} tries to go {event.payload.direction}, but cannot find a path or the way is blocked."
                    }
                  }
                },
                {
                  "type": "END_TURN",
                  "comment": "End the turn after a failed move.",
                  "parameters": {
                    "entityId": "{event.payload.actorId}",
                    "success": false,
                    "error": {
                      "message": "Failed to move: No valid target location could be determined."
                    }
                  }
                }
              ]
            }
          }
        ],
        "else_actions": [
          {
            "type": "END_TURN",
            "comment": "Action failed because actor is missing required components.",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": false,
              "error": {
                "message": "Actor is missing required components for movement."
              }
            }
          }
        ]
      }
    }
  ]
}
