{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "handle_stop_following",
  "comment": "Handles the 'core:stop_following' action. Removes the follower's component, updates the old leader's cache, dispatches a conditional perceptible event, and ends the turn.",
  "event_type": "core:attempt_action",
  "condition": {
    "condition_ref": "core:event-is-action-stop-following"
  },
  "actions": [
    {
      "type": "QUERY_COMPONENT",
      "comment": "Step 1: Attempt to get the actor's core:following component.",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:following",
        "result_variable": "oldFollowingData",
        "missing_value": null
      }
    },
    {
      "type": "IF",
      "comment": "Step 2: Proceed only if the actor has the 'core:following' component.",
      "parameters": {
        "condition": {
          "var": "context.oldFollowingData"
        },
        "then_actions": [
          {
            "type": "BREAK_FOLLOW_RELATION",
            "parameters": {
              "follower_id": "{event.payload.actorId}"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "currentTimestamp"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor's position for co-location check.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPosition"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor's name for the event description.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:name",
              "result_variable": "actorName"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get old leader's name for the event description.",
            "parameters": {
              "entity_ref": {
                "entityId": "{context.oldFollowingData.leaderId}"
              },
              "component_type": "core:name",
              "result_variable": "oldLeaderName"
            }
          },
          {
            "type": "IF_CO_LOCATED",
            "comment": "Only dispatch a perceptible event if the actor and old leader are in the same location.",
            "parameters": {
              "entity_ref_a": "actor",
              "entity_ref_b": {
                "entityId": "{context.oldFollowingData.leaderId}"
              },
              "then_actions": [
                {
                  "type": "DISPATCH_PERCEPTIBLE_EVENT",
                  "comment": "This event is for other characters to observe.",
                  "parameters": {
                    "location_id": "{context.actorPosition.locationId}",
                    "description_text": "{context.actorName.text} is no longer following {context.oldLeaderName.text}.",
                    "perception_type": "state_change_observable",
                    "actor_id": "{event.payload.actorId}",
                    "target_id": "{context.oldFollowingData.leaderId}",
                    "involved_entities": []
                  }
                }
              ]
            }
          },
          {
            "type": "SET_VARIABLE",
            "comment": "Prepare success message for the UI.",
            "parameters": {
              "variable_name": "successMessage",
              "value": "{context.actorName.text} stops following {context.oldLeaderName.text}."
            }
          },
          { "macro": "core:displaySuccessAndEndTurn" }
        ],
        "else_actions": [
          {
            "type": "SET_VARIABLE",
            "parameters": {
              "variable_name": "logMessage",
              "value": "You are not following anyone."
            }
          },
          { "macro": "core:logFailureAndEndTurn" }
        ]
      }
    }
  ]
}
