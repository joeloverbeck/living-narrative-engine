{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "handle_stop_following",
  "comment": "Handles the 'core:stop_following' action. Removes the follower's component, updates the old leader's cache, dispatches a conditional perceptible event, and ends the turn.",
  "event_type": "core:attempt_action",
  "condition": {
    "==": [
      {
        "var": "event.payload.actionId"
      },
      "core:stop_following"
    ]
  },
  "actions": [
    {
      "type": "HAS_COMPONENT",
      "comment": "Step 1: Check if the actor is actually following anyone. This is a critical guard.",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:following",
        "result_variable": "isCurrentlyFollowing"
      }
    },
    {
      "type": "IF",
      "comment": "Step 2: Proceed only if the actor has the 'core:following' component.",
      "parameters": {
        "condition": {
          "var": "context.isCurrentlyFollowing"
        },
        "then_actions": [
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get the current leader's ID for later use before removing the component.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:following",
              "result_variable": "oldFollowingData"
            }
          },
          {
            "type": "REMOVE_COMPONENT",
            "comment": "Authoritatively remove the following relationship from the actor.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:following"
            }
          },
          {
            "type": "MODIFY_ARRAY_FIELD",
            "comment": "Remove the actor from the old leader's 'core:leading' component followers list.",
            "parameters": {
              "entity_ref": {
                "entityId": "{context.oldFollowingData.leaderId}"
              },
              "component_type": "core:leading",
              "field": "followers",
              "mode": "remove_by_value",
              "value": "{event.payload.actorId}"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "currentTimestamp"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor's position for co-location check.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPosition"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get actor's name for the event description.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:name",
              "result_variable": "actorName"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get old leader's position for co-location check.",
            "parameters": {
              "entity_ref": {
                "entityId": "{context.oldFollowingData.leaderId}"
              },
              "component_type": "core:position",
              "result_variable": "oldLeaderPosition"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Get old leader's name for the event description.",
            "parameters": {
              "entity_ref": {
                "entityId": "{context.oldFollowingData.leaderId}"
              },
              "component_type": "core:name",
              "result_variable": "oldLeaderName"
            }
          },
          {
            "type": "IF",
            "comment": "Only dispatch a perceptible event if the actor and old leader are in the same location.",
            "parameters": {
              "condition": {
                "==": [
                  {
                    "var": "context.actorPosition.locationId"
                  },
                  {
                    "var": "context.oldLeaderPosition.locationId"
                  }
                ]
              },
              "then_actions": [
                {
                  "type": "DISPATCH_EVENT",
                  "comment": "This event is for other characters to observe.",
                  "parameters": {
                    "eventType": "core:perceptible_event",
                    "payload": {
                      "eventName": "core:perceptible_event",
                      "timestamp": "{context.currentTimestamp}",
                      "locationId": "{context.actorPosition.locationId}",
                      "descriptionText": "{context.actorName.text} is no longer following {context.oldLeaderName.text}.",
                      "perceptionType": "state_change_observable",
                      "actorId": "{event.payload.actorId}",
                      "targetId": "{context.oldFollowingData.leaderId}",
                      "involvedEntities": []
                    }
                  }
                }
              ]
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "Signal to the Turn Manager that the actor's turn is over.",
            "parameters": {
              "eventType": "core:turn_ended",
              "payload": {
                "entityId": "{event.payload.actorId}",
                "success": true
              }
            }
          }
        ],
        "else_actions": [
          {
            "type": "DISPATCH_EVENT",
            "comment": "Inform the UI that the action failed because the actor wasn't following anyone.",
            "parameters": {
              "eventType": "core:display_failed_action_result",
              "payload": {
                "message": "You are not following anyone."
              }
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "End the turn unsuccessfully.",
            "parameters": {
              "eventType": "core:turn_ended",
              "payload": {
                "entityId": "{event.payload.actorId}",
                "success": false
              }
            }
          }
        ]
      }
    }
  ]
}
