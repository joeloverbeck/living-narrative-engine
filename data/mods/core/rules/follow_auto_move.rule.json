{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "core_follow_auto_move",
  "comment": "After a leader moves, sync their follower list and have any co-located followers attempt to follow.",
  "event_type": "core:entity_moved",
  "condition": {
    "!==": [
      {
        "var": "actor"
      },
      null
    ]
  },
  "actions": [
    {
      "type": "QUERY_SYSTEM_DATA",
      "comment": "First, authoritatively rebuild the leader's follower list.",
      "parameters": {
        "source_id": "LeaderListSyncService",
        "query_details": {
          "action": "rebuildFor",
          "leaderIds": ["{event.payload.entityId}"]
        },
        "result_variable": "leaderSyncResult"
      }
    },
    {
      "type": "IF",
      "comment": "Now that the cache is fresh, check if the moved entity is a leader with any followers.",
      "parameters": {
        "condition": {
          "and": [
            {
              "!==": [
                {
                  "var": "actor.components.core:leading"
                },
                null
              ]
            },
            {
              ">": [
                {
                  "var": "actor.components.core:leading.followers.length"
                },
                0
              ]
            }
          ]
        },
        "then_actions": [
          {
            "type": "SET_VARIABLE",
            "comment": "Use placeholder to resolve the complex path and store it in a simple variable for the loop.",
            "parameters": {
              "variable_name": "followerList",
              "value": "{actor.components.core:leading.followers}"
            }
          },
          {
            "type": "FOR_EACH",
            "comment": "For each follower, if they were in the same location as the leader, have them attempt to follow.",
            "parameters": {
              "collection": "context.followerList",
              "item_variable": "followerId",
              "actions": [
                {
                  "type": "QUERY_COMPONENT",
                  "comment": "Get the follower's current position.",
                  "parameters": {
                    "entity_ref": {
                      "entityId": "{context.followerId}"
                    },
                    "component_type": "core:position",
                    "result_variable": "followerPos"
                  }
                },
                {
                  "type": "DISPATCH_EVENT",
                  "comment": "Make the follower attempt to move in the same direction.",
                  "condition": {
                    "==": [
                      {
                        "var": "context.followerPos.locationId"
                      },
                      {
                        "var": "event.payload.previousLocationId"
                      }
                    ]
                  },
                  "parameters": {
                    "eventType": "core:attempt_action",
                    "payload": {
                      "eventName": "core:attempt_action",
                      "actorId": "{context.followerId}",
                      "actionId": "core:go",
                      "direction": "{event.payload.direction}",
                      "originalInput": "{event.payload.originalCommand}"
                    }
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
