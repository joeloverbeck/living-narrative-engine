{
  "$schema": "http://example.com/schemas/rule.schema.json",
  "rule_id": "core_handle_follow",
  "comment": "Checks for follow cycles, then adds core:following to the actor, ensures core:leading exists on the leader, updates follower lists, emits a perceptible ‘follow’ event, and informs the UI.",
  "event_type": "core:attempt_action",
  "condition": {
    "==": [
      {
        "var": "event.payload.actionId"
      },
      "core:follow"
    ]
  },
  "actions": [
    {
      "type": "CHECK_FOLLOW_CYCLE",
      "comment": "Step 1: Check if this follow action would create a cycle.",
      "parameters": {
        "follower_id": "{event.payload.actorId}",
        "leader_id": "{event.payload.targetId}",
        "result_variable": "cycleCheck"
      }
    },
    {
      "type": "IF",
      "comment": "Step 2.A: If a cycle is detected, reject the action.",
      "parameters": {
        "condition": {
          "var": "context.cycleCheck.cycleDetected"
        },
        "then_actions": [
          {
            "type": "DISPATCH_EVENT",
            "comment": "Dispatch a decoupled event to the UI indicating the failure.",
            "parameters": {
              "eventType": "core:display_error",
              "payload": {
                "message": "You cannot follow {target.name}; this would create a follow cycle (e.g. A follows B, B follows A)."
              }
            }
          },
          {
            "type": "END_TURN",
            "comment": "Signal to the Turn Manager that the actor's turn is over (and was unsuccessful).",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": false
            }
          }
        ]
      }
    },
    {
      "type": "IF",
      "comment": "Step 2.B: If NO cycle is detected, proceed with the follow action.",
      "parameters": {
        "condition": {
          "not": {
            "var": "context.cycleCheck.cycleDetected"
          }
        },
        "then_actions": [
          {
            "type": "ESTABLISH_FOLLOW_RELATION",
            "parameters": {
              "follower_id": "{event.payload.actorId}",
              "leader_id": "{event.payload.targetId}"
            }
          },
          {
            "type": "GET_NAME",
            "parameters": {
              "entity_ref": "actor",
              "result_variable": "followerName"
            }
          },
          {
            "type": "GET_NAME",
            "parameters": {
              "entity_ref": {
                "entityId": "{event.payload.targetId}"
              },
              "result_variable": "leaderName"
            }
          },
          {
            "type": "QUERY_COMPONENT",
            "comment": "Need the location to tag the perceptible event.",
            "parameters": {
              "entity_ref": "actor",
              "component_type": "core:position",
              "result_variable": "actorPos"
            }
          },
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "nowIso"
            }
          },
          {
            "type": "DISPATCH_PERCEPTIBLE_EVENT",
            "comment": "Human-visible log: “<Follower> has decided to follow <Leader>”.",
            "parameters": {
              "location_id": "{context.actorPos.locationId}",
              "description_text": "{context.followerName} has decided to follow {context.leaderName}.",
              "perception_type": "action_target_general",
              "actor_id": "{event.payload.actorId}",
              "target_id": "{event.payload.targetId}",
              "involved_entities": []
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "Dispatch a decoupled event to the UI indicating the successful follow action.",
            "parameters": {
              "eventType": "core:display_successful_action_result",
              "payload": {
                "message": "{context.followerName} is now following {context.leaderName}."
              }
            }
          },
          {
            "type": "END_TURN",
            "comment": "Dispatch an event to indicate the actor's turn has ended after successful follow attempt.",
            "parameters": {
              "entityId": "{event.payload.actorId}",
              "success": true
            }
          }
        ]
      }
    }
  ]
}
