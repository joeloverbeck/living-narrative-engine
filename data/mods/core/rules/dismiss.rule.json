{
  "$schema": "http://example.com/schemas/rule.json",
  "rule_id": "handle_dismiss",
  "comment": "Handles the 'core:dismiss' action. Removes the component from the TARGET, updates the ACTOR's (leader's) cache, dispatches a conditional perceptible event and a success UI event, and ends the turn.",
  "event_type": "core:attempt_action",
  "condition": {
    "==": [
      {
        "var": "event.payload.actionId"
      },
      "core:dismiss"
    ]
  },
  "actions": [
    {
      "type": "REMOVE_COMPONENT",
      "comment": "Step 1: Authoritatively remove the following relationship from the TARGET entity.",
      "parameters": {
        "entity_ref": "target",
        "component_type": "core:following"
      }
    },
    {
      "type": "MODIFY_ARRAY_FIELD",
      "comment": "Step 2: Remove the follower from the ACTOR's (leader's) 'core:leading' component.",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:leading",
        "field": "followers",
        "mode": "remove_by_value",
        "value": "{event.payload.targetId}"
      }
    },
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "actor",
        "result_variable": "actorName"
      }
    },
    {
      "type": "GET_NAME",
      "parameters": {
        "entity_ref": "target",
        "result_variable": "targetName"
      }
    },
    {
      "type": "QUERY_COMPONENT",
      "comment": "Get actor's position",
      "parameters": {
        "entity_ref": "actor",
        "component_type": "core:position",
        "result_variable": "actorPosition"
      }
    },
    {
      "type": "IF_CO_LOCATED",
      "comment": "Only dispatch a perceptible event if the leader and follower are in the same location.",
      "parameters": {
        "entity_ref_a": "actor",
        "entity_ref_b": "target",
        "then_actions": [
          {
            "type": "GET_TIMESTAMP",
            "comment": "Get the current ISO timestamp for perception logging.",
            "parameters": {
              "result_variable": "nowIso"
            }
          },
          {
            "type": "DISPATCH_EVENT",
            "comment": "This event is for other characters to observe.",
            "parameters": {
              "eventType": "core:perceptible_event",
              "payload": {
                "eventName": "core:perceptible_event",
                "locationId": "{context.actorPosition.locationId}",
                "descriptionText": "{context.actorName} has dismissed {context.targetName} from their service.",
                "timestamp": "{context.nowIso}",
                "perceptionType": "state_change_observable",
                "actorId": "{event.payload.actorId}",
                "targetId": "{event.payload.targetId}",
                "involvedEntities": []
              }
            }
          }
        ]
      }
    },
    {
      "type": "DISPATCH_EVENT",
      "comment": "Step 3: Notify the actor's client that the action was successful.",
      "parameters": {
        "eventType": "core:display_successful_action_result",
        "payload": {
          "entityId": "{event.payload.actorId}",
          "message": "{context.actorName} dismisses {context.targetName}."
        }
      }
    },
    {
      "type": "END_TURN",
      "comment": "Step 4: Signal to the Turn Manager that the actor's turn is over.",
      "parameters": {
        "entityId": "{event.payload.actorId}",
        "success": true
      }
    }
  ]
}
