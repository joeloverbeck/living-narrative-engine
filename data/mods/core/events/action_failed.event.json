{
  "$schema": "http://example.com/schemas/event-definition.schema.json",
  "id": "core:action_failed",
  "description": "Fired when an action attempt fails, either due to validation logic, execution result, or an unexpected runtime error.",
  "payloadSchema": {
    "title": "Core: Action Failed Event Payload",
    "description": "Defines the payload structure for the 'core:action_failed' event.",
    "type": "object",
    "properties": {
      "actorId": {
        "type": "string",
        "description": "The ID of the entity attempting the action."
      },
      "actionId": {
        "oneOf": [
          { "type": "string" },
          { "type": "null" }
        ],
        "description": "The ID of the action that failed or was being attempted. Can be null if the failure occurred before the specific action was fully resolved (e.g., during context validation)."
      },
      "commandString": {
        "type": "string",
        "description": "The original command string that led to this action attempt."
      },
      "error": {
        "type": "string",
        "description": "A user-friendly message describing the failure (e.g., 'You cannot move in that direction', 'Target is out of range', 'An internal error occurred')."
      },
      "isExecutionError": {
        "type": "boolean",
        "description": "If true, indicates the failure was due to an unexpected runtime exception during action execution. If false, the failure was a logical one (e.g., validation failed, ActionResult.success was false)."
      }
    },
    "required": [
      "actorId",
      "commandString",
      "error",
      "isExecutionError"
    ],
    "additionalProperties": false
  }
}