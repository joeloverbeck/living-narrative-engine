{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Operation object, representing a discrete step within a SystemRule's action sequence. Operations interact with the ECS framework (querying/modifying components, dispatching events), control the flow of execution (conditional logic), manage variables, query external system data, or interact with the UI. Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "type": "object",
  "$ref": "#/$defs/Operation",
  "$defs": {
    "Operation": {
      "type": "object",
      "description": "A single operation within an action sequence.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The identifier determining the type of operation and the expected structure of the 'parameters' object.",
          "enum": [
            "QUERY_COMPONENT",
            "MODIFY_COMPONENT",
            "ADD_COMPONENT",
            "REMOVE_COMPONENT",
            "DISPATCH_EVENT",
            "END_TURN",
            "IF",
            "FOR_EACH",
            "LOG",
            "SET_VARIABLE",
            "GET_TIMESTAMP",
            "GET_NAME",
            "RESOLVE_DIRECTION",
            "SYSTEM_MOVE_ENTITY",
            "REBUILD_LEADER_LIST_CACHE",
            "CHECK_FOLLOW_CYCLE",
            "ADD_PERCEPTION_LOG_ENTRY",
            "HAS_COMPONENT",
            "QUERY_ENTITIES",
            "MODIFY_ARRAY_FIELD",
            "IF_CO_LOCATED",
            "MATH"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Optional. A human-readable description or note for developers or modders; ignored by the interpreter at runtime."
        },
        "condition": {
          "$ref": "./json-logic.schema.json#",
          "description": "Optional. If present, this operation only executes if the JSON-Logic condition evaluates to true."
        },
        "parameters": {
          "type": "object",
          "description": "Required. Container for parameters specific to the operation 'type'. The structure is validated conditionally based on the 'type' value."
        }
      },
      "required": ["type", "parameters"],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_COMPONENT"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QueryComponentParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_COMPONENT"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyComponentParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ADD_COMPONENT"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/AddComponentParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "REMOVE_COMPONENT"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/RemoveComponentParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DISPATCH_EVENT"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/DispatchEventParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "END_TURN" }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/EndTurnParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "IF"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/IfParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "LOG"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/LogParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SET_VARIABLE"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/SetVariableParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "FOR_EACH"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ForEachParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SYSTEM_MOVE_ENTITY"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/SystemMoveEntityParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "GET_TIMESTAMP"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/GetTimestampParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "GET_NAME" }
            }
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/GetNameParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "RESOLVE_DIRECTION"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ResolveDirectionParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "REBUILD_LEADER_LIST_CACHE"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/RebuildLeaderListCacheParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "CHECK_FOLLOW_CYCLE"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/CheckFollowCycleParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ADD_PERCEPTION_LOG_ENTRY"
              }
            },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/AddPerceptionLogEntryParameters"
              }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_ENTITIES"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QueryEntitiesParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "HAS_COMPONENT"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/HasComponentParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_ARRAY_FIELD"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyArrayFieldParameters"
              }
            }
          }
        },
        {
          "if": {
            "properties": {
              "type": { "const": "IF_CO_LOCATED" }
            }
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/IfCoLocatedParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MATH"
              }
            }
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/MathParameters"
              }
            }
          }
        }
      ]
    },
    "SystemMoveEntityParameters": {
      "type": "object",
      "description": "Parameters for the SYSTEM_MOVE_ENTITY operation, which directly moves an entity to a new location without consuming a turn.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. The entity to move."
        },
        "target_location_id": {
          "type": "string",
          "description": "Required. The namespaced ID of the location to move the entity to. Can be a placeholder string like '{event.payload.currentLocationId}'."
        }
      },
      "required": ["entity_ref", "target_location_id"],
      "additionalProperties": false
    },
    "QueryComponentParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": ["entity_ref", "component_type", "result_variable"],
      "additionalProperties": false
    },
    "ModifyComponentParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component (mode \"set\" only—use a MATH + SET_VARIABLE combo for arithmetic).",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "enum": ["set"],
          "default": "set"
        },
        "value": {}
      },
      "required": ["entity_ref", "component_type", "field", "mode", "value"],
      "additionalProperties": false
    },
    "AddComponentParameters": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "value": {
          "type": "object",
          "minProperties": 0
        }
      },
      "required": ["entity_ref", "component_type", "value"],
      "additionalProperties": false
    },
    "RemoveComponentParameters": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        }
      },
      "required": ["entity_ref", "component_type"],
      "additionalProperties": false
    },
    "DispatchEventParameters": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "payload": {
          "type": "object",
          "default": {}
        }
      },
      "required": ["eventType"],
      "additionalProperties": false
    },
    "EndTurnParameters": {
      "type": "object",
      "description": "Parameters for the END_TURN operation, dispatching core:turn_ended.",
      "properties": {
        "entityId": {
          "type": "string",
          "minLength": 1
        },
        "success": {
          "type": "boolean"
        },
        "error": {
          "type": "object"
        }
      },
      "required": ["entityId", "success"],
      "additionalProperties": false
    },
    "IfParameters": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "./json-logic.schema.json#"
        },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Operation"
          }
        },
        "else_actions": {
          "type": "array",
          "default": [],
          "items": {
            "$ref": "#/$defs/Operation"
          }
        }
      },
      "required": ["condition", "then_actions"],
      "additionalProperties": false
    },
    "IfCoLocatedParameters": {
      "type": "object",
      "description": "Parameters for the IF_CO_LOCATED operation. Executes different actions based on shared location.",
      "properties": {
        "entity_ref_a": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "entity_ref_b": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Operation" }
        },
        "else_actions": {
          "type": "array",
          "items": { "$ref": "#/$defs/Operation" },
          "default": []
        }
      },
      "required": ["entity_ref_a", "entity_ref_b", "then_actions"],
      "additionalProperties": false
    },
    "LogParameters": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "enum": ["debug", "info", "warn", "error"],
          "default": "info"
        }
      },
      "required": ["message"],
      "additionalProperties": false
    },
    "SetVariableParameters": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {}
      },
      "required": ["variable_name", "value"],
      "additionalProperties": false
    },
    "ForEachParameters": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": {
          "type": "string"
        },
        "item_variable": {
          "type": "string"
        },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/Operation"
          }
        }
      },
      "required": ["collection", "item_variable", "actions"],
      "additionalProperties": false
    },
    "GetTimestampParameters": {
      "type": "object",
      "properties": {
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": ["result_variable"],
      "additionalProperties": false
    },
    "GetNameParameters": {
      "type": "object",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        },
        "default_value": {
          "type": "string"
        }
      },
      "required": ["entity_ref", "result_variable"],
      "additionalProperties": false
    },
    "ResolveDirectionParameters": {
      "type": "object",
      "properties": {
        "current_location_id": {
          "type": "string",
          "minLength": 1
        },
        "direction": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1
        }
      },
      "required": ["current_location_id", "direction", "result_variable"],
      "additionalProperties": false
    },
    "RebuildLeaderListCacheParameters": {
      "type": "object",
      "description": "Rebuilds the core:leading cache for specified leader IDs.",
      "properties": {
        "leaderIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "description": "Array of leader entity IDs."
        }
      },
      "required": ["leaderIds"],
      "additionalProperties": false
    },
    "CheckFollowCycleParameters": {
      "type": "object",
      "description": "Parameters for the CHECK_FOLLOW_CYCLE operation. Checks if following would create a cycle.",
      "properties": {
        "follower_id": {
          "type": "string",
          "minLength": 1
        },
        "leader_id": {
          "type": "string",
          "minLength": 1
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": ["follower_id", "leader_id", "result_variable"],
      "additionalProperties": false
    },
    "AddPerceptionLogEntryParameters": {
      "type": "object",
      "properties": {
        "location_id": {
          "type": "string",
          "minLength": 1
        },
        "entry": {
          "type": "object",
          "minProperties": 1
        },
        "originating_actor_id": {
          "type": "string"
        }
      },
      "required": ["location_id", "entry"],
      "additionalProperties": false
    },
    "QueryEntitiesParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_ENTITIES operation. Finds entities matching a set of filters.",
      "properties": {
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the resulting array of entity IDs in.",
          "minLength": 1
        },
        "limit": {
          "type": "integer",
          "description": "Optional. The maximum number of entity IDs to return.",
          "minimum": 1
        },
        "filters": {
          "type": "array",
          "description": "Required. An array of filter conditions. An entity must pass all filters to be included.",
          "minItems": 1,
          "items": {
            "type": "object",
            "minProperties": 1,
            "maxProperties": 1,
            "properties": {
              "by_location": {
                "type": "string",
                "description": "Filter for entities in a specific location ID.",
                "minLength": 1
              },
              "with_component": {
                "$ref": "./common.schema.json#/definitions/namespacedId",
                "description": "Filter for entities that have a specific component type."
              },
              "with_component_data": {
                "type": "object",
                "description": "Advanced filter for entities based on data within one of their components.",
                "properties": {
                  "component_type": {
                    "$ref": "./common.schema.json#/definitions/namespacedId"
                  },
                  "condition": {
                    "$ref": "./json-logic.schema.json#"
                  }
                },
                "required": ["component_type", "condition"]
              }
            }
          }
        }
      },
      "required": ["result_variable", "filters"],
      "additionalProperties": false
    },
    "HasComponentParameters": {
      "type": "object",
      "description": "Parameters for the HAS_COMPONENT operation. Checks if an entity has a component.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The context variable to store the boolean result (true/false) in.",
          "minLength": 1
        }
      },
      "required": ["entity_ref", "component_type", "result_variable"],
      "additionalProperties": false
    },
    "ModifyArrayFieldParameters": {
      "type": "object",
      "description": "Parameters for MODIFY_ARRAY_FIELD. Atomically modifies an array within a component.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "field": {
          "type": "string",
          "description": "Required. Dot-separated path to the array field within the component.",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "description": "The operation to perform: 'push' adds a value, 'remove_by_value' removes the first matching value, 'pop' removes the last value.",
          "enum": ["push", "remove_by_value", "pop"]
        },
        "value": {
          "description": "The value to add or remove. Required for 'push' and 'remove_by_value'."
        },
        "result_variable": {
          "type": "string",
          "description": "Optional. For 'pop', stores the removed item. For others, can store the modified array.",
          "minLength": 1
        }
      },
      "required": ["entity_ref", "component_type", "field", "mode"],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "mode": {
                "const": "push"
              }
            }
          },
          "then": {
            "required": ["value"]
          }
        },
        {
          "if": {
            "properties": {
              "mode": {
                "const": "remove_by_value"
              }
            }
          },
          "then": {
            "required": ["value"]
          }
        }
      ]
    },
    "MathParameters": {
      "type": "object",
      "description": "Parameters for the MATH operation. Performs a calculation and stores the result.",
      "properties": {
        "result_variable": {
          "type": "string",
          "minLength": 1
        },
        "expression": {
          "$ref": "#/$defs/MathExpression"
        }
      },
      "required": ["result_variable", "expression"]
    },
    "MathOperand": {
      "description": "An operand for a math expression. Can be a number, a variable reference, or a nested expression.",
      "oneOf": [
        {
          "type": "number"
        },
        {
          "type": "object",
          "properties": {
            "var": {
              "type": "string"
            }
          },
          "required": ["var"],
          "additionalProperties": false
        },
        {
          "$ref": "#/$defs/MathExpression"
        }
      ]
    },
    "MathExpression": {
      "type": "object",
      "description": "A recursive mathematical expression.",
      "properties": {
        "operator": {
          "type": "string",
          "enum": ["add", "subtract", "multiply", "divide", "modulo"]
        },
        "operands": {
          "type": "array",
          "description": "An array of two operands for the operation.",
          "items": {
            "$ref": "#/$defs/MathOperand"
          },
          "minItems": 2,
          "maxItems": 2
        }
      },
      "required": ["operator", "operands"]
    }
  }
}
