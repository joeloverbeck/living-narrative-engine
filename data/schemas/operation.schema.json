{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Operation object, representing a discrete step within a SystemRule's action sequence. Operations interact with the ECS framework (querying/modifying components, dispatching events) or control the flow of execution (conditional logic). Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "type": "object",
  "$ref": "#/$defs/Operation",
  "$defs": {
    "Operation": {
      "type": "object",
      "description": "A single operation within an action sequence.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The identifier determining the type of operation and the expected structure of the 'parameters' object.",
          "enum": [
            "QUERY_COMPONENT",
            "MODIFY_COMPONENT",
            "DISPATCH_EVENT",
            "IF",
            "LOG"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Optional. A human-readable description or note for developers or modders; ignored by the interpreter at runtime."
        },
        "parameters": {
          "type": "object",
          "description": "Required. Container for parameters specific to the operation 'type'. The structure is validated conditionally based on the 'type' value."
        }
      },
      "required": [
        "type",
        "parameters"
      ],
      "additionalProperties": false,
      "$comment": "Using allOf with if/then for conditional validation based on 'type', as recommended for better error reporting and potential performance with Ajv. Strict top-level properties enforced by additionalProperties: false.",
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QueryComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DISPATCH_EVENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/DispatchEventParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "IF"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/IfParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "LOG"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/LogParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        }
      ],
      "examples": [
        {
          "type": "QUERY_COMPONENT",
          "comment": "Get the Health component of the actor entity",
          "parameters": {
            "entity_ref": "actor",
            "component_type": "core:health",
            "result_variable": "actorHealth"
          }
        },
        {
          "type": "QUERY_COMPONENT",
          "comment": "Get the Inventory component of a specific chest entity",
          "parameters": {
            "entity_ref": { "entityId": "chest:treasure_01" },
            "component_type": "game:inventory",
            "result_variable": "chestContents"
          }
        },
        {
          "type": "MODIFY_COMPONENT",
          "parameters": {
            "entity_ref": "target",
            "component_type": "game:status_effect",
            "operation": "add",
            "data": {
              "duration": 10,
              "effect_id": "poison",
              "potency": 2
            }
          }
        },
        {
          "type": "DISPATCH_EVENT",
          "parameters": {
            "eventType": "event:quest_updated",
            "payload": {
              "questId": {
                "source": "event",
                "path": "payload.questId"
              },
              "newState": {
                "source": "literal",
                "type": "string",
                "value": "completed"
              },
              "completedBy": {
                "source": "entity",
                "ref": "actor",
                "path": "id"
              }
            }
          }
        },
        {
          "type": "IF",
          "parameters": {
            "condition": {
              "==": [
                {
                  "var": "context.targetHealth.current"
                },
                0
              ]
            },
            "then_actions": [
              {
                "type": "DISPATCH_EVENT",
                "parameters": {
                  "eventType": "event:entity_destroyed",
                  "payload": {
                    "entityId": {
                      "source": "entity",
                      "ref": "target",
                      "path": "id"
                    }
                  }
                }
              }
            ],
            "else_actions": [
              {
                "type": "LOG",
                "parameters": {
                  "message": "Target {target.id} still alive with {context.targetHealth.current} HP.",
                  "level": "info"
                }
              }
            ]
          }
        },
        {
          "type": "LOG",
          "parameters": {
            "message": "Actor {actor.id} used item {event.payload.itemId}.",
            "level": "debug"
          }
        }
      ]
    },
    "QueryComponentParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
         "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the entity whose component is being queried. Resolved by the handler (e.g., 'actor', 'target', 'specific-id', {entityId: 'specific-id'})."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to retrieve (e.g., 'core:position', 'game:inventory')."
        },
        "result_variable": {
          "type": "string",
          "description": "Required. The name of the variable within the rule's execution context (`evaluationContext.context`) where the fetched component data (or undefined if not found) will be stored. Must be a non-empty string without leading/trailing whitespace.",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false,
      "$comment": "Ensures no extraneous properties are added to query parameters."
    },
    "ModifyComponentParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the target entity for the modification. Resolved by the handler."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to add, remove, or update."
        },
        "operation": {
          "type": "string",
          "description": "Required. Defines the modification type.",
          "enum": [
            "add",
            "remove",
            "update"
          ]
        },
        "data": {
          "type": "object",
          "description": "Component data. Required for 'add' and 'update' operations. Structure depends on the component_type. Values within can be literals or dynamically resolved via PayloadValueResolverService syntax.",
          "additionalProperties": true,
          "$comment": "Allows any valid component data structure. Validation against the specific component's schema should happen at runtime by the interpreter or EntityManager."
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "operation"
      ],
      "additionalProperties": false,
      "$comment": "Ensures no extraneous properties are added to modify parameters. The 'data' field is conditionally required based on 'operation', handled by implementation logic rather than schema complexity here, but specified in descriptions.",
      "allOf": [
        {
          "if": {
            "properties": {
              "operation": {
                "const": "add"
              }
            }
          },
          "then": {
            "required": [
              "data"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "operation": {
                "const": "update"
              }
            }
          },
          "then": {
            "required": [
              "data"
            ]
          }
        }
      ]
    },
    "DispatchEventParameters": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event directly via the dispatcher using the specified payload.",
      "properties": {
        "eventType": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the event to dispatch (e.g., 'event:damage_applied', 'ui:message_sent')."
        },
        "payload": {
          "type": "object",
          "description": "Optional. The data payload object for the event. Defaults to {} if omitted.",
          "default": {}
        }
      },
      "required": [
        "eventType"
      ],
      "additionalProperties": false
    },
    "IfParameters": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "./json-logic.schema.json#",
          "description": "Required. A JSON Logic object defining the condition to evaluate. Can access the same context as rule conditions (event, entities, query results)."
        },
        "then_actions": {
          "type": "array",
          "description": "Required. An array of Operation objects to execute sequentially if the condition is true.",
          "items": {
            "$ref": "#/$defs/Operation",
            "$comment": "Recursive reference to the Operation schema."
          },
          "minItems": 1
        },
        "else_actions": {
          "type": "array",
          "description": "Optional. An array of Operation objects to execute sequentially if the condition is false.",
          "items": {
            "$ref": "#/$defs/Operation",
            "$comment": "Recursive reference to the Operation schema."
          },
          "default": []
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false,
      "$comment": "Ensures no extraneous properties are added to IF parameters."
    },
    "LogParameters": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Required. The message template to log. Can contain placeholders (e.g., '{actor.id}', '{context.variableName}') resolved via PayloadValueResolverService.",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "description": "Optional. Specifies the logging level.",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false,
      "$comment": "Ensures no extraneous properties are added to log parameters."
    }
  }
}