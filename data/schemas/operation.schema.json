{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Operation object, representing a discrete step within a SystemRule's action sequence. Operations interact with the ECS framework (querying/modifying components, dispatching events), control the flow of execution (conditional logic), manage variables, query external system data, or interact with the UI. Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "type": "object",
  "$ref": "#/$defs/Operation",
  "$defs": {
    "Operation": {
      "type": "object",
      "description": "A single operation within an action sequence.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The identifier determining the type of operation and the expected structure of the 'parameters' object.",
          "enum": [
            "QUERY_COMPONENT",
            "MODIFY_COMPONENT",
            "ADD_COMPONENT",
            "REMOVE_COMPONENT",
            "DISPATCH_EVENT",
            "IF",
            "LOG",
            "MODIFY_DOM_ELEMENT",
            "APPEND_UI_MESSAGE",
            "SET_VARIABLE",
            "QUERY_SYSTEM_DATA"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Optional. A human-readable description or note for developers or modders; ignored by the interpreter at runtime."
        },
        "parameters": {
          "type": "object",
          "description": "Required. Container for parameters specific to the operation 'type'. The structure is validated conditionally based on the 'type' value."
        }
      },
      "required": [
        "type",
        "parameters"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QueryComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "ADD_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/AddComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "REMOVE_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/RemoveComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DISPATCH_EVENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/DispatchEventParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "IF"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/IfParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "LOG"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/LogParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_DOM_ELEMENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyDomElementParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "APPEND_UI_MESSAGE"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/AppendUiMessageParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "SET_VARIABLE"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/SetVariableParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_SYSTEM_DATA"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QuerySystemDataParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        }
      ],
      "examples": [
        {
          "type": "QUERY_COMPONENT",
          "comment": "Get the Health component of the actor entity",
          "parameters": {
            "entity_ref": "actor",
            "component_type": "core:health",
            "result_variable": "actorHealth"
          }
        },
        {
          "type": "MODIFY_COMPONENT",
          "comment": "Decrease the actor's current HP by 10",
          "parameters": {
            "entity_ref": "actor",
            "component_type": "core:health",
            "field": "current",
            "mode": "inc",
            "value": -10
          }
        },
        {
          "type": "ADD_COMPONENT",
          "comment": "Add a 'burning' status effect component to the target",
          "parameters": {
            "entity_ref": "target",
            "component_type": "effect:status",
            "value": {
              "id": "burning",
              "duration": 5,
              "damagePerTick": 2
            }
          }
        },
        {
          "type": "REMOVE_COMPONENT",
          "comment": "Remove the 'frozen' status effect from the target",
          "parameters": {
            "entity_ref": "target",
            "component_type": "effect:status_frozen"
          }
        },
        {
          "type": "DISPATCH_EVENT",
          "parameters": {
            "eventType": "event:quest_updated",
            "payload": {
              "questId": "{event.payload.questId}",
              "newState": "completed",
              "completedBy": "{actor.id}"
            }
          }
        },
        {
          "type": "MODIFY_DOM_ELEMENT",
          "comment": "Update the main title text",
          "parameters": {
            "selector": "#title-element",
            "property": "textContent",
            "value": "{event.payload.text}"
          }
        },
        {
          "type": "APPEND_UI_MESSAGE",
          "comment": "Append a message received from an event to the default output area.",
          "parameters": {
            "text": "You hear a strange noise from the {event.payload.direction}.",
            "message_type": "info"
          }
        },
        {
          "type": "APPEND_UI_MESSAGE",
          "comment": "Append an error message to a specific log panel.",
          "parameters": {
            "selector": "#error-log-panel",
            "text": "Error: {event.payload.errorMessage}",
            "message_type": "error",
            "allow_html": false
          }
        },
        {
          "type": "SET_VARIABLE",
          "comment": "Store the player's current gold amount in a variable",
          "parameters": {
            "variable_name": "playerGold",
            "value": "{actor.components['core:inventory'].gold}"
          }
        },
        {
          "type": "QUERY_SYSTEM_DATA",
          "comment": "Query the weather system for the current temperature",
          "parameters": {
            "source": "weather_system",
            "query": {
              "type": "get_current_temperature",
              "unit": "celsius"
            },
            "result_variable": "currentTemperature"
          }
        }
      ]
    },
    "QueryComponentParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the entity whose component is being queried."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to retrieve."
        },
        "result_variable": {
          "type": "string",
          "description": "Required. Variable name in evaluationContext.context where the result will be stored. Must not contain leading/trailing whitespace.",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "ModifyComponentParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Target entity for the modification."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. Namespaced ID of the component containing the field."
        },
        "field": {
          "type": "string",
          "description": "Required. Dot-separated path within the component to the field to modify.",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "description": "Required. 'set' replaces the value; 'inc' adds numeric delta.",
          "enum": [
            "set",
            "inc"
          ]
        },
        "value": {
          "description": "Required. The value to assign (for 'set') or numeric delta (for 'inc'). Placeholder resolution (using '{...}' syntax) may apply."
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "field",
        "mode",
        "value"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "mode": {
                "const": "inc"
              }
            },
            "required": [
              "mode"
            ]
          },
          "then": {
            "properties": {
              "value": {
                "type": "number",
                "description": "Required numeric delta for 'inc' mode. Placeholder resolution (using '{...}' syntax) may apply."
              }
            },
            "required": [
              "value"
            ]
          }
        }
      ]
    },
    "AddComponentParameters": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the entity to add the component to."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to add."
        },
        "value": {
          "type": "object",
          "description": "Required. The data object representing the component instance to add. Placeholder resolution (using '{...}' syntax) may apply within values.",
          "minProperties": 0
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "value"
      ],
      "additionalProperties": false
    },
    "RemoveComponentParameters": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the entity to remove the component from."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to remove."
        }
      },
      "required": [
        "entity_ref",
        "component_type"
      ],
      "additionalProperties": false
    },
    "DispatchEventParameters": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. Namespaced ID of the event to dispatch."
        },
        "payload": {
          "type": "object",
          "description": "Optional event payload object. Defaults to {} if omitted. Strings using '{...}' syntax are treated as placeholders resolved at runtime.",
          "default": {}
        }
      },
      "required": [
        "eventType"
      ],
      "additionalProperties": false,
      "$comment": "Placeholders (e.g., \"{actor.id}\", \"{event.payload.value}\") are resolved by DispatchEventHandler before dispatch."
    },
    "IfParameters": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "./json-logic.schema.json#",
          "description": "Required. JSON-Logic condition to evaluate. Variables from the evaluation context (e.g., results from previous operations) can be accessed using the 'var' operator."
        },
        "then_actions": {
          "type": "array",
          "description": "Required. Operations executed if the condition is true.",
          "items": {
            "$ref": "#/$defs/Operation"
          },
          "minItems": 1
        },
        "else_actions": {
          "type": "array",
          "description": "Optional. Operations executed if the condition is false.",
          "items": {
            "$ref": "#/$defs/Operation"
          },
          "default": []
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false
    },
    "LogParameters": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Required. Message template to log (can contain placeholders like {actor.id} or {variableName}).",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "description": "Optional logging level.",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    },
    "ModifyDomElementParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_DOM_ELEMENT operation. Modifies a property of a DOM element selected via CSS selector.",
      "properties": {
        "selector": {
          "type": "string",
          "description": "Required. A CSS selector string to identify the target DOM element(s). If multiple elements match, the behavior might depend on the handler implementation (e.g., modify first, modify all).",
          "minLength": 1
        },
        "property": {
          "type": "string",
          "description": "Required. The name of the DOM element property to modify (e.g., 'textContent', 'innerHTML', 'className', 'style.display', 'dataset.value'). Dot notation can be used for nested properties like 'style.color'.",
          "minLength": 1
        },
        "value": {
          "description": "Required. The new value to set for the specified property. Can be a literal value or use placeholder syntax (e.g., '{event.payload.someValue}', '{actor.id}', '{variableName}') which will be resolved at runtime."
        }
      },
      "required": [
        "selector",
        "property",
        "value"
      ],
      "additionalProperties": false
    },
    "AppendUiMessageParameters": {
      "type": "object",
      "description": "Parameters for the APPEND_UI_MESSAGE operation. Appends a formatted message to a UI container.",
      "properties": {
        "selector": {
          "type": "string",
          "description": "Optional. CSS selector for the container element to append the message to. Defaults to a pre-configured output area (e.g., '#outputDiv').",
          "default": "#outputDiv",
          "minLength": 1
        },
        "text": {
          "type": "string",
          "description": "Required. The message content. Supports placeholder resolution (e.g., '{event.payload.text}', '{variableName}').",
          "minLength": 1
        },
        "message_type": {
          "type": "string",
          "description": "Optional. The type hint for the message (e.g., 'info', 'error', 'combat', 'warning', 'success'). Used for styling (e.g., adding class 'message-{message_type}'). Supports placeholder resolution (e.g., '{event.payload.type}', '{messageClass}'). Defaults to 'info'.",
          "default": "info",
          "minLength": 1
        },
        "allow_html": {
          "type": "boolean",
          "description": "Optional. If true, treats the 'text' as raw HTML. If false (default), treats 'text' as plain text content for safety.",
          "default": false
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false
    },
    "SetVariableParameters": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "description": "Required. The name of the variable to set or update in the evaluation context. Must not contain leading/trailing whitespace.",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {
          "description": "Required. The value to assign to the variable. Can be any valid JSON type (string, number, boolean, object, array, null). Placeholder resolution (using '{...}' syntax) applies."
        }
      },
      "required": [
        "variable_name",
        "value"
      ],
      "additionalProperties": false
    },
    "QuerySystemDataParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_SYSTEM_DATA operation. Queries an external system or data source and stores the result in a context variable.",
      "properties": {
        "source_id": {
          "type": "string",
          "description": "Required. Identifier for the target system or data source (e.g., 'world_state', 'weather_api', 'player_stats_db').",
          "minLength": 1
        },
        "query_details": {
          "type": [
            "string",
            "object"
          ],
          "description": "Required. The query details to send to the source. Can be a simple string or a structured object, depending on the source's requirements. Placeholder resolution (using '{...}' syntax) may apply."
        },
        "result_variable": {
          "type": "string",
          "description": "Required. Variable name in evaluationContext.context where the query result will be stored. Must not contain leading/trailing whitespace.",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "source_id",
        "query_details",
        "result_variable"
      ],
      "additionalProperties": false
    }
  }
}