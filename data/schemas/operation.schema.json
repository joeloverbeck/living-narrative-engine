{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Operation object, representing a discrete step within a SystemRule's action sequence. Operations interact with the ECS framework (querying/modifying components, dispatching events), control the flow of execution (conditional logic), manage variables, query external system data, or interact with the UI. Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "type": "object",
  "$ref": "#/$defs/Operation",
  "$defs": {
    "Operation": {
      "type": "object",
      "description": "A single operation within an action sequence.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The identifier determining the type of operation and the expected structure of the 'parameters' object.",
          "enum": [
            "QUERY_COMPONENT",
            "MODIFY_COMPONENT",
            "ADD_COMPONENT",
            "REMOVE_COMPONENT",
            "DISPATCH_EVENT",
            "IF",
            "FOR_EACH",
            "LOG",
            "SET_VARIABLE",
            "QUERY_SYSTEM_DATA",
            "SYSTEM_MOVE_ENTITY"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Optional. A human-readable description or note for developers or modders; ignored by the interpreter at runtime."
        },
        "condition": {
          "$ref": "./json-logic.schema.json#",
          "description": "Optional. If present, this operation only executes if the JSON-Logic condition evaluates to true."
        },
        "parameters": {
          "type": "object",
          "description": "Required. Container for parameters specific to the operation 'type'. The structure is validated conditionally based on the 'type' value."
        }
      },
      "required": ["type", "parameters"],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "QUERY_COMPONENT" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/QueryComponentParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "MODIFY_COMPONENT" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/ModifyComponentParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "ADD_COMPONENT" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/AddComponentParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "REMOVE_COMPONENT" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/RemoveComponentParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "DISPATCH_EVENT" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/DispatchEventParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "IF" } },
            "required": ["type"]
          },
          "then": {
            "properties": { "parameters": { "$ref": "#/$defs/IfParameters" } },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "LOG" } },
            "required": ["type"]
          },
          "then": {
            "properties": { "parameters": { "$ref": "#/$defs/LogParameters" } },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "SET_VARIABLE" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/SetVariableParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "QUERY_SYSTEM_DATA" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/QuerySystemDataParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "FOR_EACH" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/ForEachParameters" }
            },
            "required": ["parameters"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "SYSTEM_MOVE_ENTITY" } },
            "required": ["type"]
          },
          "then": {
            "properties": {
              "parameters": { "$ref": "#/$defs/SystemMoveEntityParameters" }
            },
            "required": ["parameters"]
          }
        }
      ]
    },
    "SystemMoveEntityParameters": {
      "type": "object",
      "description": "Parameters for the SYSTEM_MOVE_ENTITY operation, which directly moves an entity to a new location without consuming a turn.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. The entity to move."
        },
        "target_location_id": {
          "type": "string",
          "description": "Required. The namespaced ID of the location to move the entity to. Can be a placeholder string like '{event.payload.currentLocationId}'."
        }
      },
      "required": ["entity_ref", "target_location_id"],
      "additionalProperties": false
    },
    "QueryComponentParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": ["entity_ref", "component_type", "result_variable"],
      "additionalProperties": false
    },
    "ModifyComponentParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation. Modifies a specific field within an existing component.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "field": { "type": "string", "minLength": 1 },
        "mode": { "type": "string", "enum": ["set", "inc"] },
        "value": {}
      },
      "required": ["entity_ref", "component_type", "field", "mode", "value"],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": { "mode": { "const": "inc" } },
            "required": ["mode"]
          },
          "then": {
            "properties": { "value": { "type": "number" } },
            "required": ["value"]
          }
        }
      ]
    },
    "AddComponentParameters": {
      "type": "object",
      "description": "Parameters for the ADD_COMPONENT operation. Adds a component to an entity, replacing it if it already exists.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "value": { "type": "object", "minProperties": 0 }
      },
      "required": ["entity_ref", "component_type", "value"],
      "additionalProperties": false
    },
    "RemoveComponentParameters": {
      "type": "object",
      "description": "Parameters for the REMOVE_COMPONENT operation. Removes a component from an entity.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference"
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        }
      },
      "required": ["entity_ref", "component_type"],
      "additionalProperties": false
    },
    "DispatchEventParameters": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "./common.schema.json#/definitions/namespacedId"
        },
        "payload": { "type": "object", "default": {} }
      },
      "required": ["eventType"],
      "additionalProperties": false
    },
    "IfParameters": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": { "$ref": "./json-logic.schema.json#" },
        "then_actions": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Operation" }
        },
        "else_actions": {
          "type": "array",
          "default": [],
          "items": { "$ref": "#/$defs/Operation" }
        }
      },
      "required": ["condition", "then_actions"],
      "additionalProperties": false
    },
    "LogParameters": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": { "type": "string", "minLength": 1 },
        "level": {
          "type": "string",
          "enum": ["debug", "info", "warn", "error"],
          "default": "info"
        }
      },
      "required": ["message"],
      "additionalProperties": false
    },
    "SetVariableParameters": {
      "type": "object",
      "description": "Parameters for the SET_VARIABLE operation. Sets or updates a variable within the current rule execution context.",
      "properties": {
        "variable_name": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        },
        "value": {}
      },
      "required": ["variable_name", "value"],
      "additionalProperties": false
    },
    "QuerySystemDataParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_SYSTEM_DATA operation. Queries an external system or data source and stores the result in a context variable.",
      "properties": {
        "source_id": { "type": "string", "minLength": 1 },
        "query_details": { "type": ["string", "object"] },
        "result_variable": {
          "type": "string",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": ["source_id", "query_details", "result_variable"],
      "additionalProperties": false
    },
    "ForEachParameters": {
      "type": "object",
      "description": "Parameters for the FOR_EACH loop operation.",
      "properties": {
        "collection": { "type": "string" },
        "item_variable": { "type": "string" },
        "actions": {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/Operation" }
        }
      },
      "required": ["collection", "item_variable", "actions"],
      "additionalProperties": false
    }
  }
}
