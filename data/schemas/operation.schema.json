{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json?v=2",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Operation object, representing a discrete step within a SystemRule's action sequence. Operations interact with the ECS framework (querying/modifying components, dispatching events) or control the flow of execution (conditional logic). Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "type": "object",
  "$ref": "#/$defs/Operation",
  "$defs": {
    "Operation": {
      "type": "object",
      "description": "A single operation within an action sequence.",
      "properties": {
        "type": {
          "type": "string",
          "description": "Required. The identifier determining the type of operation and the expected structure of the 'parameters' object.",
          "enum": [
            "QUERY_COMPONENT",
            "MODIFY_COMPONENT",
            "DISPATCH_EVENT",
            "IF",
            "LOG"
          ]
        },
        "comment": {
          "type": "string",
          "description": "Optional. A human-readable description or note for developers or modders; ignored by the interpreter at runtime."
        },
        "parameters": {
          "type": "object",
          "description": "Required. Container for parameters specific to the operation 'type'. The structure is validated conditionally based on the 'type' value."
        }
      },
      "required": [
        "type",
        "parameters"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "QUERY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/QueryComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "MODIFY_COMPONENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/ModifyComponentParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "DISPATCH_EVENT"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/DispatchEventParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "IF"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/IfParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "LOG"
              }
            },
            "required": [
              "type"
            ]
          },
          "then": {
            "properties": {
              "parameters": {
                "$ref": "#/$defs/LogParameters"
              }
            },
            "required": [
              "parameters"
            ]
          }
        }
      ],
      "examples": [
        {
          "type": "QUERY_COMPONENT",
          "comment": "Get the Health component of the actor entity",
          "parameters": {
            "entity_ref": "actor",
            "component_type": "core:health",
            "result_variable": "actorHealth"
          }
        },
        {
          "type": "MODIFY_COMPONENT",
          "comment": "Replace the entire status_effect component on the target",
          "parameters": {
            "entity_ref": "target",
            "component_type": "game:status_effect",
            "mode": "set",
            "value": {
              "duration": 10,
              "effect_id": "poison",
              "potency": 2
            }
          }
        },
        {
          "type": "MODIFY_COMPONENT",
          "comment": "Decrease the actor's current HP by 10",
          "parameters": {
            "entity_ref": "actor",
            "component_type": "core:health",
            "field": "current",
            "mode": "inc",
            "value": -10
          }
        },
        {
          "type": "DISPATCH_EVENT",
          "parameters": {
            "eventType": "event:quest_updated",
            "payload": {
              "questId": "$event.payload.questId",
              "newState": "completed",
              "completedBy": "$actor.id"
            }
          }
        }
      ]
    },
    "QueryComponentParameters": {
      "type": "object",
      "description": "Parameters for the QUERY_COMPONENT operation.",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Specifies the entity whose component is being queried."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. The namespaced ID of the component type to retrieve."
        },
        "result_variable": {
          "type": "string",
          "description": "Required. Variable name in evaluationContext.context where the result will be stored.",
          "minLength": 1,
          "pattern": "^\\S(.*\\S)?$"
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "result_variable"
      ],
      "additionalProperties": false
    },
    "ModifyComponentParameters": {
      "type": "object",
      "description": "Parameters for the MODIFY_COMPONENT operation (refactored by ticket T-05).",
      "properties": {
        "entity_ref": {
          "$ref": "./common.schema.json#/definitions/entityReference",
          "description": "Required. Target entity for the modification."
        },
        "component_type": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. Namespaced ID of the component."
        },
        "field": {
          "type": "string",
          "description": "Optional dot-separated path within the component. Omit to replace the whole component.",
          "minLength": 1
        },
        "mode": {
          "type": "string",
          "description": "Required. 'set' replaces the value; 'inc' adds numeric delta.",
          "enum": [
            "set",
            "inc"
          ]
        },
        "value": {
          "description": "Required. The value to assign (for 'set') or numeric delta (for 'inc')."
        }
      },
      "required": [
        "entity_ref",
        "component_type",
        "mode",
        "value"
      ],
      "additionalProperties": false,
      "allOf": [
        {
          "if": {
            "properties": {
              "mode": {
                "const": "inc"
              }
            },
            "required": [
              "mode"
            ]
          },
          "then": {
            "properties": {
              "value": {
                "type": "number"
              }
            },
            "required": [
              "value"
            ]
          }
        }
      ]
    },
    "DispatchEventParameters": {
      "type": "object",
      "description": "Parameters for the DISPATCH_EVENT operation. Sends an event through the dispatcher.",
      "properties": {
        "eventType": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Required. Namespaced ID of the event to dispatch."
        },
        "payload": {
          "type": "object",
          "description": "Optional event payload object. Defaults to {} if omitted.\nStrings beginning with '$' are treated as placeholders resolved at runtime (see DispatchEventHandler).",
          "default": {}
        }
      },
      "required": [
        "eventType"
      ],
      "additionalProperties": false,
      "$comment": "Placeholders (e.g., \"$actor.id\") are resolved by DispatchEventHandler before dispatch."
    },
    "IfParameters": {
      "type": "object",
      "description": "Parameters for the IF operation, enabling conditional execution.",
      "properties": {
        "condition": {
          "$ref": "./json-logic.schema.json#",
          "description": "Required. JSON-Logic condition to evaluate."
        },
        "then_actions": {
          "type": "array",
          "description": "Required. Operations executed if the condition is true.",
          "items": {
            "$ref": "#/$defs/Operation"
          },
          "minItems": 1
        },
        "else_actions": {
          "type": "array",
          "description": "Optional. Operations executed if the condition is false.",
          "items": {
            "$ref": "#/$defs/Operation"
          },
          "default": []
        }
      },
      "required": [
        "condition",
        "then_actions"
      ],
      "additionalProperties": false
    },
    "LogParameters": {
      "type": "object",
      "description": "Parameters for the LOG operation, used for debugging.",
      "properties": {
        "message": {
          "type": "string",
          "description": "Required. Message template to log (can contain placeholders).",
          "minLength": 1
        },
        "level": {
          "type": "string",
          "description": "Optional logging level.",
          "enum": [
            "debug",
            "info",
            "warn",
            "error"
          ],
          "default": "info"
        }
      },
      "required": [
        "message"
      ],
      "additionalProperties": false
    }
  }
}