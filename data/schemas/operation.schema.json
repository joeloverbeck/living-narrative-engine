{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/operation.schema.json",
  "title": "Operation Schema",
  "description": "Defines the structure for a single Action, which can be either a concrete Operation or a reference to a Macro. Operations interact with the ECS framework, control execution flow, manage variables, or interact with the UI. Based on the 'type' field, the 'parameters' object must conform to a specific structure.",
  "$ref": "#/$defs/Action",
  "$defs": {
    "Action": {
      "description": "Represents either a concrete operation or a macro reference. This is the canonical definition for any item in an action sequence.",
      "oneOf": [
        {
          "$ref": "#/$defs/Operation"
        },
        {
          "$ref": "#/$defs/MacroReference"
        }
      ]
    },
    "MacroReference": {
      "type": "object",
      "description": "A reference to a macro. The macro's 'actions' will be expanded in place of this reference at load time.",
      "properties": {
        "macro": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "The namespaced identifier of the macro to execute."
        },
        "comment": {
          "type": "string",
          "description": "Optional note for modders. Ignored at runtime."
        }
      },
      "required": ["macro"],
      "additionalProperties": false
    },
    "Operation": {
      "description": "A single, discrete operation within an action sequence.",
      "anyOf": [
        {
          "$ref": "./operations/queryComponent.schema.json"
        },
        {
          "$ref": "./operations/queryComponents.schema.json"
        },
        {
          "$ref": "./operations/modifyComponent.schema.json"
        },
        {
          "$ref": "./operations/addComponent.schema.json"
        },
        {
          "$ref": "./operations/removeComponent.schema.json"
        },
        {
          "$ref": "./operations/dispatchEvent.schema.json"
        },
        {
          "$ref": "./operations/dispatchPerceptibleEvent.schema.json"
        },
        {
          "$ref": "./operations/dispatchSpeech.schema.json"
        },
        {
          "$ref": "./operations/endTurn.schema.json"
        },
        {
          "$ref": "./operations/if.schema.json"
        },
        {
          "$ref": "./operations/forEach.schema.json"
        },
        {
          "$ref": "./operations/log.schema.json"
        },
        {
          "$ref": "./operations/setVariable.schema.json"
        },
        {
          "$ref": "./operations/getTimestamp.schema.json"
        },
        {
          "$ref": "./operations/getName.schema.json"
        },
        {
          "$ref": "./operations/resolveDirection.schema.json"
        },
        {
          "$ref": "./operations/systemMoveEntity.schema.json"
        },
        {
          "$ref": "./operations/rebuildLeaderListCache.schema.json"
        },
        {
          "$ref": "./operations/checkFollowCycle.schema.json"
        },
        {
          "$ref": "./operations/establishFollowRelation.schema.json"
        },
        {
          "$ref": "./operations/breakFollowRelation.schema.json"
        },
        {
          "$ref": "./operations/addPerceptionLogEntry.schema.json"
        },
        {
          "$ref": "./operations/hasComponent.schema.json"
        },
        {
          "$ref": "./operations/queryEntities.schema.json"
        },
        {
          "$ref": "./operations/modifyArrayField.schema.json"
        },
        {
          "$ref": "./operations/ifCoLocated.schema.json"
        },
        {
          "$ref": "./operations/math.schema.json"
        },
        {
          "$ref": "./operations/modifyContextArray.schema.json"
        },
        {
          "$ref": "./operations/autoMoveFollowers.schema.json"
        },
        {
          "$ref": "./operations/removeFromClosenessCircle.schema.json"
        },
        {
          "$ref": "./operations/mergeClosenessCircle.schema.json"
        }
      ]
    }
  }
}
