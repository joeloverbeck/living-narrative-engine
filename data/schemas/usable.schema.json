{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/usable.schema.json",
  "title": "Usable Component Schema",
  "description": "Defines how an item can be used: conditions, targeting, effects, feedback. Effect outcomes and messages are handled by event listeners, not this component.",
  "type": "object",
  "definitions": {
    "ConditionObject": {
      "type": "object",
      "description": "A single condition for item usage (checked against user or target). Specific parameters depend on 'condition_type'.",
      "properties": {
        "condition_type": {
          "type": "string",
          "description": "Identifier for the type of condition check.",
          "enum": [
            "player_state",
            "has_status_effect",
            "target_has_component",
            "target_distance",
            "health_below_max",
            "health_above_percent",
            "attribute_check",
            "skill_check",
            "player_in_location",
            "target_has_property",
            "inventory_contains"
          ]
        },
        "negate": {
          "type": "boolean",
          "default": false,
          "description": "Invert the result (e.g., check if NOT poisoned)."
        },
        "failure_message": {
          "type": "string",
          "description": "Specific message if this condition fails."
        }
      },
      "required": [
        "condition_type"
      ],
      "additionalProperties": true,
      "examples": [
        {
          "condition_type": "player_state",
          "state": "not_swimming",
          "failure_message": "Cannot use this while swimming."
        },
        {
          "condition_type": "has_status_effect",
          "effect_id": "core:poison",
          "negate": true,
          "failure_message": "Cannot use while poisoned."
        },
        {
          "condition_type": "health_below_max"
        },
        {
          "condition_type": "attribute_check",
          "attribute_id": "core:attr_intelligence",
          "threshold": 12,
          "failure_message": "You lack the intelligence to understand this."
        },
        {
          "condition_type": "target_has_property",
          "property_path": "PassageDetails.state",
          "expected_value": "locked",
          "failure_message": "It is already unlocked."
        }
      ]
    }
  },
  "properties": {
    "usability_conditions": {
      "type": "array",
      "description": "Conditions related to the user or game state that must ALL be met. Checked before targeting.",
      "items": {
        "$ref": "#/definitions/ConditionObject"
      },
      "default": []
    },
    "target_required": {
      "type": "boolean",
      "description": "Does this item require a target entity (other than the user)?",
      "default": false
    },
    "target_conditions": {
      "type": "array",
      "description": "Conditions the target entity must ALL meet. Checked only if 'target_required' is true, after target acquired.",
      "items": {
        "$ref": "#/definitions/ConditionObject"
      },
      "default": []
    },
    "effects": {
      "type": "array",
      "description": "Sequence of event triggers occurring on successful use, after all condition checks pass. MUST use 'trigger_event' type.",
      "items": {
        "$ref": "effect.schema.json#/definitions/EffectObject"
      },
      "minItems": 1
    },
    "consume_on_use": {
      "type": "boolean",
      "description": "Is the item consumed (removed/quantity decreased) after successful use attempt orchestration?",
      "default": true
    },
    "failure_message_default": {
      "type": "string",
      "description": "Optional default message if usage fails without a specific condition failure message (e.g., 'You cannot use that now.'). Used by ItemUsageSystem if ConditionEvaluationService doesn't provide one."
    }
  },
  "required": [
    "effects"
  ],
  "additionalProperties": false
}