{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/action-definition.schema.json",
  "title": "Action Definition Schema",
  "description": "Defines the structure for an Action Definition, used by the Dynamic Action Discovery system to determine valid commands based on game state. It specifies targeting and JSON Logic prerequisites, and output format. Prerequisites are now handled solely by JSON Logic.",
  "type": "object",
  "definitions": {},
  "properties": {
    "id": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "Required. Unique, namespaced ID for the action definition (e.g., 'core:action_eat', 'combat:action_attack')."
    },
    "commandVerb": {
      "type": "string",
      "description": "Required. The single, canonical command verb associated with this action (e.g., 'go', 'take', 'look', 'use'). Used for UI generation and potentially mapping. Hyphenated and camelCase verbs are allowed, but spaces are not.",
      "minLength": 1,
      "pattern": "^[A-Za-z-]+$",
      "examples": ["go", "take", "look", "inventory", "wait", "attack"]
    },
    "name": {
      "type": "string",
      "description": "Optional. Human-readable name or verb for the action (e.g., 'Eat', 'Attack', 'Go'). This is the primary display name for the action in UI elements like buttons and tooltips."
    },
    "description": {
      "type": "string",
      "description": "Optional. A detailed description of what the action does. Used for tooltips and can be leveraged by LLMs for contextual understanding."
    },
    "target_domain": {
      "type": "string",
      "description": "Required. Specifies where to look for potential targets for this action.",
      "enum": [
        "none",
        "self",
        "inventory",
        "equipment",
        "environment",
        "direction",
        "followers"
      ]
    },
    "prerequisites": {
      "type": "array",
      "description": "Optional. Defines all conditional requirements beyond basic target domain checks. It is an array of objects, each containing a 'logic' property (a standard JSON Logic object) and an optional 'failure_message'. These are evaluated by JsonLogicEvaluationService. The evaluation context includes 'actor' and 'target'. This field replaces the removed component requirement fields (actor_required_components, etc.).",
      "$comment": "This 'prerequisites' array, using objects with a 'logic' key for JSON Logic, replaces the deprecated actor_required_components, actor_forbidden_components, target_required_components, and target_forbidden_components fields.",
      "items": {
        "type": "object",
        "required": ["logic"],
        "properties": {
          "logic": {
            "$ref": "./condition-container.schema.json#",
            "description": "The condition to evaluate. Can be an inline JSON-Logic rule or a reference to a named Condition definition via 'condition_ref'."
          },
          "failure_message": {
            "type": "string",
            "description": "An optional message to be logged or displayed if this prerequisite fails. Useful for debugging or providing player feedback."
          }
        },
        "additionalProperties": false
      },
      "default": []
    },
    "template": {
      "type": "string",
      "description": "Required. Text template for generating the command string output, using placeholders like {target} or {direction} (e.g., 'eat {target}', 'go {direction}', 'wait')."
    }
  },
  "required": [
    "id",
    "commandVerb",
    "name",
    "description",
    "target_domain",
    "template"
  ],
  "additionalProperties": true,
  "$comment": "Allows additional properties for future extensions like action costs or effects definitions. The 'dispatch_event' property has been removed."
}
