{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/action-definition.schema.json",
  "title": "Action Definition Schema",
  "description": "Defines the structure for an Action Definition, used by the Dynamic Action Discovery system to determine valid commands based on game state. It specifies requirements, targeting, prerequisites, output format, and optional event dispatching for actions.",
  "type": "object",
  "definitions": {
  },
  "properties": {
    "id": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "Required. Unique, namespaced ID for the action definition (e.g., 'core:action_eat', 'combat:action_attack')."
    },
    "commandVerb": {
      "type": "string",
      "description": "Required. The single, canonical, lowercase command verb associated with this action (e.g., 'go', 'take', 'look', 'use'). Used for UI generation and potentially mapping. Should not contain spaces.",
      "minLength": 1,
      "pattern": "^[a-z]+$",
      "examples": [
        "go",
        "take",
        "look",
        "inventory",
        "wait",
        "attack"
      ]
    },
    "name": {
      "type": "string",
      "description": "Optional. Human-readable name or verb for the action (e.g., 'Eat', 'Attack', 'Go'). Primarily for debugging or tooling."
    },
    "target_domain": {
      "type": "string",
      "description": "Required. Specifies where to look for potential targets for this action.",
      "enum": [
        "none",
        "self",
        "inventory",
        "equipment",
        "environment",
        "direction"
      ]
    },
    "actor_required_components": {
      "type": "array",
      "description": "Optional. List of component identifiers (namespaced IDs) that the acting entity must possess.",
      "items": {
        "$ref": "./common.schema.json#/definitions/namespacedId"
      },
      "default": []
    },
    "actor_forbidden_components": {
      "type": "array",
      "description": "Optional. List of component identifiers (namespaced IDs) that the acting entity must NOT possess.",
      "items": {
        "$ref": "./common.schema.json#/definitions/namespacedId"
      },
      "default": []
    },
    "target_required_components": {
      "type": "array",
      "description": "Optional. List of component identifiers (namespaced IDs) that the target entity must possess (if target_domain is applicable).",
      "items": {
        "$ref": "./common.schema.json#/definitions/namespacedId"
      },
      "default": []
    },
    "target_forbidden_components": {
      "type": "array",
      "description": "Optional. List of component identifiers (namespaced IDs) that the target entity must NOT possess (if target_domain is applicable).",
      "items": {
        "$ref": "./common.schema.json#/definitions/namespacedId"
      },
      "default": []
    },
    "prerequisites": {
      "type": "array",
      "description": "Optional. List of conditions that must all evaluate to true for the action to be valid. Each condition is a standard JSON Logic object (see common/json-logic.schema.json) evaluated by the ConditionEvaluatorService using the appropriate actor/target context. Evaluated AFTER basic component requirements.",
      "items": {
        "$ref": "./json-logic.schema.json#"
      },
      "default": []
    },
    "template": {
      "type": "string",
      "description": "Required. Text template for generating the command string output, using placeholders like {target} or {direction} (e.g., 'eat {target}', 'go {direction}', 'wait')."
    },
    "dispatch_event": {
      "description": "Optional. Defines the event to dispatch if this action passes validation and target resolution.",
      "type": "object",
      "required": [
        "eventName",
        "payload"
      ],
      "properties": {
        "eventName": {
          "type": "string",
          "description": "The namespaced ID of the event to dispatch (e.g., 'event:move_attempted'). Must match a defined event type.",
          "pattern": "^[a-zA-Z0-9_\\-:]+$"
        },
        "payload": {
          "type": "object",
          "description": "Defines the event payload. Keys are payload field names, values specify the data source using the documented convention (e.g., 'actor.id', 'target.component.Health.current', 'resolved.direction', 'literal.boolean.true').",
          "additionalProperties": {
            "type": "string",
            "description": "Source mapping string (e.g., 'actor.id', 'target.component.Health.current', 'literal.null')."
          }
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "id",
    "commandVerb",
    "target_domain",
    "template"
  ],
  "additionalProperties": true,
  "$comment": "Allows additional properties for future extensions like action costs, effects definitions, or categorization. The 'dispatch_event' property has been added here."
}