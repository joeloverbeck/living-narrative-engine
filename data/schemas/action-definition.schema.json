{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/action-definition.schema.json",
  "title": "Action Definition Schema",
  "description": "Defines the structure for an Action Definition, used by the Dynamic Action Discovery system to determine valid commands based on game state. It specifies targeting, JSON Logic prerequisites, output format, and optional event dispatching for actions. Prerequisites are now handled solely by JSON Logic.",
  "type": "object",
  "definitions": {
  },
  "properties": {
    "id": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "Required. Unique, namespaced ID for the action definition (e.g., 'core:action_eat', 'combat:action_attack')."
    },
    "commandVerb": {
      "type": "string",
      "description": "Required. The single, canonical, lowercase command verb associated with this action (e.g., 'go', 'take', 'look', 'use'). Used for UI generation and potentially mapping. Should not contain spaces.",
      "minLength": 1,
      "pattern": "^[a-z]+$",
      "examples": [
        "go",
        "take",
        "look",
        "inventory",
        "wait",
        "attack"
      ]
    },
    "name": {
      "type": "string",
      "description": "Optional. Human-readable name or verb for the action (e.g., 'Eat', 'Attack', 'Go'). Primarily for debugging or tooling."
    },
    "target_domain": {
      "type": "string",
      "description": "Required. Specifies where to look for potential targets for this action.",
      "enum": [
        "none",
        "self",
        "inventory",
        "equipment",
        "environment",
        "direction"
      ]
    },
    "prerequisites": {
      "type": "array",
      "description": "Optional. Defines all conditional requirements beyond basic target domain checks. It is an array of standard JSON Logic objects evaluated by JsonLogicEvaluationService. The evaluation context includes 'actor' and 'target'. This field replaces the removed component requirement fields (actor_required_components, etc.).",
      "$comment": "This 'prerequisites' array, using JSON Logic, replaces the deprecated actor_required_components, actor_forbidden_components, target_required_components, and target_forbidden_components fields.",
      "items": {
        "$ref": "./json-logic.schema.json#"
      },
      "default": []
    },
    "template": {
      "type": "string",
      "description": "Required. Text template for generating the command string output, using placeholders like {target} or {direction} (e.g., 'eat {target}', 'go {direction}', 'wait')."
    },
    "dispatch_event": {
      "description": "Optional. Defines the event to dispatch if this action passes validation and target resolution.",
      "type": "object",
      "required": [
        "eventName",
        "payload"
      ],
      "properties": {
        "eventName": {
          "type": "string",
          "description": "The namespaced ID of the event to dispatch (e.g., 'event:move_attempted'). Must match a defined event type.",
          "pattern": "^[a-zA-Z0-9_\\-:]+$"
        },
        "payload": {
          "type": "object",
          "description": "Defines the event payload. Keys are payload field names, values specify the data source using the documented convention (e.g., 'actor.id', 'target.component.Health.current', 'resolved.direction', 'literal.boolean.true').",
          "additionalProperties": {
            "type": "string",
            "description": "Source mapping string (e.g., 'actor.id', 'target.component.Health.current', 'literal.null')."
          }
        }
      },
      "additionalProperties": false
    }
  },
  "required": [
    "id",
    "commandVerb",
    "target_domain",
    "template"
  ],
  "additionalProperties": true,
  "$comment": "Allows additional properties for future extensions like action costs, effects definitions, or categorization. The 'dispatch_event' property has been added here."
}