{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/item.schema.json",
  "title": "Item Entity Schema",
  "description": "Defines the structure for an Item entity in the adventure game platform. Items are entities composed of components, extending the base entity schema.",
  "type": "object",
  "allOf": [
    {
      "$ref": "entity.schema.json"
    }
  ],
  "properties": {
    "components": {
      "type": "object",
      "description": "Components defining the item's properties. Must include Name and Item components.",
      "required": [
        "Name",
        "Item"
      ],
      "properties": {
        "Name": {
          "$ref": "entity.schema.json#/definitions/NameComponent",
          "description": "The display name of the item."
        },
        "Description": {
          "$ref": "#/definitions/DescriptionComponent",
          "description": "Optional textual description shown when examining the item."
        },
        "Item": {
          "$ref": "#/definitions/ItemComponent",
          "description": "Core component marking this entity as an item and defining basic properties like tags."
        },
        "Usable": {
          "$ref": "#/definitions/UsableComponent",
          "$comment": "Updated based on 'Refinement of JIRA Ticket: Item Usage Functionality'. This replaces the old structure.",
          "description": "Optional component defining direct use effects, conditions, and targeting."
        },
        "Equippable": {
          "$ref": "#/definitions/EquippableComponent",
          "description": "Optional component defining if and how the item can be equipped."
        }
      },
      "additionalProperties": true
    }
  },
  "required": [
    "id",
    "components"
  ],
  "definitions": {
    "DescriptionComponent": {
      "type": "object",
      "description": "Provides a textual description of the item.",
      "additionalProperties": false,
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "The text displayed when the item is examined (e.g., 'A heavy, rusted iron key.', 'A swirling red liquid in a vial.')."
        }
      }
    },
    "ItemComponent": {
      "type": "object",
      "description": "Core component identifying an entity as an item and providing fundamental properties.",
      "additionalProperties": false,
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "description": "List of keywords identifying the item's type, material, or purpose (e.g., 'key', 'potion', 'consumable', 'metal', 'quest_item'). Used by game systems for identification and filtering.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-]+$",
            "description": "A tag string (lowercase, alphanumeric, underscores, hyphens)."
          },
          "minItems": 1,
          "default": [],
          "uniqueItems": true,
          "examples": [
            [ "key", "iron" ],
            [ "potion", "healing", "consumable" ],
            [ "weapon", "sword", "metal" ]
          ]
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether multiple instances can stack in inventory.",
          "default": false
        },
        "value": {
          "type": "integer",
          "description": "Optional base monetary or point value of the item.",
          "minimum": 0,
          "default": 0
        }
      }
    },

    "UsableComponent": {
      "type": "object",
      "description": "Defines how an item can be used, including conditions, targeting, effects, and feedback. Replaces the older simpler structure.",
      "properties": {
        "usability_conditions": {
          "type": "array",
          "description": "Conditions related to the user or game state that must ALL be met for the item to be usable. If empty or omitted, there are no user/state prerequisites.",
          "items": {
            "$ref": "#/definitions/ConditionObject"
          },
          "default": [],
          "$comment": "Checks performed before targeting or effects."
        },
        "target_required": {
          "type": "boolean",
          "description": "Does this item require a target entity (other than the user) to be used?",
          "default": false
        },
        "target_conditions": {
          "type": "array",
          "description": "Conditions that the target entity must ALL meet. Only checked if 'target_required' is true.",
          "items": {
            "$ref": "#/definitions/ConditionObject"
          },
          "default": [],
          "$comment": "Checked after target is acquired but before effects."
        },
        "effects": {
          "type": "array",
          "description": "The sequence of effects that occur when the item is successfully used.",
          "items": {
            "$ref": "#/definitions/EffectObject"
          },
          "minItems": 1,
          "$comment": "Processed sequentially after all condition checks pass."
        },
        "consume_on_use": {
          "type": "boolean",
          "description": "Is the item consumed (quantity decreased/removed from inventory) after successful use?",
          "default": true,
          "$comment": "Checked after effects are processed."
        },
        "success_message": {
          "type": "string",
          "description": "Optional message displayed to the user upon successful completion of the item use action (e.g., 'You drink the potion.').",
          "$comment": "Used for feedback."
        },
        "failure_message_default": {
          "type": "string",
          "description": "Optional default message displayed if usage fails for a reason not covered by a specific condition's failure message (e.g., 'You cannot use that item now.').",
          "$comment": "Used for feedback."
        }
      },
      "required": [
        "effects",
        "consume_on_use"
      ],
      "additionalProperties": false
    },

    "ConditionObject": {
      "type": "object",
      "description": "Defines a single condition that must be met for item usage (either by the user or the target).",
      "properties": {
        "condition_type": {
          "type": "string",
          "description": "Identifier for the type of condition check to perform.",
          "enum": [
            "player_state",
            "has_status_effect",
            "target_has_component",
            "target_distance",
            "health_below_max",
            "attribute_check"
          ]
        },
        "negate": {
          "type": "boolean",
          "description": "If true, the result of the condition check is inverted (e.g., check if player is *not* swimming becomes check if player *is* swimming).",
          "default": false
        },
        "failure_message": {
          "type": "string",
          "description": "Optional specific message to display if *this* condition fails, overriding the default failure message."
        }
      },
      "required": [ "condition_type" ],
      "additionalProperties": true,
      "$comment": "This is a baseline definition. Implementations will need specific parameters based on 'condition_type'. E.g., 'player_state' needs 'state: string', 'has_status_effect' needs 'effect_id: string', 'target_distance' needs 'max_distance: number'. Consider using 'oneOf' for stricter validation later.",
      "examples": [
        { "condition_type": "player_state", "state": "not_swimming", "failure_message": "Cannot use this while swimming." },
        { "condition_type": "has_status_effect", "effect_id": "core:poison", "negate": true, "failure_message": "Cannot use while poisoned." },
        { "condition_type": "health_below_max" }
      ]
    },

    "EffectObject": {
      "type": "object",
      "description": "Defines a single effect to be applied when an item is used.",
      "properties": {
        "effect_type": {
          "type": "string",
          "description": "Identifier for the type of effect to apply. Determines the structure of 'effect_params'.",
          "enum": [
            "heal",
            "trigger_event",
            "apply_status_effect",
            "damage",
            "spawn_entity",
            "remove_status_effect"
          ]
        },
        "effect_params": {
          "type": "object",
          "description": "Object containing parameters specific to the 'effect_type'. The required parameters depend on the effect type.",
          "properties": {},
          "additionalProperties": true
        }
      },
      "required": [ "effect_type", "effect_params" ],
      "additionalProperties": false,
      "$comment": "Structure of 'effect_params' depends heavily on 'effect_type'. E.g., 'heal' needs { amount: number, ?target: 'user'|'target', ?fail_if_already_max: boolean }. 'trigger_event' needs { event_name: string, ?event_payload: object }. 'apply_status_effect' needs { effect_id: string, ?duration: number, ?target: 'user'|'target' }.",
      "examples": [
        { "effect_type": "heal", "effect_params": { "amount": 10, "target": "user" } },
        { "effect_type": "trigger_event", "effect_params": { "event_name": "game:event:door_unlocked", "event_payload": { "door_id": "demo:door_rusty" } } },
        { "effect_type": "apply_status_effect", "effect_params": { "effect_id": "core:buff_strength", "duration": 60, "target": "user" } },
        { "effect_type": "damage", "effect_params": { "amount": 5, "damage_type": "fire", "target": "target" } }
      ]
    },

    "EquippableComponent": {
      "type": "object",
      "description": "Component defining an item's ability to be equipped, the slot it uses, and effects it grants.",
      "additionalProperties": false,
      "required": [
        "slotId"
      ],
      "properties": {
        "slotId": {
          "type": "string",
          "description": "The ID of the equipment slot this item occupies (e.g., 'core:slot_main_hand').",
          "pattern": "^[a-zA-Z0-9_\\-:]+$",
          "examples": [
            "core:slot_main_hand",
            "core:slot_body"
          ]
        },
        "equipEffects": {
          "type": "array",
          "description": "Effects applied to the wearer when this item is equipped.",
          "default": [],
          "items": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of effect.",
                "enum": [
                  "stat_mod"
                ]
              },
              "stat": {
                "type": "string",
                "description": "The ID of the stat to modify (e.g., 'core:attr_strength'). Required if type is 'stat_mod'.",
                "pattern": "^[a-zA-Z0-9_\\-:]+$"
              },
              "value": {
                "type": "integer",
                "description": "The amount to modify the stat by (can be negative). Required if type is 'stat_mod'."
              }
            },
            "if": {
              "properties": { "type": { "const": "stat_mod" } }
            },
            "then": {
              "required": [ "stat", "value" ]
            }
          },
          "examples": [
            [ { "type": "stat_mod", "stat": "core:attr_strength", "value": 1 } ],
            [
              { "type": "stat_mod", "stat": "core:attr_defense", "value": 5 },
              { "type": "stat_mod", "stat": "core:attr_agility", "value": -1 }
            ]
          ]
        }
      }
    }
  }
}