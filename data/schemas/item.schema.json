{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/item.schema.json",
  "title": "Item Entity Schema",
  "description": "Defines the structure for an Item entity, inheriting from the base entity schema and adding item-specific components.",
  "type": "object",
  "allOf": [
    {
      "$ref": "entity.schema.json"
    }
  ],
  "properties": {
    "components": {
      "type": "object",
      "description": "Components defining the item's properties. Must include Name component. Inherits other components.",
      "required": [
        "Name"
      ],
      "properties": {
        "DefinitionRef": {
          "$ref": "common.schema.json#/definitions/DefinitionRefComponent",
          "description": "(Optional) Holds a reference ID to a base definition, linking this item instance entity to its item definition template. Definition imported from common schema."
        },
        "Name": {
          "$ref": "common.schema.json#/definitions/NameComponent",
          "description": "The display name of the item. Definition imported from common schema."
        },
        "Description": {
          "$ref": "common.schema.json#/definitions/DescriptionComponent",
          "description": "(Optional) Static text description of the item. Definition imported from common schema."
        },
        "Item": {
          "$ref": "#/definitions/ItemComponent",
          "description": "Core component identifying this as an item and its basic properties."
        },
        "Usable": {
          "$ref": "#/definitions/UsableComponent",
          "description": "Optional component defining direct use effects, conditions, and targeting."
        },
        "Equippable": {
          "$ref": "#/definitions/EquippableComponent",
          "description": "Optional component defining if and how the item can be equipped."
        },
        "Position": {
          "$ref": "./common.schema.json#/definitions/PositionComponent",
          "description": "(Optional) Component for items whose location is relevant (e.g., placed in world). Definition imported from common schema."
        },
        "Openable": {
          "$ref": "./common.schema.json#/definitions/OpenableComponent",
          "description": "(Optional) Component for items that can be opened/closed (e.g., a box). Definition imported from common schema."
        },
        "Lockable": {
          "$ref": "./common.schema.json#/definitions/LockableComponent",
          "description": "(Optional) Component for items that can be locked/unlocked (e.g., a chest). Definition imported from common schema."
        },
        "Container": {
          "$ref": "./common.schema.json#/definitions/ContainerComponent",
          "description": "(Optional) Component for items that can hold other items (e.g., a bag, box). Definition imported from common schema."
        },
        "Edible": {
          "$ref": "./common.schema.json#/definitions/EdibleComponent",
          "description": "(Optional) Marker component indicating an item can be eaten. Definition imported from common schema."
        },
        "LiquidContainer": {
          "$ref": "./common.schema.json#/definitions/LiquidContainerComponent",
          "description": "(Optional) Component for items that can contain liquids (e.g., a bottle, waterskin). Definition imported from common schema."
        },
        "Pushable": {
          "$ref": "./common.schema.json#/definitions/PushableComponent",
          "description": "(Optional) Component for items that can be pushed (e.g., a heavy crate item). Definition imported from common schema."
        }
      },
      "additionalProperties": true
    }
  },
  "required": [
    "id",
    "components"
  ],
  "definitions": {
    "ItemComponent": {
      "type": "object",
      "description": "Core component identifying an entity as an item.",
      "additionalProperties": false,
      "required": [
        "tags"
      ],
      "properties": {
        "tags": {
          "type": "array",
          "description": "Keywords identifying the item's type, material, or purpose (e.g., 'key', 'potion', 'weapon', 'metal', 'quest_item'). Used for filtering and identification.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_\\-]+$"
          },
          "minItems": 1,
          "uniqueItems": true,
          "examples": [
            [
              "key",
              "iron"
            ],
            [
              "potion",
              "healing",
              "consumable"
            ],
            [
              "weapon",
              "sword",
              "metal"
            ],
            [
              "quest_item"
            ]
          ]
        },
        "stackable": {
          "type": "boolean",
          "description": "Whether multiple instances stack in inventory (requires quantity tracking elsewhere, perhaps on the InventoryComponent slot).",
          "default": false
        },
        "value": {
          "type": "integer",
          "description": "Optional base monetary or point value.",
          "minimum": 0,
          "default": 0
        },
        "weight": {
          "type": "number",
          "description": "Optional weight value, affecting inventory capacity.",
          "minimum": 0,
          "default": 0
        }
      }
    },
    "UsableComponent": {
      "type": "object",
      "description": "Defines how an item can be used: conditions, targeting, effects, feedback. Effect outcomes and messages are handled by event listeners, not this component.",
      "properties": {
        "usability_conditions": {
          "type": "array",
          "description": "Conditions related to the user or game state that must ALL be met. Checked before targeting.",
          "items": {
            "$ref": "#/definitions/ConditionObject"
          },
          "default": []
        },
        "target_required": {
          "type": "boolean",
          "description": "Does this item require a target entity (other than the user)?",
          "default": false
        },
        "target_conditions": {
          "type": "array",
          "description": "Conditions the target entity must ALL meet. Checked only if 'target_required' is true, after target acquired.",
          "items": {
            "$ref": "#/definitions/ConditionObject"
          },
          "default": []
        },
        "effects": {
          "type": "array",
          "description": "Sequence of event triggers occurring on successful use, after all condition checks pass. MUST use 'trigger_event' type.",
          "items": {
            "$ref": "effect.schema.json#/definitions/EffectObject"
          },
          "minItems": 1
        },
        "consume_on_use": {
          "type": "boolean",
          "description": "Is the item consumed (removed/quantity decreased) after successful use attempt orchestration?",
          "default": true
        },
        "failure_message_default": {
          "type": "string",
          "description": "Optional default message if usage fails without a specific condition failure message (e.g., 'You cannot use that now.'). Used by ItemUsageSystem if ConditionEvaluationService doesn't provide one."
        }
      },
      "required": [
        "effects"
      ],
      "additionalProperties": false
    },
    "ConditionObject": {
      "type": "object",
      "description": "A single condition for item usage (checked against user or target). Specific parameters depend on 'condition_type'.",
      "properties": {
        "condition_type": {
          "type": "string",
          "description": "Identifier for the type of condition check.",
          "enum": [
            "player_state",
            "has_status_effect",
            "target_has_component",
            "target_distance",
            "health_below_max",
            "health_above_percent",
            "attribute_check",
            "skill_check",
            "player_in_location",
            "target_has_property",
            "inventory_contains"
          ]
        },
        "negate": {
          "type": "boolean",
          "default": false,
          "description": "Invert the result (e.g., check if NOT poisoned)."
        },
        "failure_message": {
          "type": "string",
          "description": "Specific message if this condition fails."
        }
      },
      "required": [
        "condition_type"
      ],
      "additionalProperties": true,
      "examples": [
        {
          "condition_type": "player_state",
          "state": "not_swimming",
          "failure_message": "Cannot use this while swimming."
        },
        {
          "condition_type": "has_status_effect",
          "effect_id": "core:poison",
          "negate": true,
          "failure_message": "Cannot use while poisoned."
        },
        {
          "condition_type": "health_below_max"
        },
        {
          "condition_type": "attribute_check",
          "attribute_id": "core:attr_intelligence",
          "threshold": 12,
          "failure_message": "You lack the intelligence to understand this."
        },
        {
          "condition_type": "target_has_property",
          "property_path": "PassageDetails.state",
          "expected_value": "locked",
          "failure_message": "It is already unlocked."
        }
      ]
    },
    "EquippableComponent": {
      "type": "object",
      "description": "Defines item equippability: slot, effects.",
      "additionalProperties": false,
      "required": [
        "slotId"
      ],
      "properties": {
        "slotId": {
          "$ref": "common.schema.json#/definitions/namespacedId",
          "description": "ID of the equipment slot this item occupies (e.g., 'core:slot_main_hand', 'core:slot_head'). Must match slots defined in EquipmentComponent.",
          "examples": [
            "core:slot_main_hand",
            "core:slot_body"
          ]
        },
        "equipEffects": {
          "$comment": "Currently only defines 'stat_mod'. Could be expanded with other passive effects (resistances, skills, special abilities).",
          "type": "array",
          "description": "Passive effects applied to the wearer while equipped.",
          "default": [],
          "items": {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "stat_mod",
                  "skill_mod",
                  "resistance"
                ]
              },
              "stat": {
                "$ref": "common.schema.json#/definitions/namespacedId",
                "description": "ID of stat (e.g., 'core:attr_strength'). Req for 'stat_mod'."
              },
              "value": {
                "type": "integer",
                "description": "Amount to modify by (can be negative). Req for 'stat_mod', 'skill_mod'."
              },
              "skill": {
                "$ref": "common.schema.json#/definitions/namespacedId",
                "description": "ID of skill (e.g., 'core:skill_stealth'). Req for 'skill_mod'."
              },
              "damage_type": {
                "type": "string",
                "description": "Type of damage to resist (e.g., 'fire', 'cold'). Req for 'resistance'."
              },
              "resistance_value": {
                "type": "integer",
                "description": "Amount or percentage of resistance. Req for 'resistance'."
              }
            },
            "allOf": [
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "stat_mod"
                    }
                  }
                },
                "then": {
                  "required": [
                    "stat",
                    "value"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "skill_mod"
                    }
                  }
                },
                "then": {
                  "required": [
                    "skill",
                    "value"
                  ]
                }
              },
              {
                "if": {
                  "properties": {
                    "type": {
                      "const": "resistance"
                    }
                  }
                },
                "then": {
                  "required": [
                    "damage_type",
                    "resistance_value"
                  ]
                }
              }
            ]
          },
          "examples": [
            [
              {
                "type": "stat_mod",
                "stat": "core:attr_strength",
                "value": 1
              }
            ],
            [
              {
                "type": "stat_mod",
                "stat": "core:attr_defense",
                "value": 5
              },
              {
                "type": "stat_mod",
                "stat": "core:attr_agility",
                "value": -1
              }
            ],
            [
              {
                "type": "resistance",
                "damage_type": "fire",
                "resistance_value": 10
              }
            ]
          ]
        },
        "requirements": {
          "type": "array",
          "description": "Optional list of conditions the entity must meet to equip this item.",
          "items": {
            "$ref": "#/definitions/ConditionObject"
          },
          "default": []
        }
      }
    }
  }
}