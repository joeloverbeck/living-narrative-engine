{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/event-trigger.schema.json",
  "title": "Single Event Trigger Schema",
  "description": "Defines the structure for a single event trigger that links a game event condition to one or more resulting actions.",
  "type": "object",
  "required": [
    "id",
    "listen_to",
    "actions"
  ],
  "additionalProperties": false,
  "properties": {
    "id": {
      "$ref": "common.schema.json#/definitions/namespacedId",
      "description": "Unique identifier for this specific trigger definition (e.g., 'demo:trigger_unlock_treasure_door')."
    },
    "listen_to": {
      "type": "object",
      "description": "Specifies the event condition that activates this trigger.",
      "required": [ "event_type" ],
      "additionalProperties": false,
      "properties": {
        "event_type": {
          "type": "string",
          "description": "The name of the core game event to listen for (must match EventBus event names).",
          "enum": [
            "event:entity_died",
            "event:room_entered",
            "event:item_used",
            "event:objective_completed",
            "event:dialogue_ended",
            "event:puzzle_solved"
          ],
          "examples": [ "event:entity_died", "event:room_entered" ]
        },
        "filters": {
          "type": "object",
          "description": "Optional conditions to further specify which event instances should match based on the event's payload data.",
          "additionalProperties": true,
          "properties": {
            "source_id": {
              "$ref": "common.schema.json#/definitions/namespacedId",
              "description": "Filter: matches if event payload has 'source_id' equal to this value.",
              "examples": [ "demo:enemy_goblin_chief" ]
            },
            "target_id": {
              "$ref": "common.schema.json#/definitions/namespacedId",
              "description": "Filter: matches if event payload has 'target_id' equal to this value.",
              "examples": [ "demo:room_treasure", "core:player" ]
            },
            "item_id": {
              "$ref": "common.schema.json#/definitions/namespacedId",
              "description": "Filter: matches if event payload has 'item_id' equal to this value.",
              "examples": [ "demo:key_rusty" ]
            }
          },
          "examples": [
            { "source_id": "demo:enemy_goblin_chief" },
            { "target_id": "demo:room_treasure", "entering_entity_id": "core:player" }
          ],
          "$comment": "Values within additionalProperties cannot be strictly validated as namespacedIds without a more complex schema."
        }
      }
    },
    "actions": {
      "type": "array",
      "description": "A list of one or more actions to execute when the 'listen_to' condition is met.",
      "minItems": 1,
      "items": {
        "$ref": "#/definitions/ActionItem"
      }
    },
    "one_shot": {
      "type": "boolean",
      "description": "If true, this trigger will automatically disable itself after its actions have been successfully executed once.",
      "default": true
    },
    "enabled": {
      "type": "boolean",
      "description": "Whether this trigger is currently active and listening for events.",
      "default": true
    }
  },
  "definitions": {
    "ActionItem": {
      "description": "Defines a single action to be performed. The structure of 'target' and 'parameters' depends on 'type'.",
      "type": "object",
      "required": ["type", "target", "parameters"],
      "properties": {
        "type": {
          "type": "string",
          "description": "The type of action to perform.",
          "enum": [
            "set_connection_state",
            "spawn_entity",
            "destroy_entity",
            "send_message_to_player",
            "update_entity_component",
            "start_quest",
            "advance_quest_objective",
            "fire_event"
          ]
        },
        "target": {
          "type": "object",
          "description": "Specifies the object or context the action affects. Structure depends on the action 'type'."
        },
        "parameters": {
          "type": "object",
          "description": "Contains values and settings needed for the action. Structure depends on the action 'type'."
        }
      },
      "oneOf": [
        {
          "properties": {
            "type": { "const": "set_connection_state" },
            "target": {
              "type": "object",
              "required": [ "location_id", "connection_direction" ],
              "properties": {
                "location_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the location containing the connection."
                },
                "connection_direction": {
                  "type": "string",
                  "description": "Direction identifier (from Connections component) to modify."
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["state"],
              "properties": {
                "state": {
                  "type": "string",
                  "description": "The new state value for the connection (e.g., 'unlocked', 'hidden', 'blocked').",
                  "examples": [ "unlocked", "locked", "hidden", "revealed", "blocked", "unblocked", "destroyed" ]
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "spawn_entity" },
            "target": {
              "type": "object",
              "required": ["location_id"],
              "properties": {
                "location_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the location where the entity should be spawned. Can use context like 'event:source_location' or 'event:target_location' if event system provides."
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["entity_id_to_spawn"],
              "properties": {
                "entity_id_to_spawn": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "The ID of the entity definition to spawn."
                },
                "offset_x": { "type": "number", "default": 0, "description": "Optional X offset within the location." },
                "offset_y": { "type": "number", "default": 0, "description": "Optional Y offset within the location." }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "destroy_entity" },
            "target": {
              "type": "object",
              "required": ["entity_id"],
              "properties": {
                "entity_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the entity to destroy. Can use context like 'event:source_id'."
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "description": "Optional parameters for destruction (e.g., effects).",
              "properties": {
                "play_effect": { "type": "string", "description": "Optional visual/audio effect ID on destruction." }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "send_message_to_player" },
            "target": {
              "type": "object",
              "properties": {
                "player_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "Target player ID. If omitted, often defaults to 'core:player' or the player involved in the event context.",
                  "default": "core:player"
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["message"],
              "properties": {
                "message": {
                  "type": "string",
                  "description": "The message template to display."
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "update_entity_component" },
            "target": {
              "type": "object",
              "required": ["entity_id"],
              "properties": {
                "entity_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the entity whose component will be updated. Can use context like 'event:source_id' or a specific ID."
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["component_name", "component_data"],
              "properties": {
                "component_name": {
                  "type": "string",
                  "description": "Name of the component to update (e.g., 'Health', 'State')."
                },
                "component_data": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "An object containing the fields and new values to update within the component. Structure depends on the component."
                },
                "merge_strategy": {
                  "type": "string",
                  "enum": ["replace", "merge_shallow", "merge_deep"],
                  "default": "merge_shallow",
                  "description": "How to apply the update (replace entire component data, merge top-level fields, or deep merge)."
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "start_quest" },
            "target": {
              "type": "object",
              "properties": {
                "player_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "Player ID to assign the quest to. Defaults to context.",
                  "default": "core:player"
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["quest_id"],
              "properties": {
                "quest_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the quest to add to the player's active log."
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "advance_quest_objective" },
            "target": {
              "type": "object",
              "properties": {
                "player_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "Player ID whose quest should be advanced. Defaults to context.",
                  "default": "core:player"
                }
              },
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["quest_id", "objective_key"],
              "properties": {
                "quest_id": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "ID of the active quest."
                },
                "objective_key": {
                  "type": "string",
                  "description": "Identifier (key or index) of the objective within the quest to mark as completed or progressed."
                },
                "progress_amount": {
                  "type": "integer",
                  "description": "Optional amount to progress objective if it's counter-based."
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        },
        {
          "properties": {
            "type": { "const": "fire_event" },
            "target": {
              "type": "object",
              "description": "Target context is usually implicit or derived from parameters/event context.",
              "additionalProperties": false
            },
            "parameters": {
              "type": "object",
              "required": ["event_name"],
              "properties": {
                "event_name": {
                  "$ref": "common.schema.json#/definitions/namespacedId",
                  "description": "Name of the event to publish via EventBus."
                },
                "event_data": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Optional arbitrary data payload to include with the fired event."
                },
                "delay_seconds": {
                  "type": "number",
                  "minimum": 0,
                  "description": "Optional delay before firing the event."
                }
              },
              "additionalProperties": false
            }
          },
          "required": ["type", "target", "parameters"]
        }
      ],
      "examples": [
        { "type": "set_connection_state", "target": { "location_id": "demo:room_main", "connection_direction": "north" }, "parameters": { "state": "unlocked" } },
        { "type": "spawn_entity", "target": { "location_id": "demo:room_main" }, "parameters": { "entity_id_to_spawn": "demo:guard_patrolling" } },
        { "type": "send_message_to_player", "target": {}, "parameters": { "message": "You hear a click from the north." } },
        { "type": "update_entity_component", "target": { "entity_id": "demo:magic_barrier" }, "parameters": { "component_name": "State", "component_data": { "active": false } } },
        { "type": "start_quest", "target": {}, "parameters": { "quest_id": "demo:quest_find_key" } }
      ]
    }
  }
}