{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/json-logic.schema.json",
  "title": "JSON Logic Rule",
  "description": "A JSON Schema representing a JSON Logic rule object. It supports composite logical operators (and, or, not) and allows for nesting of condition references.",
  "$comment": "This version has been updated to allow condition references ('condition_ref') to be nested within the logic, enabling composite conditions.",
  "definitions": {
    "primitive": {
      "description": "Allowed primitive types in JSON Logic arguments.",
      "type": ["boolean", "string", "number", "null"]
    },
    "rule_logic": {
      "description": "Represents a potential argument or nested rule within JSON Logic. Can be a primitive value, a literal array of arguments, or a condition container (which can be either a nested rule or a condition reference).",
      "anyOf": [
        {
          "$ref": "#/definitions/primitive"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rule_logic"
          }
        },
        {
          "$ref": "./condition-container.schema.json#"
        }
      ]
    }
  },
  "type": "object",
  "minProperties": 1,
  "maxProperties": 1,
  "properties": {
    "and": {
      "type": "array",
      "description": "Logical AND – evaluates to true iff every nested condition is true.",
      "items": {
        "$ref": "#/definitions/rule_logic"
      },
      "minItems": 1
    },
    "or": {
      "type": "array",
      "description": "Logical OR – evaluates to true if any nested condition is true.",
      "items": {
        "$ref": "#/definitions/rule_logic"
      },
      "minItems": 1
    },
    "not": {
      "$ref": "#/definitions/rule_logic",
      "description": "Logical NOT – inverts the truthiness of the nested condition."
    },
    "!": {
      "$ref": "#/definitions/rule_logic",
      "description": "Alias for logical NOT (JSON‑Logic shorthand)."
    }
  },
  "patternProperties": {
    "^(?!(and|or|not|!|condition_ref)$).+$": {
      "description": "Arguments for any non‑composite operator. Can be a primitive, an array of arguments, or a nested rule object (e.g., for 'var', '!!', '<', etc.).",
      "$ref": "#/definitions/rule_logic"
    }
  },
  "additionalProperties": false
}