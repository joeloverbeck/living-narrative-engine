{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/json-logic.schema.json",
  "title": "JSON Logic Rule",
  "description": "A JSON Schema representing a JSON Logic rule object with explicit support for composite logical operators (and, or, not, !). It validates the standard {\"operator\": [arguments...]} structure while enforcing arrays for \"and\"/\"or\", and a single nested rule for \"not\"/\"!\". Other JSON‑Logic operators remain unrestricted and may accept primitives or arrays of nested rules.",
  "$comment": "Updated for Ticket: Schema: Define Composite Logical Operators (and, or, not) for Conditions. Ensures recursive validation of composite logic while preserving existing operator flexibility. Also adapted patternProperties to allow nested rule objects as arguments.",
  "definitions": {
    "primitive": {
      "description": "Allowed primitive types in JSON Logic arguments.",
      "type": [
        "boolean",
        "string",
        "number",
        "null"
      ]
    },
    "rule_logic": {
      "description": "Represents a potential argument or nested rule within JSON Logic. Can be a primitive value, a literal array of arguments, or a nested rule object.",
      "anyOf": [
        {
          "$ref": "#/definitions/primitive"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rule_logic"
          }
        },
        {
          "$ref": "#"
        }
      ]
    }
  },
  "type": "object",
  "minProperties": 1,
  "maxProperties": 1,
  "properties": {
    "and": {
      "type": "array",
      "description": "Logical AND – evaluates to true iff every nested condition is true.",
      "items": {
        "$ref": "#/definitions/rule_logic"
      },
      "minItems": 1
    },
    "or": {
      "type": "array",
      "description": "Logical OR – evaluates to true if any nested condition is true.",
      "items": {
        "$ref": "#/definitions/rule_logic"
      },
      "minItems": 1
    },
    "not": {
      "$ref": "#/definitions/rule_logic",
      "description": "Logical NOT – inverts the truthiness of the nested condition."
    },
    "!": {
      "$ref": "#/definitions/rule_logic",
      "description": "Alias for logical NOT (JSON‑Logic shorthand)."
    }
  },
  "patternProperties": {
    "^(?!(and|or|not|!)$).+$": {
      "description": "Arguments for any non‑composite operator. Can be a primitive, an array of arguments, or a nested rule object (e.g., for 'var', '!!', '<', etc.).",
      "anyOf": [
        {
          "$ref": "#/definitions/primitive"
        },
        {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rule_logic"
          }
        },
        {
          "$ref": "#"
        }
      ]
    }
  },
  "additionalProperties": false
}