{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/anatomy.recipe.schema.json",
  "title": "Anatomy Recipe",
  "description": "Defines what parts a creature should have (types, tags, counts, preferences, exclusions)",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri",
      "description": "Optional. A URI reference to the schema that this document conforms to"
    },
    "recipeId": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "Unique identifier for this anatomy recipe"
    },
    "blueprintId": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "The blueprint this recipe is based on"
    },
    "slots": {
      "type": "object",
      "description": "Map of slot keys to slot configurations",
      "additionalProperties": {
        "$ref": "#/definitions/slotDefinition"
      }
    },
    "patterns": {
      "type": "array",
      "description": "Pattern-based slot configurations that can match multiple slots",
      "items": {
        "$ref": "#/definitions/patternDefinition"
      }
    },
    "constraints": {
      "type": "object",
      "description": "Global constraints for part combinations",
      "properties": {
        "requires": {
          "type": "array",
          "description": "Co-presence requirements - all parts in a group must be present together",
          "items": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "description": "Component tags that must be present together",
                "items": {
                  "type": "string"
                }
              },
              "partTypes": {
                "type": "array",
                "description": "Part types that must be present together",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "excludes": {
          "type": "array",
          "description": "Mutual exclusion constraints - parts in a group cannot coexist",
          "items": {
            "type": "object",
            "properties": {
              "components": {
                "type": "array",
                "description": "Component tags that cannot coexist",
                "items": {
                  "type": "string"
                }
              },
              "partTypes": {
                "type": "array",
                "description": "Part types that cannot coexist",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        }
      },
      "additionalProperties": false
    },
    "clothingEntities": {
      "type": "array",
      "description": "Clothing entities to instantiate and equip during anatomy generation",
      "items": {
        "type": "object",
        "properties": {
          "entityId": {
            "$ref": "./common.schema.json#/definitions/namespacedId",
            "description": "The clothing entity definition to instantiate",
            "examples": ["clothing:simple_shirt", "apparel:leather_boots"]
          },
          "equip": {
            "type": "boolean",
            "default": true,
            "description": "Whether to automatically equip this item after instantiation"
          },
          "targetSlot": {
            "type": "string",
            "description": "Specific clothing slot to equip to (uses entity's default if not specified)",
            "examples": ["torso_upper", "feet", "head"]
          },
          "layer": {
            "type": "string",
            "enum": ["underwear", "base", "outer", "accessories"],
            "description": "Layer override (highest precedence - overrides entity and blueprint defaults)"
          },
          "properties": {
            "type": "object",
            "description": "Property overrides for the instantiated entity",
            "additionalProperties": true,
            "examples": [
              { "color": "blue", "size": "medium" },
              { "condition": 0.8, "quality": "fine" }
            ]
          },
          "skipValidation": {
            "type": "boolean",
            "default": false,
            "description": "Skip slot compatibility validation (use with caution)"
          }
        },
        "required": ["entityId"],
        "additionalProperties": false
      }
    }
  },
  "required": ["recipeId", "blueprintId", "slots"],
  "additionalProperties": false,
  "definitions": {
    "slotDefinition": {
      "type": "object",
      "description": "Configuration for a single anatomy slot",
      "properties": {
        "partType": {
          "type": "string",
          "description": "Required. The type of part this slot expects (e.g., 'breast', 'leg', 'arm')"
        },
        "preferId": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Optional. Exact entity ID to prefer if available"
        },
        "tags": {
          "type": "array",
          "description": "Component tags that must be present on matching parts",
          "items": {
            "$ref": "./common.schema.json#/definitions/namespacedId"
          }
        },
        "notTags": {
          "type": "array",
          "description": "Component tags that must NOT be present on matching parts",
          "items": {
            "$ref": "./common.schema.json#/definitions/namespacedId"
          }
        },
        "properties": {
          "type": "object",
          "description": "Required property values for components on matching parts",
          "additionalProperties": true
        }
      },
      "required": ["partType"],
      "additionalProperties": false
    },
    "patternDefinition": {
      "type": "object",
      "description": "Pattern-based slot configuration that can match multiple slots",
      "properties": {
        "matches": {
          "type": "array",
          "description": "List of slot keys this pattern applies to",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "partType": {
          "type": "string",
          "description": "Required. The type of part these slots expect"
        },
        "preferId": {
          "$ref": "./common.schema.json#/definitions/namespacedId",
          "description": "Optional. Exact entity ID to prefer if available"
        },
        "tags": {
          "type": "array",
          "description": "Component tags that must be present on matching parts",
          "items": {
            "$ref": "./common.schema.json#/definitions/namespacedId"
          }
        },
        "notTags": {
          "type": "array",
          "description": "Component tags that must NOT be present on matching parts",
          "items": {
            "$ref": "./common.schema.json#/definitions/namespacedId"
          }
        },
        "properties": {
          "type": "object",
          "description": "Required property values for components on matching parts",
          "additionalProperties": true
        }
      },
      "required": ["matches", "partType"],
      "additionalProperties": false
    }
  }
}
