{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/common.schema.json",
  "title": "Common Definitions",
  "definitions": {
    "namespacedId": {
      "description": "A unique identifier string, typically namespaced using a colon (e.g., 'core:player', 'mod_combat:action_attack', 'event:entity_died'). Allows alphanumeric characters, underscore, hyphen, and colon.",
      "type": "string",
      "pattern": "^[a-zA-Z0-9_\\-:]+$"
    },
    "nullableNamespacedId": {
      "description": "A unique identifier string, typically namespaced (like namespacedId), or null.",
      "oneOf": [
        {
          "type": "string",
          "pattern": "^[a-zA-Z0-9_\\-:]+$"
        },
        {
          "type": "null"
        }
      ]
    },
    "NameComponent": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string",
          "description": "The primary display name or title of the entity (e.g., 'Player', 'Goblin Sentry', 'Iron Key')."
        }
      }
    },
    "DescriptionComponent": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "type": "string",
          "description": "A static description text for the entity."
        }
      }
    },
    "MetaDescriptionComponent": {
      "type": "object",
      "additionalProperties": false,
      "required": [
        "keywords"
      ],
      "properties": {
        "keywords": {
          "type": "array",
          "description": "A list of concise keywords or short phrases describing the location's key features, atmosphere, or contents (e.g., ['damp stone', 'flickering torchlight', 'smell of decay', 'distant dripping']). Used as input for LLM description generation.",
          "items": {
            "type": "string"
          },
          "minItems": 1
        },
        "style_hint": {
          "type": "string",
          "description": "(Optional) Hint for the LLM about the desired writing style (e.g., 'brief', 'ominous', 'poetic')."
        }
      }
    },
    "PositionComponent": {
      "description": "Schema for validating PositionComponent data.",
      "type": "object",
      "properties": {
        "locationId": {
          "$ref": "#/definitions/namespacedId",
          "description": "The ID of the location entity where the entity resides."
        },
        "x": {
          "description": "Optional x-coordinate within the location (if grid-based).",
          "type": "number",
          "default": 0
        },
        "y": {
          "description": "Optional y-coordinate within the location (if grid-based).",
          "type": "number",
          "default": 0
        }
      },
      "required": [
        "locationId"
      ],
      "additionalProperties": false
    },
    "HealthComponent": {
      "type": "object",
      "description": "Tracks the entity's health points.",
      "properties": {
        "current": {
          "type": "integer",
          "description": "Current HP (hit points). Cannot exceed max.",
          "minimum": 0
        },
        "max": {
          "type": "integer",
          "description": "Maximum HP for the entity.",
          "minimum": 1
        }
      },
      "required": [
        "current",
        "max"
      ],
      "additionalProperties": false
    },
    "InventoryComponent": {
      "type": "object",
      "description": "Holds a list of item entity IDs the entity carries.",
      "properties": {
        "items": {
          "type": "array",
          "description": "Array of item entity identifier strings currently in the entity's inventory.",
          "items": {
            "$ref": "#/definitions/namespacedId"
          },
          "default": [],
          "uniqueItems": false
        }
      },
      "required": [
        "items"
      ],
      "additionalProperties": false
    },
    "AttackComponent": {
      "type": "object",
      "description": "Defines the entity's base attack capability.",
      "properties": {
        "damage": {
          "type": "integer",
          "description": "Base damage or attack strength value.",
          "minimum": 0
        },
        "attack_verb": {
          "type": "string",
          "description": "Optional verb used in combat messages (e.g., 'attacks', 'claws', 'bites'). Defaults based on context if omitted.",
          "default": "attacks"
        }
      },
      "required": [
        "damage"
      ],
      "additionalProperties": false
    },
    "SkillComponent": {
      "type": "object",
      "description": "Tracks the entity's skill levels.",
      "properties": {
        "skills": {
          "type": "object",
          "description": "A map of skill IDs (e.g., 'core:skill_lockpicking') to their current integer value.",
          "additionalProperties": {
            "type": "integer",
            "minimum": 0
          },
          "propertyNames": {
            "$ref": "#/definitions/namespacedId"
          },
          "examples": [
            {
              "core:skill_stealth": 5,
              "core:skill_perception": 3
            }
          ]
        }
      },
      "required": [
        "skills"
      ],
      "additionalProperties": false
    },
    "StatsComponent": {
      "type": "object",
      "description": "Tracks the entity's core attributes (stats).",
      "properties": {
        "attributes": {
          "type": "object",
          "description": "A map of attribute IDs (e.g., 'core:attr_strength') to their current integer value.",
          "additionalProperties": {
            "type": "integer",
            "minimum": 0
          },
          "propertyNames": {
            "$ref": "#/definitions/namespacedId"
          },
          "examples": [
            {
              "core:attr_strength": 8,
              "core:attr_agility": 12
            }
          ]
        }
      },
      "required": [
        "attributes"
      ],
      "additionalProperties": false
    },
    "EntitiesPresentComponent": {
      "type": "object",
      "description": "Lists the IDs of entities currently present within this entity (typically used for Locations or Containers).",
      "properties": {
        "entityIds": {
          "type": "array",
          "description": "Array of entity identifier strings present.",
          "items": {
            "$ref": "#/definitions/namespacedId"
          },
          "default": [],
          "uniqueItems": true
        }
      },
      "required": [
        "entityIds"
      ],
      "additionalProperties": false
    },
    "ConnectionsComponent": {
      "$comment": "This is a basic version. location.schema.json defines a more complex version specific to locations.",
      "type": "object",
      "description": "Defines simple directional exits from one location to another.",
      "properties": {
        "exits": {
          "type": "object",
          "description": "Map where keys are directions (or exit names) and values are target location IDs.",
          "additionalProperties": {
            "$ref": "#/definitions/namespacedId"
          },
          "propertyNames": {
            "type": "string"
          },
          "examples": [
            {
              "north": "demo:room_hallway",
              "east": "demo:room_storage"
            }
          ]
        }
      },
      "required": [
        "exits"
      ],
      "additionalProperties": false
    },
    "EquipmentComponent": {
      "type": "object",
      "description": "Tracks items equipped by the entity in specific body slots.",
      "properties": {
        "slots": {
          "type": "object",
          "description": "A map where keys are slot IDs (e.g., 'core:slot_main_hand') and values are the entity ID string of the equipped item, or null if empty.",
          "additionalProperties": {
            "$ref": "#/definitions/nullableNamespacedId"
          },
          "propertyNames": {
            "$ref": "#/definitions/namespacedId"
          },
          "examples": [
            {
              "core:slot_main_hand": "demo:item_sword",
              "core:slot_head": null
            }
          ]
        }
      },
      "required": [
        "slots"
      ],
      "additionalProperties": false
    },
    "QuestLogComponent": {
      "type": "object",
      "description": "Component for entities (typically the player) that track quest progress.",
      "properties": {
        "active_quests": {
          "type": "array",
          "description": "List of IDs of quests currently being tracked.",
          "items": {
            "$ref": "#/definitions/namespacedId"
          },
          "default": [],
          "uniqueItems": true
        },
        "completed_quests": {
          "type": "array",
          "description": "List of IDs of quests that have been completed.",
          "items": {
            "$ref": "#/definitions/namespacedId"
          },
          "default": [],
          "uniqueItems": true
        }
      },
      "required": [],
      "additionalProperties": false
    },
    "TypedParameterBase": {
      "type": "object",
      "description": "Base structure for objects where a 'type' string dictates the structure of a 'parameters' object.",
      "required": [
        "type",
        "parameters"
      ],
      "properties": {
        "type": {
          "type": "string",
          "description": "Identifier determining the required structure of the 'parameters' object."
        },
        "parameters": {
          "type": "object",
          "description": "Container for parameters specific to the 'type'. Specific properties defined in consuming schemas using oneOf/allOf."
        }
      },
      "additionalProperties": false
    },
    "eventDefinition": {
      "type": "object",
      "description": "Defines an event structure containing a name/ID and optional data payload.",
      "required": [
        "eventName"
      ],
      "properties": {
        "eventName": {
          "$ref": "#/definitions/namespacedId",
          "description": "The unique, namespaced name/ID of the event to fire."
        },
        "eventData": {
          "type": "object",
          "description": "Optional payload data object for the event. Structure depends on the specific event being fired.",
          "additionalProperties": true
        }
      },
      "additionalProperties": false
    },
    "OpenableComponent": {
      "$ref": "./openable.schema.json"
    },
    "LockableComponent": {
      "$ref": "./lockable.schema.json"
    },
    "ContainerComponent": {
      "$ref": "./container.schema.json"
    },
    "EdibleComponent": {
      "$ref": "./edible.schema.json"
    },
    "LiquidContainerComponent": {
      "$ref": "./liquid-container.schema.json"
    },
    "PushableComponent": {
      "$ref": "./pushable.schema.json"
    }
  }
}