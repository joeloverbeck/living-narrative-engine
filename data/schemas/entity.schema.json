{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://example.com/schemas/entity.schema.json",
  "title": "Game Entity Schema",
  "description": "Schema for a game entity (player, NPC, item, location, etc.) composed of modular components. Each entity is defined by a unique id and a collection of components determining its attributes and behavior.",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string",
      "format": "uri",
      "description": "Optional JSON schema reference to enable editor validation and autocompletion."
    },
    "id": {
      "$ref": "./common.schema.json#/definitions/namespacedId",
      "description": "Unique identifier for this entity. Typically includes a module prefix and specific name (e.g., 'core:player', 'demo:item_key', 'demo:room_hall')."
    },
    "components": {
      "type": "object",
      "description": "Object map containing the components that define this entity. Keys MUST be component type namespaced IDs (e.g., 'core:name') conforming to the 'namespacedId' format. Values MUST be objects containing the specific data for that component type. The structure of each value object is validated at runtime against the schema associated with its corresponding key (component ID).",
      "minProperties": 1,
      "propertyNames": {
        "$ref": "./common.schema.json#/definitions/namespacedId",
        "description": "Component keys must be valid namespaced IDs referencing the component type."
      },
      "additionalProperties": {
        "oneOf": [
          {
            "type": "object"
          },
          {
            "type": "array"
          }
        ],
        "description": "Component data. This can be an object or an array. Its specific structure is validated at runtime against the 'dataSchema' of the corresponding component definition (e.g., the dataSchema for 'core:name' which is an object, or 'core:exits' which is an array)."
      }
    }
  },
  "required": ["id", "components"],
  "additionalProperties": false,
  "definitions": {}
}
