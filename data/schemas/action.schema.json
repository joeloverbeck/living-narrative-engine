{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "schema://living-narrative-engine/action.schema.json",
  "title": "Action Schema",
  "description": "Defines the structure for an Action Definition, used by the Dynamic Action Discovery system to determine valid commands based on game state. It specifies targeting and JSON Logic prerequisites, and output format. Prerequisites are now handled solely by JSON Logic.",
  "type": "object",
  "definitions": {
    "targetDefinition": {
      "type": "object",
      "description": "Defines a target specification for multi-target actions",
      "properties": {
        "scope": {
          "type": "string",
          "description": "Scope ID or inline scope expression that defines where to look for this target",
          "pattern": "^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$|^(none|self)$|^[^:]+$"
        },
        "placeholder": {
          "type": "string",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
          "description": "Template placeholder name without braces (e.g., 'target', 'item', 'destination')"
        },
        "description": {
          "type": "string",
          "description": "Human-readable target description for UI/documentation purposes"
        },
        "contextFrom": {
          "type": "string",
          "enum": ["primary"],
          "description": "Use another target as context for scope evaluation (currently only 'primary' supported)"
        },
        "optional": {
          "type": "boolean",
          "default": false,
          "description": "Whether this target is optional (action available even if no targets found)"
        }
      },
      "required": ["scope", "placeholder"],
      "additionalProperties": false
    }
  },
  "properties": {
    "$schema": {
      "$ref": "./common.schema.json#/definitions/BaseDefinition/properties/$schema"
    },
    "id": {
      "$ref": "./common.schema.json#/definitions/BaseDefinition/properties/id"
    },
    "description": {
      "$ref": "./common.schema.json#/definitions/BaseDefinition/properties/description"
    },
    "name": {
      "type": "string",
      "description": "Optional. Human-readable name or verb for the action (e.g., 'Eat', 'Attack', 'Go'). This is the primary display name for the action in UI elements like buttons and tooltips."
    },
    "targets": {
      "description": "Target configuration for the action - supports both legacy single-target and new multi-target formats",
      "oneOf": [
        {
          "type": "string",
          "description": "Legacy single-target scope (backward compatibility)",
          "pattern": "^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$|^(none|self)$",
          "examples": [
            "core:followers",
            "core:environment",
            "core:directions",
            "none",
            "self"
          ]
        },
        {
          "type": "object",
          "description": "Multi-target configuration with named target roles",
          "properties": {
            "primary": {
              "$ref": "#/definitions/targetDefinition",
              "description": "Primary target (required for multi-target actions)"
            },
            "secondary": {
              "$ref": "#/definitions/targetDefinition",
              "description": "Secondary target (optional)"
            },
            "tertiary": {
              "$ref": "#/definitions/targetDefinition",
              "description": "Tertiary target (optional)"
            }
          },
          "required": ["primary"],
          "additionalProperties": false
        }
      ]
    },
    "scope": {
      "type": "string",
      "description": "DEPRECATED: Use 'targets' instead. Legacy support only. The namespaced DSL scope that defines where to look for potential targets for this action.",
      "deprecated": true,
      "pattern": "^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$|^(none|self)$",
      "examples": [
        "core:followers",
        "core:environment",
        "core:directions",
        "none",
        "self"
      ]
    },
    "generateCombinations": {
      "type": "boolean",
      "default": false,
      "description": "Generate all target combinations as separate actions (cartesian product). Only applicable for multi-target actions."
    },
    "required_components": {
      "type": "object",
      "description": "HIGH-LEVEL PRE-FILTERING. Specifies component IDs required on the actor or target for this action to be considered for discovery. This is the primary mechanism used by the ActionIndex service for performance optimization.",
      "properties": {
        "actor": {
          "type": "array",
          "description": "A list of component IDs that the actor must possess for this action to be a candidate.",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "forbidden_components": {
      "type": "object",
      "description": "HIGH-LEVEL PRE-FILTERING. Specifies component IDs that must NOT be present on the actor for this action to be considered for discovery. This is evaluated at the same pre-filtering stage as required_components for optimal performance.",
      "properties": {
        "actor": {
          "type": "array",
          "description": "A list of component IDs that the actor must NOT possess for this action to be a candidate.",
          "items": {
            "type": "string",
            "pattern": "^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$"
          }
        }
      },
      "additionalProperties": false
    },
    "prerequisites": {
      "type": "array",
      "description": "ACTOR/WORLD STATE VALIDATION. Checks conditions on the actor (e.g., has enough mana, not rooted) or the global game state. Target-specific filtering and validation should be handled exclusively by the 'scope' property's DSL expression.",
      "items": {
        "type": "object",
        "required": ["logic"],
        "properties": {
          "logic": {
            "$ref": "./condition-container.schema.json#",
            "description": "The condition to evaluate. Can be an inline JSON-Logic rule or a reference to a named Condition definition via 'condition_ref'."
          },
          "failure_message": {
            "type": "string",
            "description": "An optional message to be logged or displayed if this prerequisite fails. Useful for debugging or providing player feedback."
          }
        },
        "additionalProperties": false
      },
      "default": []
    },
    "template": {
      "type": "string",
      "description": "Required. Text template for generating the command string output, using placeholders like {target} (e.g., 'eat {target}', 'wait')."
    },
    "visual": {
      "type": "object",
      "description": "Visual customization options for action buttons",
      "properties": {
        "backgroundColor": {
          "type": "string",
          "description": "CSS color value for button background",
          "pattern": "^(#([0-9A-Fa-f]{3}){1,2}|rgb\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*\\)|rgba\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(0|0\\.[0-9]+|1(\\.0+)?)\\s*\\)|(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen))$",
          "examples": ["#ff0000", "rgb(255, 0, 0)", "red", "#f00"]
        },
        "textColor": {
          "type": "string",
          "description": "CSS color value for button text",
          "pattern": "^(#([0-9A-Fa-f]{3}){1,2}|rgb\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*\\)|rgba\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(0|0\\.[0-9]+|1(\\.0+)?)\\s*\\)|(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen))$",
          "examples": ["#ffffff", "rgb(255, 255, 255)", "white", "#fff"]
        },
        "hoverBackgroundColor": {
          "type": "string",
          "description": "CSS color for button hover state background (optional)",
          "pattern": "^(#([0-9A-Fa-f]{3}){1,2}|rgb\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*\\)|rgba\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(0|0\\.[0-9]+|1(\\.0+)?)\\s*\\)|(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen))$"
        },
        "hoverTextColor": {
          "type": "string",
          "description": "CSS color for button hover state text (optional)",
          "pattern": "^(#([0-9A-Fa-f]{3}){1,2}|rgb\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*\\)|rgba\\(\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])\\s*,\\s*(0|0\\.[0-9]+|1(\\.0+)?)\\s*\\)|(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|linen|magenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|thistle|tomato|turquoise|violet|wheat|white|whitesmoke|yellow|yellowgreen))$"
        }
      },
      "additionalProperties": false
    }
  },
  "required": ["id", "description", "name", "template"],
  "anyOf": [
    {
      "description": "Action using new 'targets' property (cannot have 'scope')",
      "required": ["targets"],
      "not": {
        "properties": {
          "scope": true
        },
        "required": ["scope"]
      }
    },
    {
      "description": "Action using legacy 'scope' property (cannot have 'targets')",
      "required": ["scope"],
      "not": {
        "properties": {
          "targets": true
        },
        "required": ["targets"]
      }
    }
  ],
  "additionalProperties": true,
  "$comment": "Allows additional properties for future extensions like action costs or effects definitions.",
  "examples": [
    {
      "$comment": "Legacy single-target action using deprecated 'scope' property",
      "id": "core:eat",
      "name": "Eat",
      "description": "Consume an edible item from your inventory",
      "scope": "core:edible_items",
      "template": "eat {target}",
      "prerequisites": []
    },
    {
      "$comment": "Legacy single-target action using new 'targets' string format",
      "id": "core:follow",
      "name": "Follow",
      "description": "Follow another character",
      "targets": "core:potential_leaders",
      "template": "follow {target}",
      "prerequisites": [
        {
          "logic": { "condition_ref": "core:actor-can-move" },
          "failure_message": "You cannot move without functioning legs."
        }
      ]
    },
    {
      "$comment": "Multi-target action with two targets",
      "id": "combat:throw",
      "name": "Throw",
      "description": "Throw an item at a target",
      "targets": {
        "primary": {
          "scope": "combat:throwable_items",
          "placeholder": "item",
          "description": "Item to throw"
        },
        "secondary": {
          "scope": "combat:valid_targets",
          "placeholder": "target",
          "description": "Target to hit"
        }
      },
      "template": "throw {item} at {target}",
      "generateCombinations": true,
      "prerequisites": []
    },
    {
      "$comment": "Multi-target action with contextual dependency",
      "id": "interaction:give",
      "name": "Give",
      "description": "Give an item to another character",
      "targets": {
        "primary": {
          "scope": "inventory:transferable_items",
          "placeholder": "item",
          "description": "Item to give away"
        },
        "secondary": {
          "scope": "characters:nearby",
          "placeholder": "recipient",
          "description": "Character to receive the item",
          "contextFrom": "primary"
        }
      },
      "template": "give {item} to {recipient}",
      "generateCombinations": false,
      "prerequisites": [
        {
          "logic": { "condition_ref": "inventory:has-items" },
          "failure_message": "You have nothing to give."
        }
      ]
    },
    {
      "$comment": "Multi-target action with optional tertiary target",
      "id": "magic:cast_spell",
      "name": "Cast Spell",
      "description": "Cast a spell with optional focus item",
      "targets": {
        "primary": {
          "scope": "magic:known_spells",
          "placeholder": "spell",
          "description": "Spell to cast"
        },
        "secondary": {
          "scope": "magic:spell_targets",
          "placeholder": "target",
          "description": "Target of the spell"
        },
        "tertiary": {
          "scope": "magic:focus_items",
          "placeholder": "focus",
          "description": "Optional magical focus item",
          "optional": true
        }
      },
      "template": "cast {spell} on {target} using {focus}",
      "generateCombinations": false,
      "prerequisites": [
        {
          "logic": { "condition_ref": "magic:has-mana" },
          "failure_message": "You don't have enough mana to cast spells."
        }
      ]
    },
    {
      "$comment": "Action with custom visual properties",
      "id": "combat:berserker_rage",
      "name": "Berserker Rage",
      "description": "Enter a frenzied state, increasing damage but reducing accuracy",
      "targets": "none",
      "template": "enter berserker rage",
      "visual": {
        "backgroundColor": "#cc0000",
        "textColor": "#ffffff",
        "hoverBackgroundColor": "#990000",
        "hoverTextColor": "#ffcccc"
      },
      "prerequisites": [
        {
          "logic": { "condition_ref": "combat:not-in-rage" },
          "failure_message": "You are already in a rage."
        }
      ]
    }
  ]
}
